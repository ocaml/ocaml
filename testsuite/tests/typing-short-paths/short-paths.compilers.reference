module Core :
  sig
    module Int :
      sig
        module T :
          sig
            type t = int
            val compare : 'a -> 'a -> t
            val ( + ) : t -> t -> t
          end
        type t = int
        val compare : 'a -> 'a -> t
        val ( + ) : t -> t -> t
        module Map = Map.Make(T)
      end
    module Std : sig module Int = Int end
  end
val x : 'a Int.Map.t = <abstr>
Line 1, characters 8-9:
1 | let y = x + x ;;
            ^
Error: This expression has type 'a Int.Map.t
       but an expression was expected of type int
module M : sig type t = A type u = C end
module N : sig type t = B end
- : M.t = A
- : N.t = B
- : u = C
type t = M.t = A
type u = M.u = C
- : u = C
module L : sig type v = V end
- : v = V
module L : sig type v = V end
- : v = V
type t1 = A
module M1 : sig type u = v and v = t1 end
module N1 : sig type u = v and v = t1 end
type t1 = B
module N2 : sig type u = v and v = N1.v end
module type PR6566 = sig type t = string end
module PR6566 : sig type t = int end
Line 1, characters 26-32:
1 | module PR6566' : PR6566 = PR6566;;
                              ^^^^^^
Error: Signature mismatch:
       Modules do not match: sig type t = int end is not included in PR6566
       Type declarations do not match:
         type t = int
       is not included in
         type t = string
module A : sig module B : sig type t = T end end
module M2 : sig type u = A.B.t type foo = int type v = u end

