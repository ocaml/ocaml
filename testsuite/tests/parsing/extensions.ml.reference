[
  structure_item (extensions.ml[2,1+0]..[2,1+22])
    Pstr_extension "foo"
    [
      structure_item (extensions.ml[2,1+7]..[2,1+21])
        Pstr_eval
        expression (extensions.ml[2,1+7]..[2,1+21])
          Pexp_let Nonrec
          [
            <def>
              pattern (extensions.ml[2,1+11]..[2,1+12])
                Ppat_var "x" (extensions.ml[2,1+11]..[2,1+12])
              expression (extensions.ml[2,1+15]..[2,1+16])
                Pexp_constant PConst_int (1,None)
          ]
          expression (extensions.ml[2,1+20]..[2,1+21])
            Pexp_ident "x" (extensions.ml[2,1+20]..[2,1+21])
    ]
  structure_item (extensions.ml[3,24+0]..[3,24+48])
    Pstr_value Nonrec
    [
      <def>
        pattern (extensions.ml[3,24+4]..[3,24+33])
          Ppat_constraint
          pattern (extensions.ml[3,24+5]..[3,24+15])
            Ppat_extension "foo"
            [
              structure_item (extensions.ml[3,24+11]..[3,24+14])
                Pstr_eval
                expression (extensions.ml[3,24+11]..[3,24+14])
                  Pexp_apply
                  expression (extensions.ml[3,24+12]..[3,24+13])
                    Pexp_ident "+" (extensions.ml[3,24+12]..[3,24+13])
                  [
                    <arg>
                    Nolabel
                      expression (extensions.ml[3,24+11]..[3,24+12])
                        Pexp_constant PConst_int (2,None)
                    <arg>
                    Nolabel
                      expression (extensions.ml[3,24+13]..[3,24+14])
                        Pexp_constant PConst_int (1,None)
                  ]
            ]
          core_type (extensions.ml[3,24+18]..[3,24+32])
            Ptyp_extension "foo"
            [
              structure_item (extensions.ml[3,24+24]..[3,24+31])
                Pstr_eval
                expression (extensions.ml[3,24+24]..[3,24+31])
                  Pexp_field
                  expression (extensions.ml[3,24+24]..[3,24+27])
                    Pexp_ident "bar" (extensions.ml[3,24+24]..[3,24+27])
                  "baz" (extensions.ml[3,24+28]..[3,24+31])
            ]
        expression (extensions.ml[3,24+36]..[3,24+48])
          Pexp_extension "foo"
          [
            structure_item (extensions.ml[3,24+42]..[3,24+47])
              Pstr_eval
              expression (extensions.ml[3,24+42]..[3,24+47])
                Pexp_constant PConst_string("foo",None)
          ]
    ]
  structure_item (extensions.ml[5,74+0]..[5,74+26])
    Pstr_extension "foo"
    [
      structure_item (extensions.ml[5,74+7]..[5,74+24])
        Pstr_module
        "M" (extensions.ml[5,74+14]..[5,74+15])
          module_expr (extensions.ml[5,74+18]..[5,74+24])
            Pmod_extension "bar"
            []
    ]
  structure_item (extensions.ml[6,101+0]..[6,101+76])
    Pstr_value Nonrec
    [
      <def>
        pattern (extensions.ml[6,101+4]..[6,101+46])
          Ppat_constraint
          pattern (extensions.ml[6,101+5]..[6,101+24])
            Ppat_extension "foo"
            [
              structure_item (extensions.ml[6,101+11]..[6,101+22])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (extensions.ml[6,101+15]..[6,101+17])
                      Ppat_construct "()" (extensions.ml[6,101+15]..[6,101+17])
                      None
                    expression (extensions.ml[6,101+20]..[6,101+22])
                      Pexp_construct "()" (extensions.ml[6,101+20]..[6,101+22])
                      None
                ]
            ]
          core_type (extensions.ml[6,101+27]..[6,101+45])
            Ptyp_extension "foo"
            [
              structure_item (extensions.ml[6,101+33]..[6,101+43])
                Pstr_type Rec
                [
                  type_declaration "t" (extensions.ml[6,101+38]..[6,101+39]) (extensions.ml[6,101+33]..[6,101+43])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ptype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (extensions.ml[6,101+42]..[6,101+43])
                          Ptyp_constr "t" (extensions.ml[6,101+42]..[6,101+43])
                          []
                ]
            ]
        expression (extensions.ml[6,101+49]..[6,101+76])
          Pexp_extension "foo"
          [
            structure_item (extensions.ml[6,101+55]..[6,101+75])
              Pstr_class
              [
                class_declaration (extensions.ml[6,101+55]..[6,101+75])
                  pci_virt = Concrete
                  pci_params =
                    []
                  pci_name = "c" (extensions.ml[6,101+61]..[6,101+62])
                  pci_expr =
                    class_expr (extensions.ml[6,101+65]..[6,101+75])
                      Pcl_structure
                      class_structure
                        pattern (extensions.ml[6,101+71]..[6,101+71]) ghost
                          Ppat_any
                        []
              ]
          ]
    ]
  structure_item (extensions.ml[8,179+0]..[8,179+16])
    Pstr_extension "foo"
    core_type (extensions.ml[8,179+8]..[8,179+15])
      Ptyp_constr "list" (extensions.ml[8,179+11]..[8,179+15])
      [
        core_type (extensions.ml[8,179+8]..[8,179+10])
          Ptyp_var a
      ]
  structure_item (extensions.ml[9,196+0]..[9,196+62])
    Pstr_value Nonrec
    [
      <def>
        pattern (extensions.ml[9,196+4]..[9,196+39])
          Ppat_constraint
          pattern (extensions.ml[9,196+5]..[9,196+20])
            Ppat_extension "foo"
            core_type (extensions.ml[9,196+12]..[9,196+18])
              Ptyp_variant closed=Closed
              [
                Rtag "Foo" true
                  []
              ]
              None
          core_type (extensions.ml[9,196+23]..[9,196+38])
            Ptyp_extension "foo"
            core_type (extensions.ml[9,196+30]..[9,196+36])
              Ptyp_arrow
              Nolabel
              core_type (extensions.ml[9,196+30]..[9,196+31])
                Ptyp_constr "t" (extensions.ml[9,196+30]..[9,196+31])
                []
              core_type (extensions.ml[9,196+35]..[9,196+36])
                Ptyp_constr "t" (extensions.ml[9,196+35]..[9,196+36])
                []
        expression (extensions.ml[9,196+42]..[9,196+62])
          Pexp_extension "foo"
          core_type (extensions.ml[9,196+49]..[9,196+60])
            Ptyp_object Closed
              method foo
                core_type (extensions.ml[9,196+57]..[9,196+58])
                  Ptyp_constr "t" (extensions.ml[9,196+57]..[9,196+58])
                  []
    ]
  structure_item (extensions.ml[11,260+0]..[11,260+11])
    Pstr_extension "foo"
    pattern (extensions.ml[11,260+8]..[11,260+9])
      Ppat_any
  structure_item (extensions.ml[12,272+0]..[12,272+26])
    Pstr_extension "foo"
    pattern (extensions.ml[12,272+8]..[12,272+14])
      Ppat_construct "Some" (extensions.ml[12,272+8]..[12,272+12])
      Some
        pattern (extensions.ml[12,272+13]..[12,272+14])
          Ppat_var "y" (extensions.ml[12,272+13]..[12,272+14])
    <when>
      expression (extensions.ml[12,272+20]..[12,272+25])
        Pexp_apply
        expression (extensions.ml[12,272+22]..[12,272+23])
          Pexp_ident ">" (extensions.ml[12,272+22]..[12,272+23])
        [
          <arg>
          Nolabel
            expression (extensions.ml[12,272+20]..[12,272+21])
              Pexp_ident "y" (extensions.ml[12,272+20]..[12,272+21])
          <arg>
          Nolabel
            expression (extensions.ml[12,272+24]..[12,272+25])
              Pexp_constant PConst_int (0,None)
        ]
  structure_item (extensions.ml[13,299+0]..[13,299+62])
    Pstr_value Nonrec
    [
      <def>
        pattern (extensions.ml[13,299+4]..[13,299+46])
          Ppat_constraint
          pattern (extensions.ml[13,299+5]..[13,299+29])
            Ppat_extension "foo"
            pattern (extensions.ml[13,299+12]..[13,299+27])
              Ppat_or
              pattern (extensions.ml[13,299+13]..[13,299+18])
                Ppat_construct "Bar" (extensions.ml[13,299+13]..[13,299+16])
                Some
                  pattern (extensions.ml[13,299+17]..[13,299+18])
                    Ppat_var "x" (extensions.ml[13,299+17]..[13,299+18])
              pattern (extensions.ml[13,299+21]..[13,299+26])
                Ppat_construct "Baz" (extensions.ml[13,299+21]..[13,299+24])
                Some
                  pattern (extensions.ml[13,299+25]..[13,299+26])
                    Ppat_var "x" (extensions.ml[13,299+25]..[13,299+26])
          core_type (extensions.ml[13,299+32]..[13,299+45])
            Ptyp_extension "foo"
            pattern (extensions.ml[13,299+39]..[13,299+43])
              Ppat_type
              "bar" (extensions.ml[13,299+40]..[13,299+43])
        expression (extensions.ml[13,299+49]..[13,299+62])
          Pexp_extension "foo"
          pattern (extensions.ml[13,299+56]..[13,299+61])
            Ppat_record Closed
            [
              "x" (extensions.ml[13,299+58]..[13,299+59])
                pattern (extensions.ml[13,299+58]..[13,299+59])
                  Ppat_var "x" (extensions.ml[13,299+58]..[13,299+59])
            ]
    ]
  structure_item (extensions.ml[15,363+0]..[15,363+26])
    Pstr_extension "foo"
    [
      signature_item (extensions.ml[15,363+8]..[15,363+25])
        Psig_module "M" (extensions.ml[15,363+15]..[15,363+16])
        module_type (extensions.ml[15,363+19]..[15,363+25])
          Pmod_extension "baz"
          []
    ]
  structure_item (extensions.ml[16,390+0]..[18,466+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (extensions.ml[16,390+4]..[17,430+35])
          Ppat_constraint
          pattern (extensions.ml[16,390+5]..[16,390+39])
            Ppat_extension "foo"
            [
              signature_item (extensions.ml[16,390+12]..[16,390+37])
                Psig_include
                module_type (extensions.ml[16,390+20]..[16,390+37])
                  Pmty_with
                  module_type (extensions.ml[16,390+20]..[16,390+21])
                    Pmty_ident "S" (extensions.ml[16,390+20]..[16,390+21])
                  [
                    Pwith_type "t" (extensions.ml[16,390+32]..[16,390+33])
                      type_declaration "t" (extensions.ml[16,390+32]..[16,390+33]) (extensions.ml[16,390+27]..[16,390+37])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ptype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (extensions.ml[16,390+36]..[16,390+37])
                              Ptyp_constr "t" (extensions.ml[16,390+36]..[16,390+37])
                              []
                  ]
            ]
          core_type (extensions.ml[17,430+6]..[17,430+34])
            Ptyp_extension "foo"
            [
              signature_item (extensions.ml[17,430+13]..[17,430+22])
                Psig_value
                value_description "x" (extensions.ml[17,430+17]..[17,430+18]) (extensions.ml[17,430+13]..[17,430+22])
                  core_type (extensions.ml[17,430+21]..[17,430+22])
                    Ptyp_constr "t" (extensions.ml[17,430+21]..[17,430+22])
                    []
                  []
              signature_item (extensions.ml[17,430+24]..[17,430+33])
                Psig_value
                value_description "y" (extensions.ml[17,430+28]..[17,430+29]) (extensions.ml[17,430+24]..[17,430+33])
                  core_type (extensions.ml[17,430+32]..[17,430+33])
                    Ptyp_constr "t" (extensions.ml[17,430+32]..[17,430+33])
                    []
                  []
            ]
        expression (extensions.ml[18,466+4]..[18,466+23])
          Pexp_extension "foo"
          [
            signature_item (extensions.ml[18,466+11]..[18,466+21])
              Psig_type Rec
              [
                type_declaration "t" (extensions.ml[18,466+16]..[18,466+17]) (extensions.ml[18,466+11]..[18,466+21])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (extensions.ml[18,466+20]..[18,466+21])
                        Ptyp_constr "t" (extensions.ml[18,466+20]..[18,466+21])
                        []
              ]
          ]
    ]
]

File "extensions.ml", line 2, characters 3-6:
Error: Uninterpreted extension 'foo'.
