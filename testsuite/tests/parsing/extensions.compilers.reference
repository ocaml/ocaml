[
  structure_item (extensions.ml[9+0]..[9+22])
    Pstr_extension "foo"
    [
      structure_item (extensions.ml[9+7]..[9+21])
        Pstr_eval
        expression (extensions.ml[9+7]..[9+21])
          Pexp_let Nonrec
          [
            <def>
              pattern (extensions.ml[9+11]..[9+12])
                Ppat_var "x" (extensions.ml[9+11]..[9+12])
              expression (extensions.ml[9+15]..[9+16])
                Pexp_constant PConst_int (1,None)
          ]
          expression (extensions.ml[9+20]..[9+21])
            Pexp_ident "x" (extensions.ml[9+20]..[9+21])
    ]
  structure_item (extensions.ml[10+0]..[10+46])
    Pstr_value Nonrec
    [
      <def>
        pattern (extensions.ml[10+4]..[10+14])
          Ppat_extension "foo"
          [
            structure_item (extensions.ml[10+10]..[10+13])
              Pstr_eval
              expression (extensions.ml[10+10]..[10+13])
                Pexp_apply
                expression (extensions.ml[10+11]..[10+12])
                  Pexp_ident "+" (extensions.ml[10+11]..[10+12])
                [
                  <arg>
                  Nolabel
                    expression (extensions.ml[10+10]..[10+11])
                      Pexp_constant PConst_int (2,None)
                  <arg>
                  Nolabel
                    expression (extensions.ml[10+12]..[10+13])
                      Pexp_constant PConst_int (1,None)
                ]
          ]
        core_type (extensions.ml[10+17]..[10+31])
          Ptyp_extension "foo"
          [
            structure_item (extensions.ml[10+23]..[10+30])
              Pstr_eval
              expression (extensions.ml[10+23]..[10+30])
                Pexp_field
                expression (extensions.ml[10+23]..[10+26])
                  Pexp_ident "bar" (extensions.ml[10+23]..[10+26])
                "baz" (extensions.ml[10+27]..[10+30])
          ]
        expression (extensions.ml[10+34]..[10+46])
          Pexp_extension "foo"
          [
            structure_item (extensions.ml[10+40]..[10+45])
              Pstr_eval
              expression (extensions.ml[10+40]..[10+45])
                Pexp_constant PConst_string("foo",(extensions.ml[10+41]..[10+44]),None)
          ]
    ]
  structure_item (extensions.ml[12+0]..[12+26])
    Pstr_extension "foo"
    [
      structure_item (extensions.ml[12+7]..[12+24])
        Pstr_module
        "M" (extensions.ml[12+14]..[12+15])
          module_expr (extensions.ml[12+18]..[12+24])
            Pmod_extension "bar"
            []
    ]
  structure_item (extensions.ml[13+0]..[13+74])
    Pstr_value Nonrec
    [
      <def>
        pattern (extensions.ml[13+4]..[13+23])
          Ppat_extension "foo"
          [
            structure_item (extensions.ml[13+10]..[13+21])
              Pstr_value Nonrec
              [
                <def>
                  pattern (extensions.ml[13+14]..[13+16])
                    Ppat_construct "()" (extensions.ml[13+14]..[13+16])
                    None
                  expression (extensions.ml[13+19]..[13+21])
                    Pexp_construct "()" (extensions.ml[13+19]..[13+21])
                    None
              ]
          ]
        core_type (extensions.ml[13+26]..[13+44])
          Ptyp_extension "foo"
          [
            structure_item (extensions.ml[13+32]..[13+42])
              Pstr_type Rec
              [
                type_declaration "t" (extensions.ml[13+37]..[13+38]) (extensions.ml[13+32]..[13+42])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (extensions.ml[13+41]..[13+42])
                        Ptyp_constr "t" (extensions.ml[13+41]..[13+42])
                        []
              ]
          ]
        expression (extensions.ml[13+47]..[13+74])
          Pexp_extension "foo"
          [
            structure_item (extensions.ml[13+53]..[13+73])
              Pstr_class
              [
                class_declaration (extensions.ml[13+53]..[13+73])
                  pci_virt = Concrete
                  pci_params =
                    []
                  pci_name = "c" (extensions.ml[13+59]..[13+60])
                  pci_expr =
                    class_expr (extensions.ml[13+63]..[13+73])
                      Pcl_structure
                      class_structure
                        pattern (extensions.ml[13+69]..[13+69]) ghost
                          Ppat_any
                        []
              ]
          ]
    ]
  structure_item (extensions.ml[15+0]..[15+16])
    Pstr_extension "foo"
    core_type (extensions.ml[15+8]..[15+15])
      Ptyp_constr "list" (extensions.ml[15+11]..[15+15])
      [
        core_type (extensions.ml[15+8]..[15+10])
          Ptyp_var a
      ]
  structure_item (extensions.ml[16+0]..[16+60])
    Pstr_value Nonrec
    [
      <def>
        pattern (extensions.ml[16+4]..[16+19])
          Ppat_extension "foo"
          core_type (extensions.ml[16+11]..[16+17])
            Ptyp_variant closed=Closed
            [
              Rtag "Foo" true
                []
            ]
            None
        core_type (extensions.ml[16+22]..[16+37])
          Ptyp_extension "foo"
          core_type (extensions.ml[16+29]..[16+35])
            Ptyp_arrow
            Nolabel
            core_type (extensions.ml[16+29]..[16+30])
              Ptyp_constr "t" (extensions.ml[16+29]..[16+30])
              []
            core_type (extensions.ml[16+34]..[16+35])
              Ptyp_constr "t" (extensions.ml[16+34]..[16+35])
              []
        expression (extensions.ml[16+40]..[16+60])
          Pexp_extension "foo"
          core_type (extensions.ml[16+47]..[16+58])
            Ptyp_object Closed
              method foo
                core_type (extensions.ml[16+55]..[16+56])
                  Ptyp_constr "t" (extensions.ml[16+55]..[16+56])
                  []
    ]
  structure_item (extensions.ml[18+0]..[18+11])
    Pstr_extension "foo"
    pattern (extensions.ml[18+8]..[18+9])
      Ppat_any
  structure_item (extensions.ml[19+0]..[19+26])
    Pstr_extension "foo"
    pattern (extensions.ml[19+8]..[19+14])
      Ppat_construct "Some" (extensions.ml[19+8]..[19+12])
      Some
        []
        pattern (extensions.ml[19+13]..[19+14])
          Ppat_var "y" (extensions.ml[19+13]..[19+14])
    <when>
      expression (extensions.ml[19+20]..[19+25])
        Pexp_apply
        expression (extensions.ml[19+22]..[19+23])
          Pexp_ident ">" (extensions.ml[19+22]..[19+23])
        [
          <arg>
          Nolabel
            expression (extensions.ml[19+20]..[19+21])
              Pexp_ident "y" (extensions.ml[19+20]..[19+21])
          <arg>
          Nolabel
            expression (extensions.ml[19+24]..[19+25])
              Pexp_constant PConst_int (0,None)
        ]
  structure_item (extensions.ml[20+0]..[20+60])
    Pstr_value Nonrec
    [
      <def>
        pattern (extensions.ml[20+4]..[20+28])
          Ppat_extension "foo"
          pattern (extensions.ml[20+11]..[20+26])
            Ppat_or
            pattern (extensions.ml[20+12]..[20+17])
              Ppat_construct "Bar" (extensions.ml[20+12]..[20+15])
              Some
                []
                pattern (extensions.ml[20+16]..[20+17])
                  Ppat_var "x" (extensions.ml[20+16]..[20+17])
            pattern (extensions.ml[20+20]..[20+25])
              Ppat_construct "Baz" (extensions.ml[20+20]..[20+23])
              Some
                []
                pattern (extensions.ml[20+24]..[20+25])
                  Ppat_var "x" (extensions.ml[20+24]..[20+25])
        core_type (extensions.ml[20+31]..[20+44])
          Ptyp_extension "foo"
          pattern (extensions.ml[20+38]..[20+42])
            Ppat_type
            "bar" (extensions.ml[20+39]..[20+42])
        expression (extensions.ml[20+47]..[20+60])
          Pexp_extension "foo"
          pattern (extensions.ml[20+54]..[20+59])
            Ppat_record Closed
            [
              "x" (extensions.ml[20+56]..[20+57]) ghost
                pattern (extensions.ml[20+56]..[20+57])
                  Ppat_var "x" (extensions.ml[20+56]..[20+57])
            ]
    ]
  structure_item (extensions.ml[22+0]..[22+26])
    Pstr_extension "foo"
    [
      signature_item (extensions.ml[22+8]..[22+25])
        Psig_module "M" (extensions.ml[22+15]..[22+16])
        module_type (extensions.ml[22+19]..[22+25])
          Pmod_extension "baz"
          []
    ]
  structure_item (extensions.ml[23+0]..[25+23])
    Pstr_value Nonrec
    [
      <def>
        pattern (extensions.ml[23+4]..[23+38])
          Ppat_extension "foo"
          [
            signature_item (extensions.ml[23+11]..[23+36])
              Psig_include
              module_type (extensions.ml[23+19]..[23+36])
                Pmty_with
                module_type (extensions.ml[23+19]..[23+20])
                  Pmty_ident "S" (extensions.ml[23+19]..[23+20])
                [
                  Pwith_type "t" (extensions.ml[23+31]..[23+32])
                    type_declaration "t" (extensions.ml[23+31]..[23+32]) (extensions.ml[23+26]..[23+36])
                      ptype_params =
                        []
                      ptype_cstrs =
                        []
                      ptype_kind =
                        Ptype_abstract
                      ptype_private = Public
                      ptype_manifest =
                        Some
                          core_type (extensions.ml[23+35]..[23+36])
                            Ptyp_constr "t" (extensions.ml[23+35]..[23+36])
                            []
                ]
          ]
        core_type (extensions.ml[24+4]..[24+32])
          Ptyp_extension "foo"
          [
            signature_item (extensions.ml[24+11]..[24+20])
              Psig_value
              value_description "x" (extensions.ml[24+15]..[24+16]) (extensions.ml[24+11]..[24+20])
                core_type (extensions.ml[24+19]..[24+20])
                  Ptyp_constr "t" (extensions.ml[24+19]..[24+20])
                  []
                []
            signature_item (extensions.ml[24+22]..[24+31])
              Psig_value
              value_description "y" (extensions.ml[24+26]..[24+27]) (extensions.ml[24+22]..[24+31])
                core_type (extensions.ml[24+30]..[24+31])
                  Ptyp_constr "t" (extensions.ml[24+30]..[24+31])
                  []
                []
          ]
        expression (extensions.ml[25+4]..[25+23])
          Pexp_extension "foo"
          [
            signature_item (extensions.ml[25+11]..[25+21])
              Psig_type Rec
              [
                type_declaration "t" (extensions.ml[25+16]..[25+17]) (extensions.ml[25+11]..[25+21])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (extensions.ml[25+20]..[25+21])
                        Ptyp_constr "t" (extensions.ml[25+20]..[25+21])
                        []
              ]
          ]
    ]
]

File "extensions.ml", line 9, characters 3-6:
9 | [%%foo let x = 1 in x]
       ^^^
Error: Uninterpreted extension 'foo'.
