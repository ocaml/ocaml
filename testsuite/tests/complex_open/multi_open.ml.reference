
#               val sp : ('a, unit, string) format -> 'a = <fun>
val not : string -> string = <fun>
val right : string -> string = <fun>
val nested : string -> string = <fun>
val x : string = "Module M was not opened"
val y : string = "Module N was not opened"
val z : string = "Module L was not opened"
#         module M : sig val x : string module N : sig val y : string end end
#         module N : sig val y : string module L : sig val z : string end end
#         module L : sig val z : string module M : sig val x : string end end
#         val pp : ('a, out_channel, unit) format -> 'a = <fun>
val test : string -> string list -> unit = <fun>
#       Local open:
	Module M correctly opened
	Module N correctly opened
	Module L correctly opened
#                 Characters 116-164:
  ..let open M and N in (* x is shadowed here *)
    x..
Warning 44: this open statement shadows the value identifier x (which is later used)
Module M was not opened
val which_x : string = "Module M correctly opened"
#           Module M was not opened
val which_x : string = "Module M correctly opened"
#       Global open:
	Module M correctly opened
	Module N correctly opened
	Module L correctly opened
#       Nested global open:
	Nested module L.M correctly opened
	Nested module M.N correctly opened
	Nested module N.L correctly opened
#     
