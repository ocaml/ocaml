Ptop_def
  [
    structure_item (//toplevel//[10+0]..[10+39])
      Pstr_modtype "S" (//toplevel//[10+12]..[10+13])
        module_type (//toplevel//[10+16]..[10+23])
          attribute "attr"
            [
              structure_item (//toplevel//[10+31]..[10+38])
                Pstr_eval
                expression (//toplevel//[10+31]..[10+38])
                  Pexp_ident "payload" (//toplevel//[10+31]..[10+38])
            ]
          Pmty_signature
          []
  ]

module type S = sig end
Ptop_def
  [
    structure_item (//toplevel//[3+0]..[3+37])
      Pstr_module
      "M" (//toplevel//[3+7]..[3+8])
        module_expr (//toplevel//[3+11]..[3+21])
          attribute "attr"
            [
              structure_item (//toplevel//[3+29]..[3+36])
                Pstr_eval
                expression (//toplevel//[3+29]..[3+36])
                  Pexp_ident "payload" (//toplevel//[3+29]..[3+36])
            ]
          Pmod_structure
          []
  ]

module M : sig end
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+28])
      Pstr_type Rec
      [
        type_declaration "t" (//toplevel//[2+5]..[2+6]) (//toplevel//[2+0]..[2+28])
          ptype_params =
            []
          ptype_cstrs =
            []
          ptype_kind =
            Ptype_abstract
          ptype_private = Public
          ptype_manifest =
            Some
              core_type (//toplevel//[2+9]..[2+12])
                attribute "attr"
                  [
                    structure_item (//toplevel//[2+20]..[2+27])
                      Pstr_eval
                      expression (//toplevel//[2+20]..[2+27])
                        Pexp_ident "payload" (//toplevel//[2+20]..[2+27])
                  ]
                Ptyp_constr "int" (//toplevel//[2+9]..[2+12])
                []
      ]
  ]

type t = int
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+1])
      Pstr_eval
      expression (//toplevel//[2+0]..[2+1])
        attribute "attr"
          [
            structure_item (//toplevel//[2+9]..[2+16])
              Pstr_eval
              expression (//toplevel//[2+9]..[2+16])
                Pexp_ident "payload" (//toplevel//[2+9]..[2+16])
          ]
        Pexp_constant PConst_int (3,None)
  ]

- : int = 3
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+30])
      Pstr_exception
      type_exception
        attribute "attr"
          [
            structure_item (//toplevel//[2+22]..[2+29])
              Pstr_eval
              expression (//toplevel//[2+22]..[2+29])
                Pexp_ident "payload" (//toplevel//[2+22]..[2+29])
          ]
        ptyext_constructor =
          extension_constructor (//toplevel//[2+0]..[2+13])
            pext_name = "Exn"
            pext_kind =
              Pext_decl
                []
                None
  ]

exception Exn
Ptop_def
  [
    structure_item (//toplevel//[4+0]..[4+50])
      Pstr_modtype "F" (//toplevel//[4+12]..[4+13])
        module_type (//toplevel//[4+24]..[4+50])
          Pmty_functor "A" (//toplevel//[4+25]..[4+26])
          module_type (//toplevel//[4+29]..[4+30])
            Pmty_ident "S" (//toplevel//[4+29]..[4+30])
          module_type (//toplevel//[4+32]..[4+50])
            Pmty_functor "B" (//toplevel//[4+33]..[4+34])
            module_type (//toplevel//[4+37]..[4+38])
              Pmty_ident "S" (//toplevel//[4+37]..[4+38])
            module_type (//toplevel//[4+43]..[4+50])
              Pmty_signature
              []
  ]

module type F = functor (A : S) (B : S) -> sig end
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+48])
      Pstr_module
      "F" (//toplevel//[2+7]..[2+8])
        module_expr (//toplevel//[2+19]..[2+48])
          Pmod_functor "A" (//toplevel//[2+20]..[2+21])
          module_type (//toplevel//[2+24]..[2+25])
            Pmty_ident "S" (//toplevel//[2+24]..[2+25])
          module_expr (//toplevel//[2+27]..[2+48])
            Pmod_functor "B" (//toplevel//[2+28]..[2+29])
            module_type (//toplevel//[2+32]..[2+33])
              Pmty_ident "S" (//toplevel//[2+32]..[2+33])
            module_expr (//toplevel//[2+38]..[2+48])
              Pmod_structure
              []
  ]

module F : functor (A : S) (B : S) -> sig end
Ptop_def
  [
    structure_item (//toplevel//[4+0]..[4+31])
      Pstr_modtype "S1" (//toplevel//[4+12]..[4+14])
        module_type (//toplevel//[4+17]..[4+31])
          Pmty_signature
          [
            signature_item (//toplevel//[4+21]..[4+27])
              Psig_type Rec
              [
                type_declaration "t" (//toplevel//[4+26]..[4+27]) (//toplevel//[4+21]..[4+27])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    None
              ]
          ]
  ]

module type S1 = sig type t end
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+37])
      Pstr_modtype "T1" (//toplevel//[2+12]..[2+14])
        module_type (//toplevel//[2+17]..[2+37])
          Pmty_with
          module_type (//toplevel//[2+17]..[2+19])
            Pmty_ident "S1" (//toplevel//[2+17]..[2+19])
          [
            Pwith_type "t" (//toplevel//[2+30]..[2+31])
              type_declaration "t" (//toplevel//[2+30]..[2+31]) (//toplevel//[2+25]..[2+37])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (//toplevel//[2+34]..[2+37])
                      Ptyp_constr "int" (//toplevel//[2+34]..[2+37])
                      []
          ]
  ]

module type T1 = sig type t = int end
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+38])
      Pstr_modtype "T1" (//toplevel//[2+12]..[2+14])
        module_type (//toplevel//[2+17]..[2+38])
          Pmty_with
          module_type (//toplevel//[2+17]..[2+19])
            Pmty_ident "S1" (//toplevel//[2+17]..[2+19])
          [
            Pwith_typesubst "t" (//toplevel//[2+30]..[2+31])
              type_declaration "t" (//toplevel//[2+30]..[2+31]) (//toplevel//[2+25]..[2+38])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (//toplevel//[2+35]..[2+38])
                      Ptyp_constr "int" (//toplevel//[2+35]..[2+38])
                      []
          ]
  ]

module type T1 = sig end
Ptop_def
  [
    structure_item (//toplevel//[4+0]..[4+15])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[4+4]..[4+5])
            Ppat_var "x" (//toplevel//[4+4]..[4+5])
          core_type (//toplevel//[4+8]..[4+11])
            Ptyp_constr "int" (//toplevel//[4+8]..[4+11])
            []
          expression (//toplevel//[4+14]..[4+15])
            Pexp_constant PConst_int (3,None)
      ]
  ]

val x : int = 3
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+35])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[2+4]..[2+5])
            Ppat_var "x" (//toplevel//[2+4]..[2+5])
          <type> "a" (//toplevel//[2+13]..[2+14]).
          core_type (//toplevel//[2+16]..[2+22])
            Ptyp_arrow
            Nolabel
            core_type (//toplevel//[2+16]..[2+17])
              Ptyp_constr "a" (//toplevel//[2+16]..[2+17])
              []
            core_type (//toplevel//[2+21]..[2+22])
              Ptyp_constr "a" (//toplevel//[2+21]..[2+22])
              []
          expression (//toplevel//[2+25]..[2+35])
            Pexp_function
            [
              Pparam_val (//toplevel//[2+29]..[2+30])
                Nolabel
                None
                pattern (//toplevel//[2+29]..[2+30])
                  Ppat_var "x" (//toplevel//[2+29]..[2+30])
            ]
            None
            Pfunction_body
              expression (//toplevel//[2+34]..[2+35])
                Pexp_ident "x" (//toplevel//[2+34]..[2+35])
      ]
  ]

val x : 'a -> 'a = <fun>
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[5+3])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[2+4]..[2+5])
            Ppat_any
          expression (//toplevel//[2+8]..[5+3])
            Pexp_object
            class_structure
              pattern (//toplevel//[2+14]..[2+14]) ghost
                Ppat_any
              [
                class_field (//toplevel//[3+2]..[4+14])
                  Pcf_method Public
                    "x" (//toplevel//[3+9]..[3+10])
                    Concrete Fresh
                    expression (//toplevel//[3+18]..[4+14]) ghost
                      Pexp_poly
                      expression (//toplevel//[3+9]..[4+14])
                        Pexp_newtype "a"
                        expression (//toplevel//[3+9]..[4+14])
                          Pexp_constraint
                          expression (//toplevel//[4+4]..[4+14])
                            Pexp_function
                            [
                              Pparam_val (//toplevel//[4+8]..[4+9])
                                Nolabel
                                None
                                pattern (//toplevel//[4+8]..[4+9])
                                  Ppat_var "x" (//toplevel//[4+8]..[4+9])
                            ]
                            None
                            Pfunction_body
                              expression (//toplevel//[4+13]..[4+14])
                                Pexp_ident "x" (//toplevel//[4+13]..[4+14])
                          core_type (//toplevel//[3+21]..[3+27])
                            Ptyp_arrow
                            Nolabel
                            core_type (//toplevel//[3+21]..[3+22])
                              Ptyp_constr "a" (//toplevel//[3+21]..[3+22])
                              []
                            core_type (//toplevel//[3+26]..[3+27])
                              Ptyp_constr "a" (//toplevel//[3+26]..[3+27])
                              []
                      Some
                        core_type (//toplevel//[3+9]..[4+14]) ghost
                          Ptyp_poly 'a
                          core_type (//toplevel//[3+21]..[3+27])
                            Ptyp_arrow
                            Nolabel
                            core_type (//toplevel//[3+21]..[3+22])
                              Ptyp_var a
                            core_type (//toplevel//[3+26]..[3+27])
                              Ptyp_var a
              ]
      ]
  ]

- : < x : 'a. 'a -> 'a > = <obj>
Ptop_def
  [
    structure_item (//toplevel//[4+0]..[4+29])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[4+4]..[4+5])
            Ppat_var "x" (//toplevel//[4+4]..[4+5])
          expression (//toplevel//[4+6]..[4+29]) ghost
            Pexp_function
            [
              Pparam_val (//toplevel//[4+6]..[4+14])
                Nolabel
                None
                pattern (//toplevel//[4+6]..[4+14])
                  Ppat_var "contents" (//toplevel//[4+6]..[4+14])
            ]
            None
            Pfunction_body
              expression (//toplevel//[4+17]..[4+29])
                Pexp_record
                [
                  "contents" (//toplevel//[4+19]..[4+27]) ghost
                    expression (//toplevel//[4+19]..[4+27])
                      Pexp_ident "contents" (//toplevel//[4+19]..[4+27])
                ]
                None
      ]
  ]

val x : 'a -> 'a ref = <fun>
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+30])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[2+4]..[2+5])
            Ppat_var "x" (//toplevel//[2+4]..[2+5])
          expression (//toplevel//[2+8]..[2+30])
            Pexp_record
            [
              "contents" (//toplevel//[2+10]..[2+18])
                expression (//toplevel//[2+19]..[2+28])
                  Pexp_constraint
                  expression (//toplevel//[2+27]..[2+28])
                    Pexp_constant PConst_int (3,None)
                  core_type (//toplevel//[2+21]..[2+24])
                    Ptyp_constr "int" (//toplevel//[2+21]..[2+24])
                    []
            ]
            None
      ]
  ]

val x : int ref = {contents = 3}
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+35])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[2+4]..[2+5])
            Ppat_var "x" (//toplevel//[2+4]..[2+5])
          expression (//toplevel//[2+6]..[2+35]) ghost
            Pexp_function
            [
              Pparam_val (//toplevel//[2+6]..[2+14])
                Nolabel
                None
                pattern (//toplevel//[2+6]..[2+14])
                  Ppat_var "contents" (//toplevel//[2+6]..[2+14])
            ]
            None
            Pfunction_body
              expression (//toplevel//[2+17]..[2+35])
                Pexp_record
                [
                  "contents" (//toplevel//[2+19]..[2+27]) ghost
                    expression (//toplevel//[2+19]..[2+33])
                      Pexp_constraint
                      expression (//toplevel//[2+19]..[2+27])
                        Pexp_ident "contents" (//toplevel//[2+19]..[2+27])
                      core_type (//toplevel//[2+30]..[2+33])
                        Ptyp_constr "int" (//toplevel//[2+30]..[2+33])
                        []
                ]
                None
      ]
  ]

val x : int -> int ref = <fun>
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+41])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[2+4]..[2+5])
            Ppat_var "x" (//toplevel//[2+4]..[2+5])
          expression (//toplevel//[2+8]..[2+41])
            Pexp_function
            []
            None
            Pfunction_cases (//toplevel//[2+8]..[2+41])
              [
                <case>
                  pattern (//toplevel//[2+17]..[2+29])
                    Ppat_record Closed
                    [
                      "contents" (//toplevel//[2+19]..[2+27]) ghost
                        pattern (//toplevel//[2+19]..[2+27])
                          Ppat_var "contents" (//toplevel//[2+19]..[2+27])
                    ]
                  expression (//toplevel//[2+33]..[2+41])
                    Pexp_ident "contents" (//toplevel//[2+33]..[2+41])
              ]
      ]
  ]

val x : 'a ref -> 'a = <fun>
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+47])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[2+4]..[2+5])
            Ppat_var "x" (//toplevel//[2+4]..[2+5])
          expression (//toplevel//[2+8]..[2+47])
            Pexp_function
            []
            None
            Pfunction_cases (//toplevel//[2+8]..[2+47])
              [
                <case>
                  pattern (//toplevel//[2+17]..[2+35])
                    Ppat_record Closed
                    [
                      "contents" (//toplevel//[2+19]..[2+27]) ghost
                        pattern (//toplevel//[2+19]..[2+33])
                          Ppat_constraint
                          pattern (//toplevel//[2+19]..[2+27])
                            Ppat_var "contents" (//toplevel//[2+19]..[2+27])
                          core_type (//toplevel//[2+30]..[2+33])
                            Ptyp_constr "int" (//toplevel//[2+30]..[2+33])
                            []
                    ]
                  expression (//toplevel//[2+39]..[2+47])
                    Pexp_ident "contents" (//toplevel//[2+39]..[2+47])
              ]
      ]
  ]

val x : int ref -> int = <fun>
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+44])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[2+4]..[2+5])
            Ppat_var "x" (//toplevel//[2+4]..[2+5])
          expression (//toplevel//[2+8]..[2+44])
            Pexp_function
            []
            None
            Pfunction_cases (//toplevel//[2+8]..[2+44])
              [
                <case>
                  pattern (//toplevel//[2+17]..[2+39])
                    Ppat_record Closed
                    [
                      "contents" (//toplevel//[2+19]..[2+27])
                        pattern (//toplevel//[2+28]..[2+37])
                          Ppat_constraint
                          pattern (//toplevel//[2+36]..[2+37])
                            Ppat_var "i" (//toplevel//[2+36]..[2+37])
                          core_type (//toplevel//[2+30]..[2+33])
                            Ptyp_constr "int" (//toplevel//[2+30]..[2+33])
                            []
                    ]
                  expression (//toplevel//[2+43]..[2+44])
                    Pexp_ident "i" (//toplevel//[2+43]..[2+44])
              ]
      ]
  ]

val x : int ref -> int = <fun>
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[3+50])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[2+4]..[2+5])
            Ppat_any
          expression (//toplevel//[3+2]..[3+50])
            Pexp_object
            class_structure
              pattern (//toplevel//[3+8]..[3+8]) ghost
                Ppat_any
              [
                class_field (//toplevel//[3+9]..[3+21])
                  Pcf_val Immutable
                    "foo" (//toplevel//[3+13]..[3+16])
                    Concrete Fresh
                    expression (//toplevel//[3+19]..[3+21])
                      Pexp_constant PConst_int (12,None)
                class_field (//toplevel//[3+22]..[3+46])
                  Pcf_method Public
                    "x" (//toplevel//[3+29]..[3+30])
                    Concrete Fresh
                    expression (//toplevel//[3+31]..[3+46]) ghost
                      Pexp_poly
                      expression (//toplevel//[3+31]..[3+46]) ghost
                        Pexp_function
                        [
                          Pparam_val (//toplevel//[3+31]..[3+34])
                            Nolabel
                            None
                            pattern (//toplevel//[3+31]..[3+34])
                              Ppat_var "foo" (//toplevel//[3+31]..[3+34])
                        ]
                        None
                        Pfunction_body
                          expression (//toplevel//[3+37]..[3+46])
                            Pexp_override
                            [
                              <override> "foo" (//toplevel//[3+40]..[3+43]) ghost
                                expression (//toplevel//[3+40]..[3+43])
                                  Pexp_ident "foo" (//toplevel//[3+40]..[3+43])
                            ]
                      None
              ]
      ]
  ]

- : < x : int -> 'a > as 'a = <obj>
Ptop_def
  [
    structure_item (//toplevel//[4+0]..[4+26])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[4+4]..[4+5])
            Ppat_var "x" (//toplevel//[4+4]..[4+5])
          expression (//toplevel//[4+8]..[4+26])
            Pexp_open Fresh
            module_expr (//toplevel//[4+8]..[4+9])
              Pmod_ident "M" (//toplevel//[4+8]..[4+9])
            expression (//toplevel//[4+10]..[4+26])
              Pexp_record
              [
                "contents" (//toplevel//[4+12]..[4+20])
                  expression (//toplevel//[4+23]..[4+24])
                    Pexp_constant PConst_int (3,None)
              ]
              None
      ]
  ]

val x : int ref = {contents = 3}
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+18])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[2+4]..[2+5])
            Ppat_var "x" (//toplevel//[2+4]..[2+5])
          expression (//toplevel//[2+8]..[2+18])
            Pexp_open Fresh
            module_expr (//toplevel//[2+8]..[2+9])
              Pmod_ident "M" (//toplevel//[2+8]..[2+9])
            expression (//toplevel//[2+10]..[2+18])
              Pexp_construct "::" (//toplevel//[2+12]..[2+18]) ghost
              Some
                expression (//toplevel//[2+12]..[2+18]) ghost
                  Pexp_tuple
                  [
                    expression (//toplevel//[2+12]..[2+13])
                      Pexp_constant PConst_int (3,None)
                    expression (//toplevel//[2+15]..[2+18]) ghost
                      Pexp_construct "::" (//toplevel//[2+15]..[2+18]) ghost
                      Some
                        expression (//toplevel//[2+15]..[2+18]) ghost
                          Pexp_tuple
                          [
                            expression (//toplevel//[2+15]..[2+16])
                              Pexp_constant PConst_int (4,None)
                            expression (//toplevel//[2+17]..[2+18]) ghost
                              Pexp_construct "[]" (//toplevel//[2+17]..[2+18]) ghost
                              None
                          ]
                  ]
      ]
  ]

val x : int list = [3; 4]
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+18])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[2+4]..[2+5])
            Ppat_var "x" (//toplevel//[2+4]..[2+5])
          expression (//toplevel//[2+8]..[2+18])
            Pexp_open Fresh
            module_expr (//toplevel//[2+8]..[2+9])
              Pmod_ident "M" (//toplevel//[2+8]..[2+9])
            expression (//toplevel//[2+12]..[2+16])
              Pexp_sequence
              expression (//toplevel//[2+12]..[2+13])
                Pexp_constant PConst_int (3,None)
              expression (//toplevel//[2+15]..[2+16])
                Pexp_constant PConst_int (4,None)
      ]
  ]

Line 2, characters 12-13:
2 | let x = M.( 3; 4 );;
                ^
Warning 10 [non-unit-statement]: this expression should have type unit.

val x : int = 4
Ptop_def
  [
    structure_item (//toplevel//[6+0]..[6+24])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[6+4]..[6+12])
            Ppat_var ".@()" (//toplevel//[6+4]..[6+12])
          expression (//toplevel//[6+13]..[6+24]) ghost
            Pexp_function
            [
              Pparam_val (//toplevel//[6+13]..[6+14])
                Nolabel
                None
                pattern (//toplevel//[6+13]..[6+14])
                  Ppat_var "x" (//toplevel//[6+13]..[6+14])
              Pparam_val (//toplevel//[6+15]..[6+16])
                Nolabel
                None
                pattern (//toplevel//[6+15]..[6+16])
                  Ppat_var "y" (//toplevel//[6+15]..[6+16])
            ]
            None
            Pfunction_body
              expression (//toplevel//[6+19]..[6+24])
                Pexp_apply
                expression (//toplevel//[6+21]..[6+22])
                  Pexp_ident "+" (//toplevel//[6+21]..[6+22])
                [
                  <arg>
                  Nolabel
                    expression (//toplevel//[6+19]..[6+20])
                      Pexp_ident "x" (//toplevel//[6+19]..[6+20])
                  <arg>
                  Nolabel
                    expression (//toplevel//[6+23]..[6+24])
                      Pexp_ident "y" (//toplevel//[6+23]..[6+24])
                ]
      ]
    structure_item (//toplevel//[7+0]..[7+32])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[7+4]..[7+14])
            Ppat_var ".@()<-" (//toplevel//[7+4]..[7+14])
          expression (//toplevel//[7+15]..[7+32]) ghost
            Pexp_function
            [
              Pparam_val (//toplevel//[7+15]..[7+16])
                Nolabel
                None
                pattern (//toplevel//[7+15]..[7+16])
                  Ppat_var "x" (//toplevel//[7+15]..[7+16])
              Pparam_val (//toplevel//[7+17]..[7+18])
                Nolabel
                None
                pattern (//toplevel//[7+17]..[7+18])
                  Ppat_var "y" (//toplevel//[7+17]..[7+18])
              Pparam_val (//toplevel//[7+19]..[7+20])
                Nolabel
                None
                pattern (//toplevel//[7+19]..[7+20])
                  Ppat_var "z" (//toplevel//[7+19]..[7+20])
            ]
            None
            Pfunction_body
              expression (//toplevel//[7+23]..[7+32])
                Pexp_apply
                expression (//toplevel//[7+29]..[7+30])
                  Pexp_ident "+" (//toplevel//[7+29]..[7+30])
                [
                  <arg>
                  Nolabel
                    expression (//toplevel//[7+23]..[7+28])
                      Pexp_apply
                      expression (//toplevel//[7+25]..[7+26])
                        Pexp_ident "+" (//toplevel//[7+25]..[7+26])
                      [
                        <arg>
                        Nolabel
                          expression (//toplevel//[7+23]..[7+24])
                            Pexp_ident "x" (//toplevel//[7+23]..[7+24])
                        <arg>
                        Nolabel
                          expression (//toplevel//[7+27]..[7+28])
                            Pexp_ident "y" (//toplevel//[7+27]..[7+28])
                      ]
                  <arg>
                  Nolabel
                    expression (//toplevel//[7+31]..[7+32])
                      Pexp_ident "z" (//toplevel//[7+31]..[7+32])
                ]
      ]
    structure_item (//toplevel//[8+0]..[8+25])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[8+4]..[8+13])
            Ppat_var ".%.{}" (//toplevel//[8+4]..[8+13])
          expression (//toplevel//[8+14]..[8+25]) ghost
            Pexp_function
            [
              Pparam_val (//toplevel//[8+14]..[8+15])
                Nolabel
                None
                pattern (//toplevel//[8+14]..[8+15])
                  Ppat_var "x" (//toplevel//[8+14]..[8+15])
              Pparam_val (//toplevel//[8+16]..[8+17])
                Nolabel
                None
                pattern (//toplevel//[8+16]..[8+17])
                  Ppat_var "y" (//toplevel//[8+16]..[8+17])
            ]
            None
            Pfunction_body
              expression (//toplevel//[8+20]..[8+25])
                Pexp_apply
                expression (//toplevel//[8+22]..[8+23])
                  Pexp_ident "+" (//toplevel//[8+22]..[8+23])
                [
                  <arg>
                  Nolabel
                    expression (//toplevel//[8+20]..[8+21])
                      Pexp_ident "x" (//toplevel//[8+20]..[8+21])
                  <arg>
                  Nolabel
                    expression (//toplevel//[8+24]..[8+25])
                      Pexp_ident "y" (//toplevel//[8+24]..[8+25])
                ]
      ]
    structure_item (//toplevel//[9+0]..[9+33])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[9+4]..[9+15])
            Ppat_var ".%.{}<-" (//toplevel//[9+4]..[9+15])
          expression (//toplevel//[9+16]..[9+33]) ghost
            Pexp_function
            [
              Pparam_val (//toplevel//[9+16]..[9+17])
                Nolabel
                None
                pattern (//toplevel//[9+16]..[9+17])
                  Ppat_var "x" (//toplevel//[9+16]..[9+17])
              Pparam_val (//toplevel//[9+18]..[9+19])
                Nolabel
                None
                pattern (//toplevel//[9+18]..[9+19])
                  Ppat_var "y" (//toplevel//[9+18]..[9+19])
              Pparam_val (//toplevel//[9+20]..[9+21])
                Nolabel
                None
                pattern (//toplevel//[9+20]..[9+21])
                  Ppat_var "z" (//toplevel//[9+20]..[9+21])
            ]
            None
            Pfunction_body
              expression (//toplevel//[9+24]..[9+33])
                Pexp_apply
                expression (//toplevel//[9+30]..[9+31])
                  Pexp_ident "+" (//toplevel//[9+30]..[9+31])
                [
                  <arg>
                  Nolabel
                    expression (//toplevel//[9+24]..[9+29])
                      Pexp_apply
                      expression (//toplevel//[9+26]..[9+27])
                        Pexp_ident "+" (//toplevel//[9+26]..[9+27])
                      [
                        <arg>
                        Nolabel
                          expression (//toplevel//[9+24]..[9+25])
                            Pexp_ident "x" (//toplevel//[9+24]..[9+25])
                        <arg>
                        Nolabel
                          expression (//toplevel//[9+28]..[9+29])
                            Pexp_ident "y" (//toplevel//[9+28]..[9+29])
                      ]
                  <arg>
                  Nolabel
                    expression (//toplevel//[9+32]..[9+33])
                      Pexp_ident "z" (//toplevel//[9+32]..[9+33])
                ]
      ]
    structure_item (//toplevel//[10+0]..[10+25])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[10+4]..[10+13])
            Ppat_var ".%.[]" (//toplevel//[10+4]..[10+13])
          expression (//toplevel//[10+14]..[10+25]) ghost
            Pexp_function
            [
              Pparam_val (//toplevel//[10+14]..[10+15])
                Nolabel
                None
                pattern (//toplevel//[10+14]..[10+15])
                  Ppat_var "x" (//toplevel//[10+14]..[10+15])
              Pparam_val (//toplevel//[10+16]..[10+17])
                Nolabel
                None
                pattern (//toplevel//[10+16]..[10+17])
                  Ppat_var "y" (//toplevel//[10+16]..[10+17])
            ]
            None
            Pfunction_body
              expression (//toplevel//[10+20]..[10+25])
                Pexp_apply
                expression (//toplevel//[10+22]..[10+23])
                  Pexp_ident "+" (//toplevel//[10+22]..[10+23])
                [
                  <arg>
                  Nolabel
                    expression (//toplevel//[10+20]..[10+21])
                      Pexp_ident "x" (//toplevel//[10+20]..[10+21])
                  <arg>
                  Nolabel
                    expression (//toplevel//[10+24]..[10+25])
                      Pexp_ident "y" (//toplevel//[10+24]..[10+25])
                ]
      ]
    structure_item (//toplevel//[11+0]..[11+33])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[11+4]..[11+15])
            Ppat_var ".%.[]<-" (//toplevel//[11+4]..[11+15])
          expression (//toplevel//[11+16]..[11+33]) ghost
            Pexp_function
            [
              Pparam_val (//toplevel//[11+16]..[11+17])
                Nolabel
                None
                pattern (//toplevel//[11+16]..[11+17])
                  Ppat_var "x" (//toplevel//[11+16]..[11+17])
              Pparam_val (//toplevel//[11+18]..[11+19])
                Nolabel
                None
                pattern (//toplevel//[11+18]..[11+19])
                  Ppat_var "y" (//toplevel//[11+18]..[11+19])
              Pparam_val (//toplevel//[11+20]..[11+21])
                Nolabel
                None
                pattern (//toplevel//[11+20]..[11+21])
                  Ppat_var "z" (//toplevel//[11+20]..[11+21])
            ]
            None
            Pfunction_body
              expression (//toplevel//[11+24]..[11+33])
                Pexp_apply
                expression (//toplevel//[11+30]..[11+31])
                  Pexp_ident "+" (//toplevel//[11+30]..[11+31])
                [
                  <arg>
                  Nolabel
                    expression (//toplevel//[11+24]..[11+29])
                      Pexp_apply
                      expression (//toplevel//[11+26]..[11+27])
                        Pexp_ident "+" (//toplevel//[11+26]..[11+27])
                      [
                        <arg>
                        Nolabel
                          expression (//toplevel//[11+24]..[11+25])
                            Pexp_ident "x" (//toplevel//[11+24]..[11+25])
                        <arg>
                        Nolabel
                          expression (//toplevel//[11+28]..[11+29])
                            Pexp_ident "y" (//toplevel//[11+28]..[11+29])
                      ]
                  <arg>
                  Nolabel
                    expression (//toplevel//[11+32]..[11+33])
                      Pexp_ident "z" (//toplevel//[11+32]..[11+33])
                ]
      ]
  ]

val ( .@() ) : int -> int -> int = <fun>
val ( .@()<- ) : int -> int -> int -> int = <fun>
val ( .%.{} ) : int -> int -> int = <fun>
val ( .%.{}<- ) : int -> int -> int -> int = <fun>
val ( .%.[] ) : int -> int -> int = <fun>
val ( .%.[]<- ) : int -> int -> int -> int = <fun>
Ptop_def
  [
    structure_item (//toplevel//[4+0]..[4+6])
      Pstr_eval
      expression (//toplevel//[4+0]..[4+6])
        Pexp_apply
        expression (//toplevel//[4+0]..[4+6]) ghost
          Pexp_ident ".@()" (//toplevel//[4+0]..[4+6]) ghost
        [
          <arg>
          Nolabel
            expression (//toplevel//[4+0]..[4+1])
              Pexp_ident "x" (//toplevel//[4+0]..[4+1])
          <arg>
          Nolabel
            expression (//toplevel//[4+4]..[4+5])
              Pexp_constant PConst_int (4,None)
        ]
  ]

- : int = 8
Ptop_def
  [
    structure_item (//toplevel//[1+0]..[1+11])
      Pstr_eval
      expression (//toplevel//[1+0]..[1+11])
        Pexp_apply
        expression (//toplevel//[1+0]..[1+11]) ghost
          Pexp_ident ".@()<-" (//toplevel//[1+0]..[1+11]) ghost
        [
          <arg>
          Nolabel
            expression (//toplevel//[1+0]..[1+1])
              Pexp_ident "x" (//toplevel//[1+0]..[1+1])
          <arg>
          Nolabel
            expression (//toplevel//[1+4]..[1+5])
              Pexp_constant PConst_int (4,None)
          <arg>
          Nolabel
            expression (//toplevel//[1+10]..[1+11])
              Pexp_constant PConst_int (4,None)
        ]
  ]

- : int = 12
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+7])
      Pstr_eval
      expression (//toplevel//[2+0]..[2+7])
        Pexp_apply
        expression (//toplevel//[2+0]..[2+7]) ghost
          Pexp_ident ".%.{}" (//toplevel//[2+0]..[2+7]) ghost
        [
          <arg>
          Nolabel
            expression (//toplevel//[2+0]..[2+1])
              Pexp_ident "x" (//toplevel//[2+0]..[2+1])
          <arg>
          Nolabel
            expression (//toplevel//[2+5]..[2+6])
              Pexp_constant PConst_int (4,None)
        ]
  ]

- : int = 8
Ptop_def
  [
    structure_item (//toplevel//[1+0]..[1+12])
      Pstr_eval
      expression (//toplevel//[1+0]..[1+12])
        Pexp_apply
        expression (//toplevel//[1+0]..[1+12]) ghost
          Pexp_ident ".%.{}<-" (//toplevel//[1+0]..[1+12]) ghost
        [
          <arg>
          Nolabel
            expression (//toplevel//[1+0]..[1+1])
              Pexp_ident "x" (//toplevel//[1+0]..[1+1])
          <arg>
          Nolabel
            expression (//toplevel//[1+5]..[1+6])
              Pexp_constant PConst_int (4,None)
          <arg>
          Nolabel
            expression (//toplevel//[1+11]..[1+12])
              Pexp_constant PConst_int (4,None)
        ]
  ]

- : int = 12
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[2+7])
      Pstr_eval
      expression (//toplevel//[2+0]..[2+7])
        Pexp_apply
        expression (//toplevel//[2+0]..[2+7]) ghost
          Pexp_ident ".%.[]" (//toplevel//[2+0]..[2+7]) ghost
        [
          <arg>
          Nolabel
            expression (//toplevel//[2+0]..[2+1])
              Pexp_ident "x" (//toplevel//[2+0]..[2+1])
          <arg>
          Nolabel
            expression (//toplevel//[2+5]..[2+6])
              Pexp_constant PConst_int (4,None)
        ]
  ]

- : int = 8
Ptop_def
  [
    structure_item (//toplevel//[1+0]..[1+12])
      Pstr_eval
      expression (//toplevel//[1+0]..[1+12])
        Pexp_apply
        expression (//toplevel//[1+0]..[1+12]) ghost
          Pexp_ident ".%.[]<-" (//toplevel//[1+0]..[1+12]) ghost
        [
          <arg>
          Nolabel
            expression (//toplevel//[1+0]..[1+1])
              Pexp_ident "x" (//toplevel//[1+0]..[1+1])
          <arg>
          Nolabel
            expression (//toplevel//[1+5]..[1+6])
              Pexp_constant PConst_int (4,None)
          <arg>
          Nolabel
            expression (//toplevel//[1+11]..[1+12])
              Pexp_constant PConst_int (4,None)
        ]
  ]

- : int = 12
Ptop_def
  [
    structure_item (//toplevel//[4+0]..[4+37])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[4+4]..[4+5])
            Ppat_var "f" (//toplevel//[4+4]..[4+5])
          expression (//toplevel//[4+8]..[4+37])
            Pexp_function
            []
            None
            Pfunction_cases (//toplevel//[4+8]..[4+37])
              [
                <case>
                  pattern (//toplevel//[4+17]..[4+31])
                    Ppat_constraint
                    pattern (//toplevel//[4+25]..[4+26])
                      Ppat_unpack "M" (//toplevel//[4+25]..[4+26])
                    core_type (//toplevel//[4+29]..[4+30])
                      Ptyp_package "S" (//toplevel//[4+29]..[4+30])
                      []
                  expression (//toplevel//[4+35]..[4+37])
                    Pexp_construct "()" (//toplevel//[4+35]..[4+37])
                    None
              ]
      ]
  ]

val f : (module S) -> unit = <fun>
Ptop_def
  [
    structure_item (//toplevel//[4+0]..[6+12])
      Pstr_class
      [
        class_declaration (//toplevel//[4+0]..[6+12])
          pci_virt = Concrete
          pci_params =
            []
          pci_name = "c" (//toplevel//[4+6]..[4+7])
          pci_expr =
            class_expr (//toplevel//[5+2]..[6+12])
              Pcl_open Fresh "M" (//toplevel//[5+11]..[5+12])
              class_expr (//toplevel//[6+2]..[6+12])
                Pcl_structure
                class_structure
                  pattern (//toplevel//[6+8]..[6+8]) ghost
                    Ppat_any
                  []
      ]
  ]

class c : object  end
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[4+12])
      Pstr_class_type
      [
        class_type_declaration (//toplevel//[2+0]..[4+12])
          pci_virt = Concrete
          pci_params =
            []
          pci_name = "ct" (//toplevel//[2+11]..[2+13])
          pci_expr =
            class_type (//toplevel//[3+2]..[4+12])
              Pcty_open Fresh "M" (//toplevel//[3+11]..[3+12])
              class_type (//toplevel//[4+2]..[4+12])
                Pcty_signature
                class_signature
                  core_type (//toplevel//[4+8]..[4+8])
                    Ptyp_any
                  []
      ]
  ]

class type ct = object  end
Ptop_def
  [
    structure_item (//toplevel//[5+0]..[6+4])
      Pstr_value Nonrec
      [
        <def>
            attribute "ocaml.doc"
              [
                structure_item (//toplevel//[4+0]..[4+36])
                  Pstr_eval
                  expression (//toplevel//[4+0]..[4+36])
                    Pexp_constant PConst_string(" Some docstring attached to x. ",(//toplevel//[4+0]..[4+36]),None)
              ]
            attribute "ocaml.doc"
              [
                structure_item (//toplevel//[7+0]..[7+39])
                  Pstr_eval
                  expression (//toplevel//[7+0]..[7+39])
                    Pexp_constant PConst_string(" Another docstring attached to x. ",(//toplevel//[7+0]..[7+39]),None)
              ]
          pattern (//toplevel//[5+4]..[5+5])
            Ppat_var "x" (//toplevel//[5+4]..[5+5])
          expression (//toplevel//[6+2]..[6+4])
            Pexp_constant PConst_int (42,None)
      ]
  ]

val x : int = 42
Ptop_def
  [
    structure_item (//toplevel//[3+0]..[3+31])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[3+4]..[3+5])
            Ppat_var "x" (//toplevel//[3+4]..[3+5])
          expression (//toplevel//[3+8]..[3+31])
            Pexp_object
            class_structure
              pattern (//toplevel//[3+14]..[3+14]) ghost
                Ppat_any
              [
                class_field (//toplevel//[3+15]..[3+27])
                  Pcf_method Public
                    "f" (//toplevel//[3+22]..[3+23])
                    Concrete Fresh
                    expression (//toplevel//[3+26]..[3+27]) ghost
                      Pexp_poly
                      expression (//toplevel//[3+26]..[3+27])
                        Pexp_constant PConst_int (1,None)
                      None
              ]
      ]
  ]

val x : < f : int > = <obj>
Ptop_def
  [
    structure_item (//toplevel//[1+0]..[1+35])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[1+4]..[1+5])
            Ppat_var "x" (//toplevel//[1+4]..[1+5])
          expression (//toplevel//[1+8]..[1+35])
            Pexp_send "f"
            expression (//toplevel//[1+8]..[1+31])
              Pexp_object
              class_structure
                pattern (//toplevel//[1+14]..[1+14]) ghost
                  Ppat_any
                [
                  class_field (//toplevel//[1+15]..[1+27])
                    Pcf_method Public
                      "f" (//toplevel//[1+22]..[1+23])
                      Concrete Fresh
                      expression (//toplevel//[1+26]..[1+27]) ghost
                        Pexp_poly
                        expression (//toplevel//[1+26]..[1+27])
                          Pexp_constant PConst_int (1,None)
                        None
                ]
      ]
  ]

val x : int = 1
Ptop_def
  [
    structure_item (//toplevel//[1+0]..[1+36])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[1+4]..[1+5])
            Ppat_var "x" (//toplevel//[1+4]..[1+5])
          expression (//toplevel//[1+8]..[1+36])
            Pexp_construct "Some" (//toplevel//[1+8]..[1+12])
            Some
              expression (//toplevel//[1+13]..[1+36])
                Pexp_object
                class_structure
                  pattern (//toplevel//[1+19]..[1+19]) ghost
                    Ppat_any
                  [
                    class_field (//toplevel//[1+20]..[1+32])
                      Pcf_method Public
                        "f" (//toplevel//[1+27]..[1+28])
                        Concrete Fresh
                        expression (//toplevel//[1+31]..[1+32]) ghost
                          Pexp_poly
                          expression (//toplevel//[1+31]..[1+32])
                            Pexp_constant PConst_int (1,None)
                          None
                  ]
      ]
  ]

val x : < f : int > option = Some <obj>
Ptop_def
  [
    structure_item (//toplevel//[1+0]..[1+40])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[1+4]..[1+5])
            Ppat_var "x" (//toplevel//[1+4]..[1+5])
          expression (//toplevel//[1+8]..[1+40])
            Pexp_construct "Some" (//toplevel//[1+8]..[1+12])
            Some
              expression (//toplevel//[1+13]..[1+40])
                Pexp_send "f"
                expression (//toplevel//[1+13]..[1+36])
                  Pexp_object
                  class_structure
                    pattern (//toplevel//[1+19]..[1+19]) ghost
                      Ppat_any
                    [
                      class_field (//toplevel//[1+20]..[1+32])
                        Pcf_method Public
                          "f" (//toplevel//[1+27]..[1+28])
                          Concrete Fresh
                          expression (//toplevel//[1+31]..[1+32]) ghost
                            Pexp_poly
                            expression (//toplevel//[1+31]..[1+32])
                              Pexp_constant PConst_int (1,None)
                            None
                    ]
      ]
  ]

val x : int option = Some 1
Ptop_def
  [
    structure_item (//toplevel//[2+0]..[5+12])
      Pstr_eval
      expression (//toplevel//[2+0]..[5+12])
        Pexp_let Nonrec
        [
          <def>
            pattern (//toplevel//[2+4]..[2+5])
              Ppat_var "f" (//toplevel//[2+4]..[2+5])
            expression (//toplevel//[2+6]..[2+15]) ghost
              Pexp_function
              [
                Pparam_val (//toplevel//[2+6]..[2+7])
                  Nolabel
                  None
                  pattern (//toplevel//[2+6]..[2+7])
                    Ppat_var "x" (//toplevel//[2+6]..[2+7])
                Pparam_val (//toplevel//[2+8]..[2+9])
                  Nolabel
                  None
                  pattern (//toplevel//[2+8]..[2+9])
                    Ppat_var "y" (//toplevel//[2+8]..[2+9])
                Pparam_val (//toplevel//[2+10]..[2+11])
                  Nolabel
                  None
                  pattern (//toplevel//[2+10]..[2+11])
                    Ppat_var "z" (//toplevel//[2+10]..[2+11])
              ]
              None
              Pfunction_body
                expression (//toplevel//[2+14]..[2+15])
                  Pexp_ident "x" (//toplevel//[2+14]..[2+15])
        ]
        expression (//toplevel//[3+0]..[5+12])
          Pexp_apply
          expression (//toplevel//[3+0]..[3+1])
            Pexp_ident "f" (//toplevel//[3+0]..[3+1])
          [
            <arg>
            Nolabel
              expression (//toplevel//[3+2]..[3+25])
                Pexp_object
                class_structure
                  pattern (//toplevel//[3+8]..[3+8]) ghost
                    Ppat_any
                  [
                    class_field (//toplevel//[3+9]..[3+21])
                      Pcf_method Public
                        "f" (//toplevel//[3+16]..[3+17])
                        Concrete Fresh
                        expression (//toplevel//[3+20]..[3+21]) ghost
                          Pexp_poly
                          expression (//toplevel//[3+20]..[3+21])
                            Pexp_constant PConst_int (1,None)
                          None
                  ]
            <arg>
            Nolabel
              expression (//toplevel//[4+2]..[4+29])
                Pexp_send "f"
                expression (//toplevel//[4+2]..[4+25])
                  Pexp_object
                  class_structure
                    pattern (//toplevel//[4+8]..[4+8]) ghost
                      Ppat_any
                    [
                      class_field (//toplevel//[4+9]..[4+21])
                        Pcf_method Public
                          "f" (//toplevel//[4+16]..[4+17])
                          Concrete Fresh
                          expression (//toplevel//[4+20]..[4+21]) ghost
                            Pexp_poly
                            expression (//toplevel//[4+20]..[4+21])
                              Pexp_constant PConst_int (1,None)
                            None
                    ]
            <arg>
            Nolabel
              expression (//toplevel//[5+2]..[5+12])
                Pexp_object
                class_structure
                  pattern (//toplevel//[5+8]..[5+8]) ghost
                    Ppat_any
                  []
          ]
  ]

- : < f : int > = <obj>
Ptop_def
  [
    structure_item (//toplevel//[3+0]..[5+12])
      Pstr_value Nonrec
      [
        <def>
          pattern (//toplevel//[3+4]..[3+5])
            Ppat_var "g" (//toplevel//[3+4]..[3+5])
          expression (//toplevel//[3+6]..[5+12]) ghost
            Pexp_function
            [
              Pparam_val (//toplevel//[3+6]..[3+7])
                Nolabel
                None
                pattern (//toplevel//[3+6]..[3+7])
                  Ppat_var "y" (//toplevel//[3+6]..[3+7])
            ]
            None
            Pfunction_body
              expression (//toplevel//[4+2]..[5+12])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (//toplevel//[4+6]..[4+7])
                      Ppat_var "f" (//toplevel//[4+6]..[4+7])
                    expression (//toplevel//[4+8]..[4+18]) ghost
                      Pexp_function
                      [
                        Pparam_val (//toplevel//[4+8]..[4+10])
                          Labelled "y"
                          None
                          pattern (//toplevel//[4+9]..[4+10])
                            Ppat_var "y" (//toplevel//[4+9]..[4+10])
                      ]
                      None
                      Pfunction_body
                        expression (//toplevel//[4+13]..[4+18])
                          Pexp_apply
                          expression (//toplevel//[4+15]..[4+16])
                            Pexp_ident "+" (//toplevel//[4+15]..[4+16])
                          [
                            <arg>
                            Nolabel
                              expression (//toplevel//[4+13]..[4+14])
                                Pexp_ident "y" (//toplevel//[4+13]..[4+14])
                            <arg>
                            Nolabel
                              expression (//toplevel//[4+17]..[4+18])
                                Pexp_constant PConst_int (1,None)
                          ]
                ]
                expression (//toplevel//[5+2]..[5+12])
                  Pexp_apply
                  expression (//toplevel//[5+2]..[5+3])
                    Pexp_ident "f" (//toplevel//[5+2]..[5+3])
                  [
                    <arg>
                    Labelled "y"
                      expression (//toplevel//[5+5]..[5+12])
                        Pexp_constraint
                        expression (//toplevel//[5+6]..[5+7])
                          Pexp_ident "y" (//toplevel//[5+6]..[5+7])
                        core_type (//toplevel//[5+8]..[5+11])
                          Ptyp_constr "int" (//toplevel//[5+8]..[5+11])
                          []
                  ]
      ]
  ]

val g : int -> int = <fun>

