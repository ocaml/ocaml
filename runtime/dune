;**************************************************************************
;*                                                                        *
;*                                 OCaml                                  *
;*                                                                        *
;*                     Thomas Refis, Jane Street Europe                   *
;*                                                                        *
;*   Copyright 2018 Jane Street Group LLC                                 *
;*                                                                        *
;*   All rights reserved.  This file is distributed under the terms of    *
;*   the GNU Lesser General Public License version 2.1, with the          *
;*   special exception on linking described in the file LICENSE.          *
;*                                                                        *
;**************************************************************************

(rule
 (targets primitives)
 (mode    fallback)
 (deps
   ; Keep in sync with gen_primitives.sh
   alloc.c array.c compare.c extern.c floats.c gc_ctrl.c hash.c intern.c
     interp.c ints.c io.c
   lexing.c md5.c meta.c memprof.c obj.c parsing.c signals.c str.c sys.c
     callback.c weak.c
   finalise.c domain.c platform.c fiber.c memory.c startup_aux.c
     runtime_events.c sync.c
   dynlink.c backtrace_byt.c backtrace.c afl.c
   bigarray.c prng.c)
 (action
   (with-stdout-to %{targets}
                   (run %{dep:gen_primitives.sh} "RUNNING_FROM_RUNTIME_DIR"))))

(rule
 (targets libcamlrun.a)
 (mode    fallback)
 (deps
   ../Makefile.config
   ../Makefile.build_config
   ../Makefile.config_if_required
   ../Makefile.common Makefile
   (glob_files caml/*.h)
   ; Keep in sync Makefile/BYTECODE_C_SOURCES
   addrmap.c afl.c alloc.c array.c backtrace.c bigarray.c callback.c codefrag.c
   compare.c custom.c debugger.c domain.c dynlink.c extern.c fiber.c finalise.c
   floats.c gc_ctrl.c gc_stats.c globroots.c hash.c intern.c ints.c io.c
   lexing.c lf_skiplist.c main.c major_gc.c md5.c memory.c memprof.c meta.c
   minor_gc.c misc.c obj.c parsing.c platform.c printexc.c prng.c roots.c
   runtime_events.c shared_heap.c signals.c skiplist.c startup_aux.c str.c
   sync.c sys.c unix.c ; or win32
   weak.c backtrace_byt.c fail_byt.c fix_code.c interp.c startup_byt.c)
 (action
   (progn
     (bash "touch .depend") ; hack.
     (run make %{targets} COMPUTE_DEPS=false)
     (bash "rm .depend"))))

;; HACK
(library
  (name runtime)
  (modes byte)
  (wrapped false)
  (modules runtime)
  (flags (-nostdlib -nopervasives))
  (library_flags -cclib "-I runtime")
  (self_build_stubs_archive (runtime)))

(rule
  (targets libruntime_stubs.a)
  (action (copy libcamlrun.a %{targets})))

(rule
  (targets runtime.ml)
  (action (write-file %{targets} "let linkme = ()")))
