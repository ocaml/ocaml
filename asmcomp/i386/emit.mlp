#2 "asmcomp/i386/emit.mlp"
(**************************************************************************)
(*                                                                        *)
(*                                 OCaml                                  *)
(*                                                                        *)
(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)
(*                                                                        *)
(*   Copyright 1996 Institut National de Recherche en Informatique et     *)
(*     en Automatique.                                                    *)
(*                                                                        *)
(*   All rights reserved.  This file is distributed under the terms of    *)
(*   the GNU Lesser General Public License version 2.1, with the          *)
(*   special exception on linking described in the file LICENSE.          *)
(*                                                                        *)
(**************************************************************************)

(* Emission of Intel 386 assembly code *)

[@@@ocaml.warning "-40"]

open Misc
open Cmm
open Arch
open Proc
open Reg
open Mach
open Linearize
open Emitaux

open X86_ast
open X86_dsl

module D = Asm_directives
module L = Linkage_name
module LR = Linkage_name.With_reloc
module TS = Target_system

let mem_sym_or_label typ ?(ofs = 0) sym =
  mem32 typ ~scale:0 ?base:None ~sym ofs RAX (*ignored since scale=0*)

let mem_sym typ ?ofs sym =
  mem_sym_or_label typ ?ofs (L.to_string sym)

let mem_label typ ?ofs lbl =
  mem_sym_or_label typ ?ofs (D.string_of_label lbl)

let stack_offset = ref 0

(* Layout of the stack frame *)

let frame_size () =                     (* includes return address *)
  let sz =
    !stack_offset + 4 * num_stack_slots.(0) + 8 * num_stack_slots.(1) + 4
  in Misc.align sz stack_alignment

let slot_offset loc cl =
  match loc with
  | Incoming n ->
      assert (n >= 0);
      frame_size() + n
  | Local n ->
      if cl = 0
      then !stack_offset + n * 4
      else !stack_offset + num_stack_slots.(0) * 4 + n * 8
  | Outgoing n ->
      assert (n >= 0);
      n

let record_frame = record_frame ~frame_size ~slot_offset
let record_frame_label = record_frame_label ~frame_size ~slot_offset
let bound_error_label = bound_error_label ~frame_size ~slot_offset

let trap_frame_size = Misc.align 8 stack_alignment

let sym s = X86_ast.Named_thing (LR.to_string s)
let immsym s = X86_ast.Named_thing ("$" ^ (LR.to_string s))

let emit_call s = I.call (sym (LR.no_reloc s))

(* Labels *)

let def_label l = D.define_label l

let emit_Llabel fallthrough lbl =
  if not fallthrough && !fastcode_flag then D.align ~bytes:16;
  def_label lbl

let label lbl =
  X86_dsl.sym (D.string_of_label lbl)

let emit_jump_to_label lbl =
  I.jmp (label lbl)

(* Output a pseudo-register *)

let int_reg_name =  [| RAX; RBX; RCX; RDX; RSI; RDI; RBP  |]

let float_reg_name = [| TOS |]

let register_name r =
  if r < 100 then Reg32 (int_reg_name.(r))
  else Regf (float_reg_name.(r - 100))

let sym32 ?ofs s = mem_sym ?ofs DWORD s

let reg = function
  | { loc = Reg r } -> register_name r
  | { loc = Stack(Incoming n | Outgoing n) } when n < 0 ->
      sym32 L.caml_extra_params ~ofs:(n + 64)
  | { loc = Stack s; typ = Float } as r ->
      let ofs = slot_offset s (register_class r) in
      mem32 REAL8 ofs RSP
  | { loc = Stack s } as r ->
      let ofs = slot_offset s (register_class r) in
      mem32 DWORD ofs RSP
  | { loc = Unknown } ->
      fatal_error "Emit_i386.reg"

(* Output a reference to the lower 8 bits or lower 16 bits of a register *)

let reg_low_8_name  = Array.map (fun r -> Reg8L r) int_reg_name
let reg_low_16_name = Array.map (fun r -> Reg16 r) int_reg_name

let reg8 r =
  match r.loc with
  | Reg r when r < 4 -> reg_low_8_name.(r)
  | _ -> fatal_error "Emit_i386.reg8"

let reg16 r =
  match r.loc with
  | Reg r when r < 7 -> reg_low_16_name.(r)
  | _ -> fatal_error "Emit_i386.reg16"

let reg32 = function
  | { loc = Reg.Reg r } -> int_reg_name.(r)
  | _ -> assert false

let arg32 i n = reg32 i.arg.(n)

(* Output an addressing mode *)

let addressing addr typ i n =
  match addr with
  | Ibased(s, ofs) ->
      add_used_symbol s;
      mem_sym typ s ~ofs
  | Iindexed d ->
      mem32 typ d (arg32 i n)
  | Iindexed2 d ->
      mem32 typ ~base:(arg32 i n) d (arg32 i (n+1))
  | Iscaled(2, d) ->
      mem32 typ ~base:(arg32 i n) d (arg32 i n)
  | Iscaled(scale, d) ->
      mem32 typ ~scale d (arg32 i n)
  | Iindexed2scaled(scale, d) ->
      mem32 typ ~scale ~base:(arg32 i n) d (arg32 i (n+1))

(* Names for instructions *)

let instr_for_intop = function
  | Iadd -> I.add
  | Isub -> I.sub
  | Imul -> (fun arg1 arg2 ->  I.imul arg1 (Some arg2))
  | Iand -> I.and_
  | Ior -> I.or_
  | Ixor -> I.xor
  | Ilsl -> I.sal
  | Ilsr -> I.shr
  | Iasr -> I.sar
  | _ -> fatal_error "Emit_i386: instr_for_intop"

let unary_instr_for_floatop = function
  | Inegf -> I.fchs ()
  | Iabsf -> I.fabs ()
  | _ -> fatal_error "Emit_i386: unary_instr_for_floatop"

let instr_for_floatop = function
  | Iaddf -> I.fadd
  | Isubf -> I.fsub
  | Imulf -> I.fmul
  | Idivf -> I.fdiv
  | Ispecific Isubfrev -> I.fsubr
  | Ispecific Idivfrev -> I.fdivr
  | _ -> fatal_error "Emit_i386: instr_for_floatop"

let instr_for_floatop_reversed = function
  | Iaddf -> I.fadd
  | Isubf -> I.fsubr
  | Imulf -> I.fmul
  | Idivf -> I.fdivr
  | Ispecific Isubfrev -> I.fsub
  | Ispecific Idivfrev -> I.fdiv
  | _ -> fatal_error "Emit_i386: instr_for_floatop_reversed"


let instr_for_floatop_reversed_pop = function
  | Iaddf -> I.faddp
  | Isubf -> I.fsubrp
  | Imulf -> I.fmulp
  | Idivf -> I.fdivrp
  | Ispecific Isubfrev -> I.fsubp
  | Ispecific Idivfrev -> I.fdivp
  | _ -> fatal_error "Emit_i386: instr_for_floatop_reversed_pop"

let instr_for_floatarithmem = function
  | Ifloatadd -> I.fadd
  | Ifloatsub -> I.fsub
  | Ifloatsubrev -> I.fsubr
  | Ifloatmul -> I.fmul
  | Ifloatdiv -> I.fdiv
  | Ifloatdivrev -> I.fdivr

let cond = function
  | Isigned Ceq   -> E   | Isigned Cne   -> NE
  | Isigned Cle   -> LE  | Isigned Cgt   -> G
  | Isigned Clt   -> L   | Isigned Cge   -> GE
  | Iunsigned Ceq -> E   | Iunsigned Cne -> NE
  | Iunsigned Cle -> BE  | Iunsigned Cgt -> A
  | Iunsigned Clt -> B   | Iunsigned Cge -> AE

(* Output an = 0 or <> 0 test. *)

let output_test_zero arg =
  match arg.loc with
  | Reg.Reg _ -> I.test (reg arg) (reg arg)
  | _  -> I.cmp (int 0) (reg arg)

(* Deallocate the stack frame before a return or tail call *)

let output_epilogue f =
  let n = frame_size() - 4 in
  if n > 0 then
    begin
      I.add (int n) esp;
      D.cfi_adjust_cfa_offset ~bytes:(-n);
      f ();
      (* reset CFA back cause function body may continue *)
      D.cfi_adjust_cfa_offset ~bytes:n
    end
  else
    f ()

(* Determine if the given register is the top of the floating-point stack *)

let is_tos = function { loc = Reg _; typ = Float } -> true | _ -> false

(* Emit the code for a floating-point comparison *)

let emit_float_test cmp neg arg lbl =
  let actual_cmp =
    match (is_tos arg.(0), is_tos arg.(1)) with
    | (true, true) ->
        (* both args on top of FP stack *)
        I.fcompp ();
        cmp
    | (true, false) ->
        (* first arg on top of FP stack *)
        I.fcomp (reg arg.(1));
        cmp
    | (false, true) ->
        (* second arg on top of FP stack *)
        I.fcomp (reg arg.(0));
        Cmm.swap_comparison cmp
    | (false, false) ->
        I.fld     (reg arg.(0));
        I.fcomp   (reg arg.(1));
        cmp
  in
  I.fnstsw ax;
  match actual_cmp with
  | Ceq ->
      if neg then begin
        I.and_ (int 68) ah;
        I.xor (int 64) ah;
        I.jne lbl
      end else begin
        I.and_ (int 69) ah;
        I.cmp (int 64) ah;
        I.je lbl
      end
  | Cne ->
      if neg then begin
        I.and_ (int 69) ah;
        I.cmp (int 64) ah;
        I.je lbl
      end else begin
        I.and_ (int 68) ah;
        I.xor (int 64) ah;
        I.jne lbl
      end
  | Cle ->
      I.and_ (int 69) ah;
      I.dec ah;
      I.cmp (int 64) ah;
      if neg
      then I.jae lbl
      else I.jb lbl
  | Cge ->
      I.and_ (int 5) ah;
      if neg
      then I.jne lbl
      else I.je lbl
  | Clt ->
      I.and_ (int 69) ah;
      I.cmp (int 1) ah;
      if neg
      then I.jne lbl
      else I.je lbl
  | Cgt ->
      I.and_ (int 69) ah;
      if neg
      then I.jne lbl
      else I.je lbl

(* Emit a Ifloatspecial instruction *)

let emit_floatspecial sym =
  match L.name sym with
  | "atan"  -> I.fld1 (); I.fpatan ()
  | "atan2" -> I.fpatan ()
  | "cos"   -> I.fcos ()
  | "log"   -> I.fldln2 (); I.fxch st1; I.fyl2x ()
  | "log10" -> I.fldlg2 (); I.fxch st1; I.fyl2x ()
  | "sin"   -> I.fsin ()
  | "sqrt"  -> I.fsqrt ()
  | "tan"   -> I.fptan (); I.fstp st0
  | _ -> assert false

(* Record references to external C functions (for Darwin) *)

let external_symbols_direct = ref L.Set.empty
let external_symbols_indirect = ref L.Set.empty

(* Spacetime (not supported on 32-bit platforms) *)

let spacetime_before_uninstrumented_call _label = ()

(* Output the assembly code for an instruction *)

let emit_instr fallthrough i =
  emit_debug_info i.dbg;
  match i.desc with
  | Lend -> ()
  | Lop(Imove | Ispill | Ireload) ->
      let src = i.arg.(0) and dst = i.res.(0) in
      if src.loc <> dst.loc then begin
        if src.typ = Float then
          if is_tos src then
            I.fstp (reg dst)
          else if is_tos dst then
            I.fld (reg src)
          else begin
            I.fld (reg src);
            I.fstp (reg dst)
          end
        else
          I.mov (reg src) (reg dst)
      end
  | Lop(Iconst_int n) ->
      if Targetint.is_zero n then begin
        match i.res.(0).loc with
        | Reg _ -> I.xor (reg i.res.(0)) (reg i.res.(0))
        | _     -> I.mov (int 0) (reg i.res.(0))
      end else
        I.mov (targetint n) (reg i.res.(0))
  | Lop(Iconst_float f) ->
      begin match f with
      | 0x0000_0000_0000_0000L ->       (* +0.0 *)
          I.fldz ()
      | 0x8000_0000_0000_0000L ->       (* -0.0 *)
          I.fldz (); I.fchs ()
      | 0x3FF0_0000_0000_0000L ->       (*  1.0 *)
          I.fld1 ()
      | 0xBFF0_0000_0000_0000L ->       (* -1.0 *)
          I.fld1 (); I.fchs ()
      | _ ->
          let lbl = float_constant f in
          I.fld (mem_label REAL8 lbl)
      end
  | Lop(Iconst_symbol s) ->
      add_used_symbol s;
      I.mov (immsym (LR.no_reloc s)) (reg i.res.(0))
  | Lop(Icall_ind { label_after; }) ->
      I.call (reg i.arg.(0));
      record_frame ~live:i.live ~raise_:false i.dbg ~label:label_after
  | Lop(Icall_imm { func; label_after; }) ->
      add_used_symbol func;
      emit_call func;
      record_frame ~live:i.live ~raise_:false i.dbg ~label:label_after
  | Lop(Itailcall_ind { label_after = _; }) ->
      output_epilogue begin fun () ->
        I.jmp (reg i.arg.(0))
      end
  | Lop(Itailcall_imm { func; label_after = _; }) ->
      if func = !function_name then
        I.jmp (label !tailrec_entry_point)
      else begin
        output_epilogue begin fun () ->
          add_used_symbol func;
          I.jmp (sym (LR.no_reloc func))
        end
      end
  | Lop(Iextcall { func; alloc; label_after; }) ->
      add_used_symbol func;
      if alloc then begin
        if not (TS.macos_like ()) then
          I.mov (immsym (LR.no_reloc func)) eax
        else begin
          external_symbols_indirect :=
            L.Set.add func !external_symbols_indirect;
          I.mov (mem_sym DWORD (L.i386_non_lazy_ptr func)) eax
        end;
        emit_call L.caml_c_call;
        record_frame ~live:i.live ~raise_:false i.dbg ~label:label_after
      end else begin
        if not (TS.macos_like ()) then
          emit_call func
        else begin
          external_symbols_direct := L.Set.add func !external_symbols_direct;
          I.call (sym (LR.no_reloc (L.i386_stub func)))
        end
      end
  | Lop(Istackoffset n) ->
      if n < 0
      then I.add (int (-n)) esp
      else I.sub (int n) esp;
      D.cfi_adjust_cfa_offset ~bytes:n;
      stack_offset := !stack_offset + n
  | Lop(Iload(chunk, addr)) ->
      let dest = i.res.(0) in
      begin match chunk with
      | Word_int | Word_val | Thirtytwo_signed | Thirtytwo_unsigned ->
          I.mov (addressing addr DWORD i 0) (reg dest)
      | Byte_unsigned ->
          I.movzx (addressing addr BYTE i 0) (reg dest)
      | Byte_signed ->
          I.movsx (addressing addr BYTE i 0) (reg dest)
      | Sixteen_unsigned ->
          I.movzx (addressing addr WORD i 0) (reg dest)
      | Sixteen_signed ->
          I.movsx (addressing addr WORD i 0) (reg dest)
      | Single ->
          I.fld (addressing addr REAL4 i 0)
      | Double | Double_u ->
          I.fld (addressing addr REAL8 i 0)
      end
  | Lop(Istore(chunk, addr, _)) ->
      begin match chunk with
      | Word_int | Word_val | Thirtytwo_signed | Thirtytwo_unsigned ->
          I.mov (reg i.arg.(0)) (addressing addr DWORD i 1)
      | Byte_unsigned | Byte_signed ->
          I.mov (reg8 i.arg.(0)) (addressing addr BYTE i 1)
      | Sixteen_unsigned | Sixteen_signed ->
          I.mov (reg16 i.arg.(0)) (addressing addr WORD i 1)
      | Single ->
          if is_tos i.arg.(0) then
            I.fstp (addressing addr REAL4 i 1)
          else begin
            I.fld (reg i.arg.(0));
            I.fstp (addressing addr REAL4 i 1)
          end
      | Double | Double_u ->
          if is_tos i.arg.(0) then
            I.fstp (addressing addr REAL8 i 1)
          else begin
            I.fld (reg i.arg.(0));
            I.fstp (addressing addr REAL8 i 1)
          end
      end
  | Lop(Ialloc { words = n; label_after_call_gc; }) ->
      if !fastcode_flag then begin
        let lbl_redo = new_label() in
        def_label lbl_redo;
        I.mov (sym32 L.caml_young_ptr) eax;
        I.sub (int n) eax;
        I.mov eax (sym32 L.caml_young_ptr);
        I.cmp (sym32 L.caml_young_limit) eax;
        let lbl_call_gc = new_label() in
        let lbl_frame =
          record_frame_label ~live:i.live ~raise_:false Debuginfo.none
        in
        I.jb (label lbl_call_gc);
        I.lea (mem32 NONE 4 RAX) (reg i.res.(0));
        record_call_gc_site ~label:lbl_call_gc
          ~return_label:lbl_redo
          ~frame_label:lbl_frame
          ~stack_offset:!stack_offset
      end else begin
        begin match n with
          8  -> emit_call L.caml_alloc1
        | 12 -> emit_call L.caml_alloc2
        | 16 -> emit_call L.caml_alloc3
        | _  ->
            I.mov (int n) eax;
            emit_call L.caml_allocN
        end;
        let label =
          record_frame_label ?label:label_after_call_gc ~live:i.live
            ~raise_:false Debuginfo.none
        in
        def_label label;
        I.lea (mem32 NONE 4 RAX) (reg i.res.(0))
      end
  | Lop(Iintop(Icomp cmp)) ->
      I.cmp (reg i.arg.(1)) (reg i.arg.(0));
      I.set (cond cmp) al;
      I.movzx al (reg i.res.(0));
  | Lop(Iintop_imm(Icomp cmp, n)) ->
      I.cmp (int n) (reg i.arg.(0));
      I.set (cond cmp) al;
      I.movzx al (reg i.res.(0))
  | Lop(Iintop (Icheckbound { label_after_error; } )) ->
      let lbl =
        bound_error_label ?label:label_after_error i.dbg
          ~stack_offset:!stack_offset
      in
      I.cmp (reg i.arg.(1)) (reg i.arg.(0));
      I.jbe (label lbl)
  | Lop(Iintop_imm(Icheckbound { label_after_error; }, n)) ->
      let lbl =
        bound_error_label ?label:label_after_error i.dbg
          ~stack_offset:!stack_offset
      in
      I.cmp (int n) (reg i.arg.(0));
      I.jbe (label lbl)
  | Lop(Iintop(Idiv | Imod)) ->
      I.cdq ();
      I.idiv (reg i.arg.(1))
  | Lop(Iintop(Ilsl | Ilsr | Iasr as op)) ->
      (* We have i.arg.(0) = i.res.(0) and i.arg.(1) = %ecx *)
      instr_for_intop op cl (reg i.res.(0))
  | Lop(Iintop Imulh) ->
      I.imul (reg i.arg.(1)) None
  | Lop(Iintop op) ->
      (* We have i.arg.(0) = i.res.(0) *)
      instr_for_intop op (reg i.arg.(1)) (reg i.res.(0))
  | Lop(Iintop_imm(Iadd, n)) when i.arg.(0).loc <> i.res.(0).loc ->
      I.lea (mem32 NONE n (reg32 i.arg.(0))) (reg i.res.(0))
  | Lop(Iintop_imm(Iadd, 1) | Iintop_imm(Isub, -1)) ->
      I.inc (reg i.res.(0))
  | Lop(Iintop_imm(Iadd, -1) | Iintop_imm(Isub, 1)) ->
      I.dec (reg i.res.(0))
  | Lop(Iintop_imm(op, n)) ->
      (* We have i.arg.(0) = i.res.(0) *)
      instr_for_intop op (int n) (reg i.res.(0))
  | Lop(Inegf | Iabsf as floatop) ->
      if not (is_tos i.arg.(0)) then
        I.fld (reg i.arg.(0));
      unary_instr_for_floatop floatop
  | Lop(Iaddf | Isubf | Imulf | Idivf | Ispecific(Isubfrev | Idivfrev)
        as floatop) ->
      begin match (is_tos i.arg.(0), is_tos i.arg.(1)) with
        (true, true) ->
          (* both operands on top of FP stack *)
          instr_for_floatop_reversed_pop floatop st0 st1
      | (true, false) ->
          (* first operand on stack *)
          instr_for_floatop floatop (reg i.arg.(1))
      | (false, true) ->
          (* second operand on stack *)
          instr_for_floatop_reversed floatop (reg i.arg.(0))
      | (false, false) ->
          (* both operands in memory *)
          I.fld (reg i.arg.(0));
          instr_for_floatop floatop (reg i.arg.(1))
      end
  | Lop(Ifloatofint) ->
      begin match i.arg.(0).loc with
      | Stack _ ->
          I.fild (reg i.arg.(0))
      | _ ->
          I.push (reg i.arg.(0));
          I.fild (mem32 DWORD 0 RSP);
          I.add (int 4) esp
      end
  | Lop(Iintoffloat) ->
      if not (is_tos i.arg.(0)) then
        I.fld (reg i.arg.(0));
      stack_offset := !stack_offset - 8;
      I.sub (int 8) esp;
      D.cfi_adjust_cfa_offset ~bytes:8;
      I.fnstcw (mem32 NONE 4 RSP);
      I.mov (mem32 WORD 4 RSP) ax;
      I.mov (int 12) ah;
      I.mov ax (mem32 WORD 0 RSP);
      I.fldcw (mem32 NONE 0 RSP);
      begin match i.res.(0).loc with
      | Stack _ ->
          I.fistp (reg i.res.(0))
      | _ ->
          I.fistp (mem32 DWORD 0 RSP);
          I.mov (mem32 DWORD 0 RSP) (reg i.res.(0))
      end;
      I.fldcw (mem32 NONE 4 RSP);
      I.add (int 8) esp;
      D.cfi_adjust_cfa_offset ~bytes:(-8);
      stack_offset := !stack_offset + 8
  | Lop(Ispecific(Ilea addr)) ->
      I.lea (addressing addr DWORD i 0) (reg i.res.(0))
  | Lop(Ispecific(Istore_int(n, addr, _))) ->
      I.mov (nat n) (addressing addr DWORD i 0)
  | Lop(Ispecific(Istore_symbol(s, addr, _))) ->
      add_used_symbol s;
      I.mov (immsym (LR.no_reloc s)) (addressing addr DWORD i 0)
  | Lop(Ispecific(Ioffset_loc(n, addr))) ->
      I.add (int n) (addressing addr DWORD i 0)
  | Lop(Ispecific(Ipush)) ->
      (* Push arguments in reverse order *)
      for n = Array.length i.arg - 1 downto 0 do
        let r = i.arg.(n) in
        match r with
          {loc = Reg _; typ = Float} ->
            I.sub (int 8) esp;
            D.cfi_adjust_cfa_offset ~bytes:8;
            I.fstp (mem32 REAL8 0 RSP);
            stack_offset := !stack_offset + 8
        | {loc = Stack sl; typ = Float} ->
            let ofs = slot_offset sl 1 in
            (* Use x87 stack to move from stack to stack,
               instead of two 32-bit push instructions,
               which could kill performance on modern CPUs (see #6979).
            *)
            I.fld (mem32 REAL8 ofs RSP);
            I.sub (int 8) esp;
            D.cfi_adjust_cfa_offset ~bytes:8;
            I.fstp (mem32 REAL8 0 RSP);
            stack_offset := !stack_offset + 8
        | _ ->
            I.push (reg r);
            D.cfi_adjust_cfa_offset ~bytes:4;
            stack_offset := !stack_offset + 4
      done
  | Lop(Ispecific(Ipush_int n)) ->
      I.push (nat n);
      D.cfi_adjust_cfa_offset ~bytes:4;
      stack_offset := !stack_offset + 4
  | Lop(Ispecific(Ipush_symbol s)) ->
      add_used_symbol s;
      I.push (immsym (LR.no_reloc s));
      D.cfi_adjust_cfa_offset ~bytes:4;
      stack_offset := !stack_offset + 4
  | Lop(Ispecific(Ipush_load addr)) ->
      I.push (addressing addr DWORD i 0);
      D.cfi_adjust_cfa_offset ~bytes:4;
      stack_offset := !stack_offset + 4
  | Lop(Ispecific(Ipush_load_float addr)) ->
      I.push (addressing (offset_addressing addr 4) DWORD i 0);
      I.push (addressing addr DWORD i 0);
      D.cfi_adjust_cfa_offset ~bytes:8;
      stack_offset := !stack_offset + 8
  | Lop(Ispecific(Ifloatarithmem(double, op, addr))) ->
      if not (is_tos i.arg.(0)) then
        I.fld (reg i.arg.(0));
      instr_for_floatarithmem op
          (addressing addr
             (if double then REAL8 else REAL4) i 1)
  | Lop(Ispecific(Ifloatspecial s)) ->
      (* Push args on float stack if necessary *)
      for k = 0 to Array.length i.arg - 1 do
        if not (is_tos i.arg.(k)) then I.fld (reg i.arg.(k))
      done;
      (* Fix-up for binary instrs whose args were swapped *)
      if Array.length i.arg = 2 && is_tos i.arg.(1) then
        I.fxch st1;
      emit_floatspecial s
  | Lreloadretaddr ->
      ()
  | Lreturn ->
      output_epilogue begin fun () ->
        I.ret ()
      end
  | Llabel lbl ->
      emit_Llabel fallthrough lbl
  | Lbranch lbl ->
      I.jmp (label lbl)
  | Lcondbranch(tst, lbl) ->
      let lbl = label lbl in
      begin match tst with
      | Itruetest ->
          output_test_zero i.arg.(0);
          I.jne lbl;
      | Ifalsetest ->
          output_test_zero i.arg.(0);
          I.je lbl
      | Iinttest cmp ->
          I.cmp (reg i.arg.(1)) (reg i.arg.(0));
          I.j (cond cmp) lbl
      | Iinttest_imm((Isigned Ceq | Isigned Cne |
                      Iunsigned Ceq | Iunsigned Cne) as cmp, 0) ->
          output_test_zero i.arg.(0);
          I.j (cond cmp) lbl
      | Iinttest_imm(cmp, n) ->
          I.cmp (int n) (reg i.arg.(0));
          I.j (cond cmp) lbl
      | Ifloattest(cmp, neg) ->
          emit_float_test cmp neg i.arg lbl
      | Ioddtest ->
          I.test (int 1) (reg i.arg.(0));
          I.jne lbl
      | Ieventest ->
          I.test (int 1) (reg i.arg.(0));
          I.je lbl
      end
  | Lcondbranch3(lbl0, lbl1, lbl2) ->
      I.cmp (int 1) (reg i.arg.(0));
      begin match lbl0 with
        None -> ()
      | Some lbl -> I.jb (label lbl)
      end;
      begin match lbl1 with
        None -> ()
      | Some lbl -> I.je (label lbl)
      end;
      begin match lbl2 with
        None -> ()
      | Some lbl -> I.jg (label lbl)
      end
  | Lswitch jumptbl ->
      let lbl = new_label() in
      I.jmp (mem32 NONE 0 (reg32 i.arg.(0)) ~scale:4
        ~sym:(D.string_of_label lbl));
      D.switch_to_section Data;
      D.define_label lbl;
      for i = 0 to Array.length jumptbl - 1 do
        D.label jumptbl.(i)
      done;
      D.switch_to_section Text
  | Lsetuptrap lbl ->
      I.call (label lbl)
  | Lpushtrap ->
      if trap_frame_size > 8 then
        I.sub (int (trap_frame_size - 8)) esp;
      I.push (sym32 L.caml_exception_pointer);
      D.cfi_adjust_cfa_offset ~bytes:trap_frame_size;
      I.mov esp (sym32 L.caml_exception_pointer);
      stack_offset := !stack_offset + trap_frame_size
  | Lpoptrap ->
      I.pop (sym32 L.caml_exception_pointer);
      I.add (int (trap_frame_size - 4)) esp;
      D.cfi_adjust_cfa_offset ~bytes:(-trap_frame_size);
      stack_offset := !stack_offset - trap_frame_size
  | Lraise k  ->
      begin match k with
      | Cmm.Raise_withtrace ->
          emit_call L.caml_raise_exn;
          record_frame ~live:Reg.Set.empty ~raise_:true i.dbg
      | Cmm.Raise_notrace ->
          I.mov (sym32 L.caml_exception_pointer) esp;
          I.pop (sym32 L.caml_exception_pointer);
          if trap_frame_size > 8 then
            I.add (int (trap_frame_size - 8)) esp;
          I.ret ()
      end

let emit_all ~fun_body =
  let rec emit_all fallthrough i =
    match i.desc with
    |  Lend -> ()
    | _ ->
        emit_instr fallthrough i;
        emit_all
          (TS.win32 () || Linearize.has_fallthrough i.desc)
          i.next
  in
  emit_all true fun_body;
  frame_size () - 4

(* Emission of external symbol references (for Darwin) *)

let mcount_stub = L.i386_stub L.mcount

let emit_external_symbol_direct s =
  (* CR mshinwell: Are these stub and non_lazy_ptr things supposed to be
     function or object symbols? *)
  D.define_data_symbol (L.i386_stub s);
  D.indirect_symbol s;
  I.hlt (); I.hlt (); I.hlt (); I.hlt () ; I.hlt ()

let emit_external_symbol_indirect s =
  D.define_data_symbol (L.i386_non_lazy_ptr s);
  D.indirect_symbol s;
  D.int32 0l

let emit_external_symbols () =
  D.switch_to_section (IA32 Non_lazy_symbol_pointers);
  L.Set.iter emit_external_symbol_indirect !external_symbols_indirect;
  external_symbols_indirect := L.Set.empty;
  D.switch_to_section (IA32 Jump_table);
  L.Set.iter emit_external_symbol_direct !external_symbols_direct;
  external_symbols_direct := L.Set.empty;
  if !Clflags.gprofile then begin
    D.define_data_symbol mcount_stub;
    D.indirect_symbol L.mcount;
    I.hlt (); I.hlt (); I.hlt () ; I.hlt () ; I.hlt ()
  end

(* Emission of the profiling prelude *)

let call_mcount mcount =
  I.push eax;
  I.mov esp ebp;
  I.push ecx;
  I.push edx;
  I.call (sym (LR.no_reloc mcount));
  I.pop edx;
  I.pop ecx;
  I.pop eax

let emit_profile () =
  match TS.system () with
  | Linux _ | GNU | FreeBSD | NetBSD | OpenBSD | Other_BSD ->
    call_mcount L.mcount
  | MacOS_like -> call_mcount mcount_stub
  | _ -> () (*unsupported yet*)

(* Emission of a function declaration *)

let prepare_for_fundecl _fundecl =
  stack_offset := 0;
  if !Clflags.gprofile then emit_profile();
  let n = frame_size() - 4 in
  if n > 0 then  begin
    I.sub (int n) esp;
    D.cfi_adjust_cfa_offset ~bytes:n;
  end

let fundecl decl =
  Emitaux.fundecl decl
    ~prepare:prepare_for_fundecl
    ~emit_all
    ~emit_call
    ~emit_jump_to_label
    ~spacetime_before_uninstrumented_call
    ~alignment_in_bytes:(if TS.win32 () then 4 else 16)
    ~emit_numeric_constants:false

(* Beginning / end of an assembly file *)

let begin_assembly() =
  X86_proc.reset_asm_code ();
  Asm_directives.initialize ~emit:(fun directive ->
    X86_proc.directive (Directive directive));
  Emitaux.begin_assembly ();
  if TS.win32 () then begin
    let extrn sym width = X86_dsl.D.extrn (L.to_string sym) width in
    X86_dsl.D.mode386 ();
    X86_dsl.D.model "FLAT";
    extrn L.caml_young_ptr DWORD;
    extrn L.caml_young_limit DWORD;
    extrn L.caml_exception_pointer DWORD;
    extrn L.caml_extra_params DWORD;
    extrn L.caml_call_gc PROC;
    extrn L.caml_c_call PROC;
    extrn L.caml_allocN PROC;
    extrn L.caml_alloc1 PROC;
    extrn L.caml_alloc2 PROC;
    extrn L.caml_alloc3 PROC;
    extrn L.caml_ml_array_bound_error PROC;
    extrn L.caml_raise_exn PROC;
  end;
  D.switch_to_section Text;
  if TS.macos_like () then begin
    (* suppress "ld warning: atom sorting error" *)
    I.nop ()
  end

let end_assembly() =
  D.switch_to_section Text;
  if TS.macos_like () then begin
    (* suppress "ld warning: atom sorting error" *)
    I.nop ()
  end;
  Emitaux.end_assembly ~emit_numeric_constants:true ();
  if TS.macos_like () then emit_external_symbols ();
  if TS.win32 () then begin
    D.comment "External functions";
    L.Set.iter (fun s ->
        if not (L.Set.mem s (symbols_defined ())) then
          X86_dsl.D.extrn (L.to_string s) PROC)
      (symbols_used ())
  end;
  let asm =
    match !Emitaux.create_asm_file, TS.assembler () with
    | true, MASM -> Some (X86_masm.generate_asm !output_channel)
    | true, (MacOS | GAS_like) -> Some (X86_gas.generate_asm !output_channel)
    | false, _ -> None
  in
  X86_proc.generate_code asm
