
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20180703

module MenhirBasics = struct
  
  exception Error = Parsing.Parse_error
  
  type token = 
    | WITH
    | WHILE
    | WHEN
    | VIRTUAL
    | VAL
    | UNDERSCORE
    | UIDENT of (
# 625 "parsing/parser.mly"
       (string)
# 22 "parsing/parser.ml"
  )
    | TYPE
    | TRY
    | TRUE
    | TO
    | TILDE
    | THEN
    | STRUCT
    | STRING of (
# 617 "parsing/parser.mly"
       (string * string option)
# 34 "parsing/parser.ml"
  )
    | STAR
    | SIG
    | SEMISEMI
    | SEMI
    | RPAREN
    | REC
    | RBRACKET
    | RBRACE
    | QUOTE
    | QUESTION
    | PRIVATE
    | PREFIXOP of (
# 603 "parsing/parser.mly"
       (string)
# 50 "parsing/parser.ml"
  )
    | PLUSEQ
    | PLUSDOT
    | PLUS
    | PERCENT
    | OR
    | OPTLABEL of (
# 596 "parsing/parser.mly"
       (string)
# 60 "parsing/parser.ml"
  )
    | OPEN
    | OF
    | OBJECT
    | NONREC
    | NEW
    | MUTABLE
    | MODULE
    | MINUSGREATER
    | MINUSDOT
    | MINUS
    | METHOD
    | MATCH
    | LPAREN
    | LIDENT of (
# 579 "parsing/parser.mly"
       (string)
# 78 "parsing/parser.ml"
  )
    | LET
    | LESSMINUS
    | LESS
    | LBRACKETPERCENTPERCENT
    | LBRACKETPERCENT
    | LBRACKETLESS
    | LBRACKETGREATER
    | LBRACKETBAR
    | LBRACKETATATAT
    | LBRACKETATAT
    | LBRACKETAT
    | LBRACKET
    | LBRACELESS
    | LBRACE
    | LAZY
    | LABEL of (
# 566 "parsing/parser.mly"
       (string)
# 98 "parsing/parser.ml"
  )
    | INT of (
# 565 "parsing/parser.mly"
       (string * char option)
# 103 "parsing/parser.ml"
  )
    | INITIALIZER
    | INHERIT
    | INFIXOP4 of (
# 561 "parsing/parser.mly"
       (string)
# 110 "parsing/parser.ml"
  )
    | INFIXOP3 of (
# 560 "parsing/parser.mly"
       (string)
# 115 "parsing/parser.ml"
  )
    | INFIXOP2 of (
# 559 "parsing/parser.mly"
       (string)
# 120 "parsing/parser.ml"
  )
    | INFIXOP1 of (
# 558 "parsing/parser.mly"
       (string)
# 125 "parsing/parser.ml"
  )
    | INFIXOP0 of (
# 557 "parsing/parser.mly"
       (string)
# 130 "parsing/parser.ml"
  )
    | INCLUDE
    | IN
    | IF
    | HASHOP of (
# 614 "parsing/parser.mly"
       (string)
# 138 "parsing/parser.ml"
  )
    | HASH
    | GREATERRBRACKET
    | GREATERRBRACE
    | GREATER
    | FUNCTOR
    | FUNCTION
    | FUN
    | FOR
    | FLOAT of (
# 546 "parsing/parser.mly"
       (string * char option)
# 151 "parsing/parser.ml"
  )
    | FALSE
    | EXTERNAL
    | EXCEPTION
    | EQUAL
    | EOL
    | EOF
    | END
    | ELSE
    | DOWNTO
    | DOTOP of (
# 562 "parsing/parser.mly"
       (string)
# 165 "parsing/parser.ml"
  )
    | DOTDOT
    | DOT
    | DONE
    | DOCSTRING of (
# 633 "parsing/parser.mly"
       (Docstrings.docstring)
# 173 "parsing/parser.ml"
  )
    | DO
    | CONSTRAINT
    | COMMENT of (
# 632 "parsing/parser.mly"
       (string * Location.t)
# 180 "parsing/parser.ml"
  )
    | COMMA
    | COLONGREATER
    | COLONEQUAL
    | COLONCOLON
    | COLON
    | CLASS
    | CHAR of (
# 526 "parsing/parser.mly"
       (char)
# 191 "parsing/parser.ml"
  )
    | BEGIN
    | BARRBRACKET
    | BARBAR
    | BAR
    | BANG
    | BACKQUOTE
    | ASSERT
    | AS
    | AND
    | AMPERSAND
    | AMPERAMPER
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 18 "parsing/parser.mly"
  
module Pervasives = Stdlib
(* In 4.08+dev, 'Pervasives' is deprecated in favor of Stdlib. We need
   to disable the deprecation warning not because of any OCaml code
   below, but because Menhir generates code using Pervasives (in the
   interpretation of $symbolstartpos). Yes, this is ugly, but right now
   we don't see an easier way.  *)

open Asttypes
open Longident
open Parsetree
open Ast_helper
open Docstrings
open Docstrings.WithMenhir

let mkloc = Location.mkloc
let mknoloc = Location.mknoloc

let make_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = false;
}

let ghost_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = true;
}

let mktyp ~loc d = Typ.mk ~loc:(make_loc loc) d
let mkpat ~loc d = Pat.mk ~loc:(make_loc loc) d
let mkexp ~loc d = Exp.mk ~loc:(make_loc loc) d
let mkmty ~loc ?attrs d = Mty.mk ~loc:(make_loc loc) ?attrs d
let mksig ~loc d = Sig.mk ~loc:(make_loc loc) d
let mkmod ~loc ?attrs d = Mod.mk ~loc:(make_loc loc) ?attrs d
let mkstr ~loc d = Str.mk ~loc:(make_loc loc) d
let mkclass ~loc ?attrs d = Cl.mk ~loc:(make_loc loc) ?attrs d
let mkcty ~loc ?attrs d = Cty.mk ~loc:(make_loc loc) ?attrs d

let mkctf ~loc ?attrs ?docs d =
  Ctf.mk ~loc:(make_loc loc) ?attrs ?docs d
let mkcf ~loc ?attrs ?docs d =
  Cf.mk ~loc:(make_loc loc) ?attrs ?docs d

let mkrhs rhs loc = mkloc rhs (make_loc loc)
let ghrhs rhs loc = mkloc rhs (ghost_loc loc)

let push_loc x acc =
  if x.Location.loc_ghost
  then acc
  else x :: acc

let reloc_pat ~loc x =
  { x with ppat_loc = make_loc loc;
           ppat_loc_stack = push_loc x.ppat_loc x.ppat_loc_stack };;
let reloc_exp ~loc x =
  { x with pexp_loc = make_loc loc;
           pexp_loc_stack = push_loc x.pexp_loc x.pexp_loc_stack };;
let reloc_typ ~loc x =
  { x with ptyp_loc = make_loc loc;
           ptyp_loc_stack = push_loc x.ptyp_loc x.ptyp_loc_stack };;

let mkoperator ~loc name =
  mkexp ~loc (Pexp_ident(mkrhs (Lident name) loc))

let mkpatvar ~loc name =
  mkpat ~loc (Ppat_var (mkrhs name loc))

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp ~loc d = Exp.mk ~loc:(ghost_loc loc) d
let ghpat ~loc d = Pat.mk ~loc:(ghost_loc loc) d
let ghtyp ~loc d = Typ.mk ~loc:(ghost_loc loc) d
let ghloc ~loc d = { txt = d; loc = ghost_loc loc }
let ghstr ~loc d = Str.mk ~loc:(ghost_loc loc) d
let ghsig ~loc d = Sig.mk ~loc:(ghost_loc loc) d

let mkinfix arg1 op arg2 =
  Pexp_apply(op, [Nolabel, arg1; Nolabel, arg2])

let neg_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus ~oploc name arg =
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Pconst_integer (n,m)) ->
      Pexp_constant(Pconst_integer(neg_string n,m))
  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
      Pexp_constant(Pconst_float(neg_string f, m))
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])

let mkuplus ~oploc name arg =
  let desc = arg.pexp_desc in
  match name, desc with
  | "+", Pexp_constant(Pconst_integer _)
  | ("+" | "+."), Pexp_constant(Pconst_float _) -> desc
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])

(* TODO define an abstraction boundary between locations-as-pairs
   and locations-as-Location.t; it should be clear when we move from
   one world to the other *)

let mkexp_cons_desc consloc args =
  Pexp_construct(mkrhs (Lident "::") consloc, Some args)
let mkexp_cons ~loc consloc args =
  mkexp ~loc (mkexp_cons_desc consloc args)

let mkpat_cons_desc consloc args =
  Ppat_construct(mkrhs (Lident "::") consloc, Some args)
let mkpat_cons ~loc consloc args =
  mkpat ~loc (mkpat_cons_desc consloc args)

let ghexp_cons_desc consloc args =
  Pexp_construct(ghrhs (Lident "::") consloc, Some args)
let ghpat_cons_desc consloc args =
  Ppat_construct(ghrhs (Lident "::") consloc, Some args)

let rec mktailexp nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Pexp_construct (nil, None), nilloc
  | e1 :: el ->
      let exp_el, el_loc = mktailexp nilloc el in
      let loc = (e1.pexp_loc.loc_start, snd el_loc) in
      let arg = ghexp ~loc (Pexp_tuple [e1; ghexp ~loc:el_loc exp_el]) in
      ghexp_cons_desc loc arg, loc

let rec mktailpat nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Ppat_construct (nil, None), nilloc
  | p1 :: pl ->
      let pat_pl, el_loc = mktailpat nilloc pl in
      let loc = (p1.ppat_loc.loc_start, snd el_loc) in
      let arg = ghpat ~loc (Ppat_tuple [p1; ghpat ~loc:el_loc pat_pl]) in
      ghpat_cons_desc loc arg, loc

let mkstrexp e attrs =
  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc;
    pstr_private = false }

let mkexp_constraint ~loc e (t1, t2) =
  match t1, t2 with
  | Some t, None -> ghexp ~loc (Pexp_constraint(e, t))
  | _, Some t -> ghexp ~loc (Pexp_coerce(e, t1, t))
  | None, None -> assert false

let mkexp_opt_constraint ~loc e = function
  | None -> e
  | Some constraint_ -> mkexp_constraint ~loc e constraint_

let mkpat_opt_constraint ~loc p = function
  | None -> p
  | Some typ -> mkpat ~loc (Ppat_constraint(p, typ))

let syntax_error () =
  raise Syntaxerr.Escape_error

let unclosed opening_name opening_loc closing_name closing_loc =
  raise(Syntaxerr.Error(Syntaxerr.Unclosed(make_loc opening_loc, opening_name,
                                           make_loc closing_loc, closing_name)))

let expecting loc nonterm =
    raise Syntaxerr.(Error(Expecting(make_loc loc, nonterm)))

let not_expecting loc nonterm =
    raise Syntaxerr.(Error(Not_expecting(make_loc loc, nonterm)))

let dotop_fun ~loc dotop =
  (* We could use ghexp here, but sticking to mkexp for parser.mly
     compatibility. TODO improve parser.mly *)
  mkexp ~loc (Pexp_ident (ghloc ~loc dotop))

let array_function ~loc str name =
  ghloc ~loc (Ldot(Lident str,
                   (if !Clflags.unsafe then "unsafe_" ^ name else name)))

let array_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "get"))
let string_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "get"))

let array_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "set"))
let string_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "set"))

let index_get ~loc get_fun array index =
  let args = [Nolabel, array; Nolabel, index] in
   mkexp ~loc (Pexp_apply(get_fun, args))

let index_set ~loc set_fun array index value =
  let args = [Nolabel, array; Nolabel, index; Nolabel, value] in
   mkexp ~loc (Pexp_apply(set_fun, args))

let array_get ~loc = index_get ~loc (array_get_fun ~loc)
let string_get ~loc = index_get ~loc (string_get_fun ~loc)
let dotop_get ~loc dotop = index_get ~loc (dotop_fun ~loc dotop)

let array_set ~loc = index_set ~loc (array_set_fun ~loc)
let string_set ~loc = index_set ~loc (string_set_fun ~loc)
let dotop_set ~loc dotop = index_set ~loc (dotop_fun ~loc dotop)

let bigarray_function ~loc str name =
  ghloc ~loc (Ldot(Ldot(Lident "Bigarray", str), name))

let bigarray_untuplify = function
    { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
  | exp -> [exp]

let bigarray_get ~loc arr arg =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let get = if !Clflags.unsafe then "unsafe_get" else "get" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" get)),
                       [Nolabel, arr; Nolabel, c1]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2; Nolabel, c3]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
                       [Nolabel, arr; Nolabel, ghexp(Pexp_array coords)]))

let bigarray_set ~loc arr arg newval =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let set = if !Clflags.unsafe then "unsafe_set" else "set" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" set)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, newval]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, newval]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, c3; Nolabel, newval]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
                       [Nolabel, arr;
                        Nolabel, ghexp(Pexp_array coords);
                        Nolabel, newval]))

let lapply ~loc p1 p2 =
  if !Clflags.applicative_functors
  then Lapply(p1, p2)
  else raise (Syntaxerr.Error(
                  Syntaxerr.Applicative_path (make_loc loc)))

let exp_of_longident ~loc lid =
  mkexp ~loc (Pexp_ident {lid with txt = Lident(Longident.last lid.txt)})

let exp_of_label ~loc lbl =
  mkexp ~loc (Pexp_ident lbl)

let pat_of_label ~loc lbl =
  mkpat ~loc (Ppat_var lbl)

let mk_newtypes ~loc newtypes exp =
  let mkexp = mkexp ~loc in
  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
    newtypes exp

let wrap_type_annotation ~loc newtypes core_type body =
  let mkexp, ghtyp = mkexp ~loc, ghtyp ~loc in
  let mk_newtypes = mk_newtypes ~loc in
  let exp = mkexp(Pexp_constraint(body,core_type)) in
  let exp = mk_newtypes newtypes exp in
  (exp, ghtyp(Ptyp_poly(newtypes, Typ.varify_constructors newtypes core_type)))

let wrap_exp_attrs ~loc body (ext, attrs) =
  let ghexp = ghexp ~loc in
  (* todo: keep exact location for the entire attribute *)
  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
  match ext with
  | None -> body
  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))

let mkexp_attrs ~loc d attrs =
  wrap_exp_attrs ~loc (mkexp ~loc d) attrs

let wrap_typ_attrs ~loc typ (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
  match ext with
  | None -> typ
  | Some id -> ghtyp ~loc (Ptyp_extension (id, PTyp typ))

let wrap_pat_attrs ~loc pat (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
  match ext with
  | None -> pat
  | Some id -> ghpat ~loc (Ppat_extension (id, PPat (pat, None)))

let mkpat_attrs ~loc d attrs =
  wrap_pat_attrs ~loc (mkpat ~loc d) attrs

let wrap_class_attrs ~loc:_ body attrs =
  {body with pcl_attributes = attrs @ body.pcl_attributes}
let wrap_mod_attrs ~loc:_ body attrs =
  {body with pmod_attributes = attrs @ body.pmod_attributes}
let wrap_mty_attrs ~loc:_ body attrs =
  {body with pmty_attributes = attrs @ body.pmty_attributes}

let wrap_str_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [body]), []))

let wrap_sig_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [body]), []))

let text_str pos = Str.text (rhs_text pos)
let text_sig pos = Sig.text (rhs_text pos)
let text_cstr pos = Cf.text (rhs_text pos)
let text_csig pos = Ctf.text (rhs_text pos)
let text_def pos = [Ptop_def (Str.text (rhs_text pos))]

let extra_text startpos endpos text items =
  match items with
  | [] ->
      let post = rhs_post_text endpos in
      let post_extras = rhs_post_extra_text endpos in
      text post @ text post_extras
  | _ :: _ ->
      let pre_extras = rhs_pre_extra_text startpos in
      let post_extras = rhs_post_extra_text endpos in
        text pre_extras @ items @ text post_extras

let extra_str p1 p2 items = extra_text p1 p2 Str.text items
let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items
let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items
let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text  items
let extra_def p1 p2 items =
  extra_text p1 p2 (fun txt -> [Ptop_def (Str.text txt)]) items

let extra_rhs_core_type ct ~pos =
  let docs = rhs_info pos in
  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }

type let_binding =
  { lb_pattern: pattern;
    lb_expression: expression;
    lb_attributes: attributes;
    lb_docs: docs Lazy.t;
    lb_text: text Lazy.t;
    lb_loc: Location.t; }

type let_bindings =
  { lbs_bindings: let_binding list;
    lbs_rec: rec_flag;
    lbs_extension: string Asttypes.loc option;
    lbs_loc: Location.t }

let mklb first ~loc (p, e) attrs =
  {
    lb_pattern = p;
    lb_expression = e;
    lb_attributes = attrs;
    lb_docs = symbol_docs_lazy loc;
    lb_text = (if first then empty_text_lazy
               else symbol_text_lazy (fst loc));
    lb_loc = make_loc loc;
  }

let mklbs ~loc ext rf lb =
  {
    lbs_bindings = [lb];
    lbs_rec = rf;
    lbs_extension = ext ;
    lbs_loc = make_loc loc;
  }

let addlb lbs lb =
  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }

let val_of_let_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
      (lbs.lbs_extension, [])

let class_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    if lbs.lbs_extension <> None then
      raise Syntaxerr.(Error(Not_expecting(lbs.lbs_loc, "extension")));
    mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))

(* Alternatively, we could keep the generic module type in the Parsetree
   and extract the package type during type-checking. In that case,
   the assertions below should be turned into explicit checks. *)
let package_type_of_module_type pmty =
  let err loc s =
    raise (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
  in
  let map_cstr = function
    | Pwith_type (lid, ptyp) ->
        let loc = ptyp.ptype_loc in
        if ptyp.ptype_params <> [] then
          err loc "parametrized types are not supported";
        if ptyp.ptype_cstrs <> [] then
          err loc "constrained types are not supported";
        if ptyp.ptype_private <> Public then
          err loc "private types are not supported";

        (* restrictions below are checked by the 'with_constraint' rule *)
        assert (ptyp.ptype_kind = Ptype_abstract);
        assert (ptyp.ptype_attributes = []);
        let ty =
          match ptyp.ptype_manifest with
          | Some ty -> ty
          | None -> assert false
        in
        (lid, ty)
    | _ ->
        err pmty.pmty_loc "only 'with type t =' constraints are supported"
  in
  match pmty with
  | {pmty_desc = Pmty_ident lid} -> (lid, [])
  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
      (lid, List.map map_cstr cstrs)
  | _ ->
      err pmty.pmty_loc
        "only module type identifier and 'with type' constraints are supported"

let mk_directive_arg ~loc k =
  { pdira_desc = k;
    pdira_loc = make_loc loc;
  }

let mk_directive ~loc name arg =
  Ptop_dir {
      pdir_name = name;
      pdir_arg = arg;
      pdir_loc = make_loc loc;
    }


# 707 "parsing/parser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          119
      | AMPERSAND ->
          118
      | AND ->
          117
      | AS ->
          116
      | ASSERT ->
          115
      | BACKQUOTE ->
          114
      | BANG ->
          113
      | BAR ->
          112
      | BARBAR ->
          111
      | BARRBRACKET ->
          110
      | BEGIN ->
          109
      | CHAR _ ->
          108
      | CLASS ->
          107
      | COLON ->
          106
      | COLONCOLON ->
          105
      | COLONEQUAL ->
          104
      | COLONGREATER ->
          103
      | COMMA ->
          102
      | COMMENT _ ->
          101
      | CONSTRAINT ->
          100
      | DO ->
          99
      | DOCSTRING _ ->
          98
      | DONE ->
          97
      | DOT ->
          96
      | DOTDOT ->
          95
      | DOTOP _ ->
          94
      | DOWNTO ->
          93
      | ELSE ->
          92
      | END ->
          91
      | EOF ->
          90
      | EOL ->
          89
      | EQUAL ->
          88
      | EXCEPTION ->
          87
      | EXTERNAL ->
          86
      | FALSE ->
          85
      | FLOAT _ ->
          84
      | FOR ->
          83
      | FUN ->
          82
      | FUNCTION ->
          81
      | FUNCTOR ->
          80
      | GREATER ->
          79
      | GREATERRBRACE ->
          78
      | GREATERRBRACKET ->
          77
      | HASH ->
          76
      | HASHOP _ ->
          75
      | IF ->
          74
      | IN ->
          73
      | INCLUDE ->
          72
      | INFIXOP0 _ ->
          71
      | INFIXOP1 _ ->
          70
      | INFIXOP2 _ ->
          69
      | INFIXOP3 _ ->
          68
      | INFIXOP4 _ ->
          67
      | INHERIT ->
          66
      | INITIALIZER ->
          65
      | INT _ ->
          64
      | LABEL _ ->
          63
      | LAZY ->
          62
      | LBRACE ->
          61
      | LBRACELESS ->
          60
      | LBRACKET ->
          59
      | LBRACKETAT ->
          58
      | LBRACKETATAT ->
          57
      | LBRACKETATATAT ->
          56
      | LBRACKETBAR ->
          55
      | LBRACKETGREATER ->
          54
      | LBRACKETLESS ->
          53
      | LBRACKETPERCENT ->
          52
      | LBRACKETPERCENTPERCENT ->
          51
      | LESS ->
          50
      | LESSMINUS ->
          49
      | LET ->
          48
      | LIDENT _ ->
          47
      | LPAREN ->
          46
      | MATCH ->
          45
      | METHOD ->
          44
      | MINUS ->
          43
      | MINUSDOT ->
          42
      | MINUSGREATER ->
          41
      | MODULE ->
          40
      | MUTABLE ->
          39
      | NEW ->
          38
      | NONREC ->
          37
      | OBJECT ->
          36
      | OF ->
          35
      | OPEN ->
          34
      | OPTLABEL _ ->
          33
      | OR ->
          32
      | PERCENT ->
          31
      | PLUS ->
          30
      | PLUSDOT ->
          29
      | PLUSEQ ->
          28
      | PREFIXOP _ ->
          27
      | PRIVATE ->
          26
      | QUESTION ->
          25
      | QUOTE ->
          24
      | RBRACE ->
          23
      | RBRACKET ->
          22
      | REC ->
          21
      | RPAREN ->
          20
      | SEMI ->
          19
      | SEMISEMI ->
          18
      | SIG ->
          17
      | STAR ->
          16
      | STRING _ ->
          15
      | STRUCT ->
          14
      | THEN ->
          13
      | TILDE ->
          12
      | TO ->
          11
      | TRUE ->
          10
      | TRY ->
          9
      | TYPE ->
          8
      | UIDENT _ ->
          7
      | UNDERSCORE ->
          6
      | VAL ->
          5
      | VIRTUAL ->
          4
      | WHEN ->
          3
      | WHILE ->
          2
      | WITH ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          Obj.repr ()
      | AMPERSAND ->
          Obj.repr ()
      | AND ->
          Obj.repr ()
      | AS ->
          Obj.repr ()
      | ASSERT ->
          Obj.repr ()
      | BACKQUOTE ->
          Obj.repr ()
      | BANG ->
          Obj.repr ()
      | BAR ->
          Obj.repr ()
      | BARBAR ->
          Obj.repr ()
      | BARRBRACKET ->
          Obj.repr ()
      | BEGIN ->
          Obj.repr ()
      | CHAR _v ->
          Obj.repr _v
      | CLASS ->
          Obj.repr ()
      | COLON ->
          Obj.repr ()
      | COLONCOLON ->
          Obj.repr ()
      | COLONEQUAL ->
          Obj.repr ()
      | COLONGREATER ->
          Obj.repr ()
      | COMMA ->
          Obj.repr ()
      | COMMENT _v ->
          Obj.repr _v
      | CONSTRAINT ->
          Obj.repr ()
      | DO ->
          Obj.repr ()
      | DOCSTRING _v ->
          Obj.repr _v
      | DONE ->
          Obj.repr ()
      | DOT ->
          Obj.repr ()
      | DOTDOT ->
          Obj.repr ()
      | DOTOP _v ->
          Obj.repr _v
      | DOWNTO ->
          Obj.repr ()
      | ELSE ->
          Obj.repr ()
      | END ->
          Obj.repr ()
      | EOF ->
          Obj.repr ()
      | EOL ->
          Obj.repr ()
      | EQUAL ->
          Obj.repr ()
      | EXCEPTION ->
          Obj.repr ()
      | EXTERNAL ->
          Obj.repr ()
      | FALSE ->
          Obj.repr ()
      | FLOAT _v ->
          Obj.repr _v
      | FOR ->
          Obj.repr ()
      | FUN ->
          Obj.repr ()
      | FUNCTION ->
          Obj.repr ()
      | FUNCTOR ->
          Obj.repr ()
      | GREATER ->
          Obj.repr ()
      | GREATERRBRACE ->
          Obj.repr ()
      | GREATERRBRACKET ->
          Obj.repr ()
      | HASH ->
          Obj.repr ()
      | HASHOP _v ->
          Obj.repr _v
      | IF ->
          Obj.repr ()
      | IN ->
          Obj.repr ()
      | INCLUDE ->
          Obj.repr ()
      | INFIXOP0 _v ->
          Obj.repr _v
      | INFIXOP1 _v ->
          Obj.repr _v
      | INFIXOP2 _v ->
          Obj.repr _v
      | INFIXOP3 _v ->
          Obj.repr _v
      | INFIXOP4 _v ->
          Obj.repr _v
      | INHERIT ->
          Obj.repr ()
      | INITIALIZER ->
          Obj.repr ()
      | INT _v ->
          Obj.repr _v
      | LABEL _v ->
          Obj.repr _v
      | LAZY ->
          Obj.repr ()
      | LBRACE ->
          Obj.repr ()
      | LBRACELESS ->
          Obj.repr ()
      | LBRACKET ->
          Obj.repr ()
      | LBRACKETAT ->
          Obj.repr ()
      | LBRACKETATAT ->
          Obj.repr ()
      | LBRACKETATATAT ->
          Obj.repr ()
      | LBRACKETBAR ->
          Obj.repr ()
      | LBRACKETGREATER ->
          Obj.repr ()
      | LBRACKETLESS ->
          Obj.repr ()
      | LBRACKETPERCENT ->
          Obj.repr ()
      | LBRACKETPERCENTPERCENT ->
          Obj.repr ()
      | LESS ->
          Obj.repr ()
      | LESSMINUS ->
          Obj.repr ()
      | LET ->
          Obj.repr ()
      | LIDENT _v ->
          Obj.repr _v
      | LPAREN ->
          Obj.repr ()
      | MATCH ->
          Obj.repr ()
      | METHOD ->
          Obj.repr ()
      | MINUS ->
          Obj.repr ()
      | MINUSDOT ->
          Obj.repr ()
      | MINUSGREATER ->
          Obj.repr ()
      | MODULE ->
          Obj.repr ()
      | MUTABLE ->
          Obj.repr ()
      | NEW ->
          Obj.repr ()
      | NONREC ->
          Obj.repr ()
      | OBJECT ->
          Obj.repr ()
      | OF ->
          Obj.repr ()
      | OPEN ->
          Obj.repr ()
      | OPTLABEL _v ->
          Obj.repr _v
      | OR ->
          Obj.repr ()
      | PERCENT ->
          Obj.repr ()
      | PLUS ->
          Obj.repr ()
      | PLUSDOT ->
          Obj.repr ()
      | PLUSEQ ->
          Obj.repr ()
      | PREFIXOP _v ->
          Obj.repr _v
      | PRIVATE ->
          Obj.repr ()
      | QUESTION ->
          Obj.repr ()
      | QUOTE ->
          Obj.repr ()
      | RBRACE ->
          Obj.repr ()
      | RBRACKET ->
          Obj.repr ()
      | REC ->
          Obj.repr ()
      | RPAREN ->
          Obj.repr ()
      | SEMI ->
          Obj.repr ()
      | SEMISEMI ->
          Obj.repr ()
      | SIG ->
          Obj.repr ()
      | STAR ->
          Obj.repr ()
      | STRING _v ->
          Obj.repr _v
      | STRUCT ->
          Obj.repr ()
      | THEN ->
          Obj.repr ()
      | TILDE ->
          Obj.repr ()
      | TO ->
          Obj.repr ()
      | TRUE ->
          Obj.repr ()
      | TRY ->
          Obj.repr ()
      | TYPE ->
          Obj.repr ()
      | UIDENT _v ->
          Obj.repr _v
      | UNDERSCORE ->
          Obj.repr ()
      | VAL ->
          Obj.repr ()
      | VIRTUAL ->
          Obj.repr ()
      | WHEN ->
          Obj.repr ()
      | WHILE ->
          Obj.repr ()
      | WITH ->
          Obj.repr ()
  
  and default_reduction =
s\001a\001|\001p\001o\001}\001w\000\000\003\031\001r\001q\001u\001f\001e\001d\001c\001b\001m\001v\001t\000\000\000\000\000\000\001h\000\000\000\000\001j\000\000\000\000\001l\001{\001x\001n\001y\001z\000\000\003\029\003\028\003\027\000\000\000\000\002\021\0013\000\000\000\233\000\234\002\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001_\000\000\003\016\003\017\000\000\000\000\001\145\000\000\001\144\001\138\000\000\001\143\000\000\001\140\001\139\000\000\000\000\000\000\000\000\000l\000\000\000\000\000i\000\000\000\000\000\000\000\000\000\000\000\000\000\199\0016\000\000\000\000\000\000\000\000\000\000\000\000\001\215\000\000\000g\000\000\000\000\000j\000\000\000h\000k\000\000\000\000\000\000\003\t\000\000\001\129\000\000\000\000\002$\000\000\000\000\000\000\0007\000\000\000\000\0017\0008\002\028\000\000\000\000\001[\002\022\001\233\002\019\000\000\000\000\002\029\002\023\000\000\000\000\000\000\0015\000\000\0014\000\000\003\n\001\234\000\000\002!\000\000\001\236\000\000\000\000\001~\000\000\000\129\000\000\000\000\000\135\002'\000\000\000\000\000\136\000\n\000\130\000\000\000\000\000\000\000\000\000\000\000\138\000\000\000\000\000\011\002\226\000\000\000\023\002\227\001\235\000\000\002 \000\000\000\000\000\000\002\"\000\000\002#\000\000\002%\000\000\000\000\002&\001]\001\\\000\000\001Z\000\000\000\239\000\000\000\000\000\000\000\000\000\000\000\000\003\019\000\000\001\207\000\000\000\000\000\000\000\241\001\206\000\000\000y\000\000\000\244\000\242\000\000\000\230\000\000\000s\000\000\000p\000\000\000q\000\000\000o\000r\000\000\000\000\000\000\000\000\000n\000\000\000\026\000\000\000\000\000\000\000\000\000\231\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000e\000\000\000\000\000\000\002I\000\000\000\205\000\000\000\000\000\000\000\t\000\b\000\000\000\000\000\000\002x\000\000\002\014\002\015\000\000\002\012\002\r\000\000\000\000\000\000\000\000\000\000\002v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\147\000\000\000\000\000\000\000\000\001`\000\000\001\210\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\226\000\225\000\223\000\000\000\000\001P\000\000\000\000\000\000\000\000\000\252\000\000\000\000\000\253\000\000\000\000\0033\000\000\003-\000\000\000w\000\000\000\000\000\127\000\000\000\000\000\000\000\128\000v\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0031\0030\000\224\000\000\000\000\001O\000\000\000\000\000\000\001X\001W\001S\000\000\000\000\000\000\000\227\000\228\000\000\001N\001M\000\000\000\000\001T\000\000\000\000\000\000\000\000\000\000\000\000\002\225\002\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002U\000\000\000\000\000\000\000\000\000c\000f\000d\000\000\000\000\000\000\000\000\000\000\002M\003 \002R\002P\000\000\000\000\000\000\002]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001C\000\000\000\000\001G\000\000\001\152\001\151\000\000\000\000\001\150\001\149\001F\001D\000\000\001H\000\000\000\000\002o\000\000\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002+\002*\000\000\000\000\000\000\001\135\001\018\001\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002}\002r\002s\001\181\002u\000\000\000\000\002z\002\011\002|\000\000\000\000\000\000\002\131\002\128\000\000\000\000\001\178\001\168\000\000\000\000\000\000\000\000\001\172\000\000\001\167\000\000\001\180\002\137\000\000\001\179\001\166\000\000\002\130\002\129\000\000\001\177\000\000\000\000\001\174\000\000\000\000\001\170\001\169\000\000\002\127\000\000\000\000\000\000\000\000\002-\002,\000\000\002~\002{b\000\000\002\200\002\201\000\000\000\000\002\132\002tq\001\000\002p\000\179\000\000\002:\000\000\000\000\0028\000\000\000\000\002<\000\000\000\139\000\140\000\000\000\000\000\000\000\000\000\154\001\131\000\000\001\001\001\002\000\000\000\000\000\000\000\000\000\000\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\220\000\000\000\221\000\222\000\147\000\000\000\146\000\000\000\000\001#\000\000\001$\001\"\000\000\000\000\001&\001%\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002^\002W\000\000\002g\000\000\000\000\000\000\000\000\002h\002f\000\000\000\000\002l\000\000\000\000\002m\002k\000\000\000\000\002Y\002X\000\000\000\000\000\214\000\213\000\000\000\000\000\000\001\229\000\000\000\000\001\012\000\000\001\136\000\000\000\000\000\000\000\000\002b\002a\000\000\000\000\000\000\003!\001\230\000\000\002G\000\000\002H\002F\000\000\002`\002_\000\000\000\000\002T\002S\000\000\000\000\002j\002i`\000\000\003\r\003\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000<\000\000\000K\000J\000E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\001\220\000\000\001\219\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000A\000\000\000\000\000\000\000a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000b\000G\000\000\000\000\000\000\000I\000H\000\000\000L\000\000\000?\000\000\000\000\000\000\000\000\000\000\000\000\000B\000\000\000C\000D\000F\000\000\000\\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000[\000\000\000Z\000Y\000X\000\000\000\030\001\251\000\000\000\000\000\000\000\000\000\000\000w\000\000\000\018\002\253\002\252\002\t\001\248\000\000\002\n\001\254\002\005\001\255\000\000\000\000\000\000\000\000\000\000\000\000\000\017\001\228\001\227\001\252\002\004\002\003\002\000\002\001\000\000\001\249\001\250\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000^\000]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\rw\000\000\0009\000\000\000\000\000:\000\000\000\158\000\157\002e\000\000\000\000\002d\002c\002Q\000\000\000\000\000\000\002J\000\000\002L\000\000\002K\000\000\0022\0021\000\000\0023\000\000\000\000\000\150\000\000\000\000\000\000\001\208\002\198\002\196\002\195\002\193\002\191\000\000\000\000\000\000\000\209\000\000\000\208\002\194\002\192\000\000\000\207\002\027\001-\000\000\000\236\000\000\002\026\000\000\000\000\000\000\000\000\000\000\000\215\000\000\001(\000\000\001'\001*\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\031\002\025\000\000\000\000\000\000\002\030\002\024\000\000\003\004\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000~\000|\000\000\000\000\000z\000}\003\003\000\000\000\000\000\000\003\005\000\000\000\000\000\000\000\000\000\000\003\b\003\007\000\000\000\000\000w
  
  and error =
    (120, "'\225 \022*\183\153\158\128\160\127 \000\028p#a\000\023\n7\137>\128 |\000\000\012p}\246D \191\141\128\002`f\214n\191\153\191\224\168\255\016\136<\240}\246D \191\141\128\002`\224\247\028X\020\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175kD\214N\191\153\191\224(\253\016\b\012\240}\246D \191\141\128\002`\224\247\028X\020\028'\225\"V*\183\153\158\128\160\127\000\000<pb\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\003\000\000\192@\131.\016\000\b\000\000\000\000\000\001\000@\001\000\131\b \000\000\128\000\000\000\000\001\000@\000\000\131\bb\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\130\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\132\128\"\b \128\144\192\000\136\003\176\b\016\004\003 \000\224@\003.\020\000\b\004\001\000\000\128\132\128\"\0000\130\144\224\000\136\0030\1360\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003 \000\192@\003.\020\000\b\004\001\000\000\128\003\000\b\192@\131.\016\000\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\128\187\000 \201\144\224`\137\003\176\0110\142\003\000\000\192@\003.\016\000\b\000\000\000\000\000\003\000\000\128\000\003.\016\000\t\000\001\000\000\000\001\000\016\000\000\001\000\000\000\t\000\000\000 \000}\246D \191\141\128\002`\224\247\028X\020\028'\225\"V*\183\153\158\128\160\127\000\000<p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\131\004\019\000 \000\000\000\000\000\000\000\003\000\000\130\004\019\000\000\000\000\000\000\000\000\000\003\000\000\130\000\019\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\001 \000 \000\002\000\016\000\000\004\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\000\000\002\000\016\000\000\004\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000@\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\000\000\002\000\016\000\000\004\000\000\000\000\132\128\"\0000\128\144\224\000\136\003\176\0000\128\003\000\000\128\000\003.\020\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\128\000\003.\016\000\b\000\000\000\000\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\128\000\003.\016\000\b\000\000\000\000 \003\000\002\128\000\003.\016\000\b\000\000\000\000\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\128\000\003.\016\000\b\000\000\000\000 \003\000\000\128\000\003.\016\000\b\000\000\000\000\160\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\128\000\003.\016\000\b\000\000\000\000 \001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\128\187\000 \201\144\224`\201\003\176\011\016\142\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\128\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\016\000\000 \000\001\000\000\000\000\128\003\000\000\192@\003.\016\000\b\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128\187\000 \200\144\224`\137\003\176\011\016\142\003\000\000\128\000\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128\187\000 \200\144\224`\137\003\176\011\016\142\003\000\000\128\000\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128;\000 \200\144\224`\137\003\176\011\016\142\003\000\000\192@\003.\016\000\b\000\000\000\000\000\196\128;\000 \200\144\224`\137\003\176\011\016\142\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000 \000\001\000\000\000\000\130\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175\235w\246o\191\191\255\224\233\2551\b\028\244\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\003\000\000\128\000\003.\016\000\bb\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\133\000\145\128\000I\016\224`\t\000\144\137\000\b\000\000\000\128\000\000\000\000\000\000\000\000\128\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.\016\000\bb\016\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\000\000\002\000\016\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\224\000\136\0030\128\016\128\001\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\224\000\136\0030\000\016\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\128\000\003.\020\000\b\000\000\000\000\000\132\128\162\000 \192\144\224\000\200\0030\b\016\132\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\003\000\000\128\000\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\224\000\136\0030\000\016\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\192\000\136\0030\000\016\128}\246D \191\141\128\002`\224\247\028X\020\028'\225\"V*\183\153\158\128\160\127\000\000<p#a\000\023\n7\137>\128 |\000\000\012p#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001!\000\016\002\003\t\028\128\000\012\000\000\012`\001\000\000\001\000\001\000 \000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175kD\214N\191\153\191\224(\253\016\b\012\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\163a\136\031\138\183\169\030\1591|\130\000\205s\129!\b\016\002\003\t\028\128\000\012\000\000\012`#a\000\022\n7\137\030\128 |\000\000\014p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\001\000\n\016\160`\000\000\016\b\000\000\132\000\000\000\000\n\016\128`\000\000\016\b\000\000\003!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131!\136\031\128\179)\022\159\025\r\130\000\201c\128\000\b\000\000\000\000\000\128\000\b\000\000\000\000\129\000\000\001\000\000\000 \000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@\000\000\131\b\000\000\000\128\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\001\002\000\000\000\002\b \000\000\128\000\000\000\000\001\002\000\000\000\002\b\000\000\000\128\000\000\000\000\167\225 \022*\183\153\190\128\160\127\016\000\028p\167\225 \022*\183\153\158\128\160\127\016\000\028p\167\225\"\022*\183\153\158\128\160\1270\000\028p\001\000\000\001\000\000\000 \000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000 \000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\192\000\136\0030\128\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \136\144\192`\200\0030\b\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\004\001\000\000\000 \000\000\000\000\000\000\000\001\000\000\001\000\001\000 \000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\192\000\136\003\176\000\016\000\001\000@\000\000\131\b\000\000\000\128\000\000\000\000\001\000@\000\000\131\b\000\000\000\128\000\000\000\000\000\000\000\000\000\002\000 \000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\003\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\001\000@\000\000\131\b\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128*\000 \192\144\224\000\136\003\176\t\016\004\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\128\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\196\128*\000 \192\144\224\000\136\003\176\tbb\000\000\000\128\000\000\000\000\196\128*\000 \192\144\224\000\136\003\176\001\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\b\000\000@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128\"\000 \192\144\224\000\136\0030\000\016\000\132\128\"\000 \128\144\192\000\136\0030\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000 \000\001\002\000\000\000\002\b\000\000\000\128\000\000\000\000\005\002\000\000\000\002\b\000\000\000\128\000\000\000\000#a\000\022\n7\137>\128 |\000\000\012p#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\023\n7\137>\128 |\000\000\012p#a\000\022\n7\137\030\128 |\000\000\012p\197\189\187_\226\251\249\253\255\219\015\190\219\255\231\003!\004\003 \147\t6\128\b\r\000\000\b \001\000\000\001\000\000\000 \000\000\000\000\000\000@\001\000\000\001\000\000\000 \000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\000\000#a\000\022\n7\137\030\128 |\000\000\012p#a\002\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\016\000\000\000\000\000\000\002\000\128\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\001!\000\016\002\003\t\028\128\000\012\000\000\012`\192\000\017\000\000\000\000\000\000\024\000\130\129 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\023\n7\137>\128 |\016\000\012p#a\000\022\n7\137\030\128 |\016\000\012p\001!\000\017\002\003\t<\128\000\012\000\000\012`\001!\000\016\002\003\t\028\128\000\012\000\000\012`\001!\000\016\002\003\t\028\128\000\012\000\000\012`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\189\187_\226\251\185\253\255\219\015\190\219\255\239\001\000\000\000\000\003\001\028\000\000\000\000\000\000\000\163a\136\031\138\183\169\030\1591|\130\000\205s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\163a\b\022\n7\137\030\128 |\000\000\012p\163a\b\022\n7\137\030\128 |\000\000\012p\129\002\000\001\000\002\b \000\000\128\000\000\000\000\001\002\000\000\000\002\b\000\000\000\128\000\000\000\000\000\000\000\000\000\002\000 \000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\000\000\000\000\000\000\000\000\000\001\002\000\000\000\002\b\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128*\000 \194\144\224\000\200\003\176\0010\004\005\002\b\000\000\002\b\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\002\000 \000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@\000\000\131\b\000\000\000\128\000\000\000\000\192\000\b\000\000@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128*\000 \194\144\224\000\200\003\176\1290\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000 \000\000\000\000\000 \000\129\000@\000\000\131\b\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\b\000\000@\000 \000\000\000\000\001\000\000\163a\b\022\n7\137\030\128 |\000\000\012p\163a\b\022\n7\137\030\128 |\000\000\012p#a\000\023\n7\137>\128 |\000\000\012p#a\000\022\n7\137\030\128 |\000\000\012p\003!\000\003\000\019\t6\128\b\r\000\000\b\160\003!\000\002\000\019\t\022\128\b\r\000\000\b\160\003!\000\002\000\019\t\022\128\b\r\000\000\b \003!\000\002\000\019\t\022\128\b\r\000\000\n \003!\002\002\000\019\t\022\128\b\r\000\000\bb\000\000\000\000\000\128\000\017\000\000\000\000 \000\000\000\128\000\000\000\128\000\017\000\000\000\000\000\000\000\000\128\000\000\000\003!\000\002\000\019\t\022\128\b\r\000\000\b \003!\000\003\000\019\t4\128\b\012\000\000\b \003!\000\002\000\019\t\020\128\b\012\000\000\b \001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\147)\027B@S\t5\128\b\012\161\003j\168\000\001\000\002\000\016\000\000\128\000\b\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\147)\027B@S\t7\128\b\r\160\131j\168\001\000\000\000\000\002\001\020\000\000\000\000\000\000\000\131!\b\002\000\019\t\022\128\b\r\000\000H \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\000\003\000\019\t6\128\b\r\000\000\b \003!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\027\000\000@\000 \000\000\000\160\002b\136\003!\000\002\000\019\t\022\128\b\r\000\000\b \144\000\027\000\000@\000 \000\000\000\160\002b\136\131!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\027\000\000@\000 \000\000\000\160\002b\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\147!\027\002\000S\t6\128\b\r\160\002j\168\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\147!\027\002\000S\t6\128\b\r\160\002j\168\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000 \000\000\000\000\002@\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\027\000\000@\000 \000\000\000\160\002b\136\131!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\027\000\000@\000 \000\000\000\160\002b\136\128\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\002\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\018\000\000\000\000\000\000\000\000\000\000\000\000\131!\002\002\000\019\t\022\128\b\r\000\000\n \128\000\018\000\000\000\000 \000\000\000\000\002B\136\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\018\000\000\000\000 \000\000\000\000\002B\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\017\000\000\000\000 \000\000\000\000\002@\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\016\000\000\000\000\000\000\000\000\000\000\002\000\128\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000@\000 \000\000\000\000\002@\136#a\000\022\n7\137\030\128 |\000\000\012p\003)\000C@\019\t5\128\b\012\000\000\b \003)\000B@\019\t\021\128\b\012\000\000\b \000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\128\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\b\000\000\000\000 \000\000\000\128\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\128\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\003!\000\003\000\019\t6\128\b\r\000\000\b \003!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000 \000\000\000\128\002@\136#a\000\022\n7\137\030\128 |\000\000\012p\001!\000\017\002\003\t<\128\000\012\000\000\012`\001!\000\016\002\003\t\028\128\000\012\000\000\012`\196\148\187\015\160\248\176\224\127\219\003\190\219\243\135\001!\000\016\002\003\t\028\128\000\012\000\000\012`\197\189\187_\226\251\185\253\255\219\015\190\219\255\239\000\000\000\000\000\002\000\020\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p#a\000\022\n7\137\030\128 |\000\000\012p\197\189\187_\226\251\185\253\255\219\015\190\219\255\231\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001!\000\016\002\003\t\028\128\000\012\000\000\012`\197\189\187_\226\251\185\253\255\219\015\190\219\255\239\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\003\000\020\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\128\000\ba\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\189\187_\226\251\185\253\255\219\015\190\219\255\231\196\148\187\015\160\248\176\224\127\219\003\190\219\243\135#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135\196\148\187\015\160\248\176\224\127\203\003\188[\243\135\231\245\187\031\170\255\185\254\255\235\127\188[\255\247}\246D \191\141\128\002`\224\247\028X\020\028#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\000\002\000\019\t6\128\b\012\000\000\b \003!\000\002\000\019\t\022\128\b\012\000\000\b \003)\000B@\019\t5\128\b\012\128\003h\168\002\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\b\000\000\000\000 \000\000\000\128\002`\136\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\b\000\000\000\000 \000\000\000\128\000\000\000\000\000\b\000\000\000\000\000\000\000\000\128\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\161\136\031\128\179)\022\159\025\r\130\000\201c\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\b\000\000\001\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\003)\000B@\019\t\021\128\b\012\128\001( \003!\000\002\000\019\t\020\128\b\012\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\025\000\000\000\000 \000\000\000\128\000\000\000\131\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\025\000\000\000\000 \000\000\000\128\001\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\128\000\025\000\000\000\000 \000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003)\000B@\019\t\021\128\b\012\128\001( \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000\000\128\000\b\000\000\000\000\128\000\b\000\000\000\000 \000\000\000\000\002`\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\128\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\128\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\128\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\128\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\128\002`\136\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\128\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\128\002@\136\003!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000 \000\000\000\128\002@\136\000\000\000\000\000\000\000 \000\000\000\128\002@\136#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\128\002@\136\131!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\128\002@\136\131!\000\002\000\019\t\022\128\b\r\000\000\ba\000\022\n7\137\030\128 |\000\000\012p\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\128\000\129\015\1280  \031\001\000\128\002\193\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\015\1280  \031\001\000\128\002\193\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\128\000\000\000\000\000\000\000\002\000\020\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\128\000\136\015\1280  \031\001\000\128\002\193\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\128\000\130\015\1280  \031\001\000\128\002\193\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\128\000\129\015\1280  \031\001\000\128\002\193\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001!\000\016\002\003\t\028\128\000\012\000\000\012`\197\189\187_\226\251\185\253\255\219\015\190\219\255\239\000\000\000\000\000\002\000\020\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\128\000\136\015\1280  \031\001\000\128\002\193\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\189\187_\226\251\249\253\255\219\015\190\219\255\231#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\128\000\130\015\1280  \031\001\000\128\002\193\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\189\187_\226\251\249\253\255\219\015\190\219\255\231#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\128\000\129\015\1280  \031\001\000\128\002\193\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\189\187_\226\251\249\253\255\219\015\190\219\255\231#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135\001\000\000\000\000\003\000\020\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\197\189\187_\226\251\249\253\255\219\015\190\219\255\231#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\197\189\187_\226\251\249\253\255\219\015\190\219\255\231#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\000\000\129\015\1280  \031\001\000\128\002\193\003\197\189\187_\226\251\249\253\255\219\015\190\219\255\231#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135\000\000\000\000\000\000\000\000\000\000\000\002\128\000\000\000\000\000\000\000\002\000\020\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\128\000\136\015\1280  \031\001\000\128\002\193\003\197\189\187_\226\251\249\253\255\219\015\190\219\255\231#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\128\000\130\015\1280  \031\001\000\128\002\193\003\197\189\187_\226\251\249\253\255\219\015\190\219\255\231#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\128\000\129\015\1280  \031\001\000\128\002\193\003\197\189\187_\226\251\249\253\255\219\015\190\219\255\231#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135\197\189\187_\226\251\249\253\255\219\015\190\219\255\231#a\000\022\n7\137\030\128 |\000\000\012pa\000\022\n7\137\030\128 |\000\000\012p\128\000\130\015\1280  \031\001\000\128\002\193\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\128\000\129\015\1280  \031\001\000\128\002\193\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\161\136\031\128\179)\022\159\025\r\130\000\201c\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\003)\000B@S\t\021\128\b\012\000\000( #a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\161\136\031\128\179)\022\159\025\r\130\000\201c\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\003)\000B@S\t\021\128\b\012\000\000( \003\000\000\128\000\003.\016\000\b\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003)\000B@S\t\021\128\b\012\000\000( \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003)\000B@S\t\021\128\b\012\000\000( \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\128\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\148\187\015\160\248\176\224\127\203\003\188[\243\135\003!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135#a\000\022\n7\137\030\128 |\000\000\012p\196\148\187\015\160\248\176\224\127\203\003\188[\243\135\129!\b\016\002\003\t\028\128\000\012\000\000\012`\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\014p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\016\000\000\000\000\000\000\000\000\000\000\002\000\163a\002\022\n7\137\030\128 |\000\000\014p\128\000\146\015\1280  \031\001\000\128\002\195\003\128\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\146\015\1280  \031\001\000\128\002\195\003#a\002\022\n7\137\030\128 |\000\000\012pt\028\128\000\012\000\000\012`a\000\022\n7\137\030\128 |\000\000\012pb\000\000\000\128\000\000\000\000@\000\000\000\000@\000 \000\000\000\128\000\000\000\001\002\000\000\000\002\b\000\000\000\128\000\000\000\000\132\128\"\000 \130\144\224\000\200\0030\000\016\004\000\000\000\000\000\000\000\000\000@\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\001\000\002\0000\000\000\004\000\000\000\000\001 \000\000\000\002\000\016\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000 \000@\000\000\000 \000\000\000\000\000\000\000\000 \000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\004\002\000\019\t\022\128\b\012\000\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\000\002\000\019\t\022\128\b\012\000\000\b \132\128\"\000 \128\144\192\000\200\0030\000\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\000\002\000\019\t\022\128\b\r\000\000\b\160\003!\000\002\000\019\t\022\128\b\r\000\000\b \196\148\187\015\160\248\176\224\127\203\003\188[\243\135\128\000\136\015\1280  \031\001\000\128\003\225\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000@\000\000\131\b\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000@\000\000\131\b\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@\000\000\131\b\000\000\000\128\000\000\000\000\000\000\b}\246D \191\141\128\002`\224\247\028X\020\028'\225\"V*\183\153\158\128\160\127\000\000<p\003!\000\002\000\019\t\022\128\b\r\000\000\b \016\000\002\000\000\000\000 \000\000\000\000\002@\136#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000}\246D \191\141\128\002`\224\247\028X\020\028'\225\"V*\183\153\158\128\160\127\000\000<p\001\002\000\001\000\002\b \000\000\128\000\000\000\000\001\002\000\000\000\002\b\000\000\000\128\000\000\000\000\132\128\"\000 \130\144\224\000\136\0030\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\003\000 \000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b`\131>\144\000\136\003\000\000\016\000\132\128\"\000 \128\016\128\000\128\0030\000\016\000\001\128\004\001\000\000\000 \000\000\000\000\000\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000 \000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\016\192\000\128\0030\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@\000\000\131\b\000\000\000\128\000\000\000\000\196\128\"\000 \192\016\224\000\128\0030\000\016\000\132\128\"\000 \128\016\192\000\128\0030\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\001\000@\000\000\131\b\000\000\000\128\000\000\000\000\196\128\"\000 \192\016\224\000\128\0030\000\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@\001\000\131\b \000\000\128\000\000\000\000\001\000@\000\000\131\b\000\000\000\128\000\000\000\000\196\128\"\000 \192\016\224\000\128\0030\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\001\000\002\0000\000\000\004\000\000\000\000\001 \000\000\000\002\000\016\000\000\004\000\000\000\000\132\128\"\0000\128\016\224\000\128\0030\0000\000\b\128\000\001\000\001\0000\000\000\000\000\000\000\000\b\000\000\001\000\001\0000\000\000\000\000\000\000\000\bb\001\136\016\000\000\000\000\000\000\000\132\000\000\000\000\n\016\160 \000\000\016\b\000\000\132\000\000\000\000\n\016\128 \000\000\016\b\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\b\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\b\016\128 \000\000\016\b\000\000\b\000\000\000\001\001\000 \000\000\000\000\000\000\000\b\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\132\000\000\000\000\b\016\224 \000\000\016\b\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\132\000\000\000\000\b\016\224 \000\000\016\b\000\000\132\000\000\000\000\b\016\192 \000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\132\000\000\000\000\b\016\224 \000\000\016\b\000\000\b\000\000 \000\001\000 \000\000\000\000\000\000\000\b\000\000 \000\001\000\000\000\000\000\000\000\000\000\000\000\000 \000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\128\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\132\000\000\000\000\b\016\224`\000\000\144\b\000\000\132\000\000\000\000\b\016\192 \000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\b\016\224`\000\000\144\b\000\000\001\000\000\000\b\001\1360\000\000\000\000\000\000\000\001\000\000\000\b\001\136\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000 \000\000\000\000\000\000@\001\000\000\000\000\000\000 \000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\000\000\001\000\000\000\b\001\136\016\000\000\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\002\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\128\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\002\000\000\000\000 \000\000\000\000\002\000\000\000\000\002\000\000\000\000 \000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128*\000 \136\144\224 \136\003\176\b\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\b\016\224 \000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.0\000\b\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\128\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\132\000\000\000\000\b\016\224`\000\000\016\b\000\000\132\000\000\000\000\b\016\192 \000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\b\016\192 \000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\224\000\136\0030\000\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\016\000\000\000\000\000\000\000\000\000\000\000\000\001\000\016\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192H\003\174\016\000\b\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\128\000\003.\016\000\b\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\003\000\000\192H\003\174\016\000\b\000\000\000\000\000\003\000\000\128\000\003.\016\000\b\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\003\000\000\192H\003\174\016\000\b\000\000\000\000\000\133\128\170\000 \193\016\224\000\136\003\176\0000\004\003\000\000\128\000\003.\016\000\b\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\003\000\000\192H\003\174\016\000\b\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\160\000\000\130\000\000@\000 \000\000\000\000\002\000\136\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\003\000\000\192H\003\174\016\000\bb\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\192\000\136\0030\bbb\000\000\000\000\001\0000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\016\000\000\000\000\000\000\000\000\000\000\000\000\001\000\016\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\001\000\000\000\b\001\136\016\000\000\000\000\000\000\000\132\128\"\000 \128\144\224\000\136\0030\000\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\016\128\000\128\0030\000\016\004\b\000\000\000\000\001\0000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\016\000\000\000\000\000\000\000\000\000\000\000\000\001\000\016\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192H\003\174\016\000\b\000\000\000\000\000\132\128\"\000 \128\016\192\000\128\0030\000\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000 \000\000\000\000\000\000\000\b\128\000\001\000\001\0000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\016\000\000\000\000\000\000\000\000\000\000\000\000\001\000\016\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\003)\000B@\019\t\021\128\b\012\128\000( \001\000\000\000\b\003\136\016\000\000 \000\000\000\000\132\000\000\000\000\n\016\160`\000\000\016\b\000\000\132\000\000\000\000\n\016\128`\000\000\016\b\000\000\128\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\b\016\128`\000\000\016\b\000\000\b\000\000\000\001\001\000 \000\000\000\000\000\000@\132\000\000\000\000\b\016\192`\000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\001\001\000 \000\000\000\000\000\000\000\b\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\132\000\000\000\000\b\016\224`\000\000\016\b\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\132\000\000\000\000\b\016\224`\000\000\016\b\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\001 \000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000 \000\001\000 \000\000\000\000\000\000@\b\000\000 \000\001\000 \000\000\000\000\000\000\000\b\000\000 \000\001\000\000\000\000\000\000\000\000\000\000\000\000 \000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\003)\000B@\019\t\021\128\b\012\128\000( \003\128\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\128\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\b\016\192`\000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137>\128 |\000\000\012p#a\000\022\n7\137\030\128 |\000\000\012p\132\000\000\000\000\b\016\192`\000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\b\003\1360\000\000 \000\000\000@\001\000\000\000\b\003\1360\000\000 \000\000\000\000\001\000\000\000\b\003\136\016\000\000 \000\000\000\000\001\000\000\000\b\003\136\016\000\000 \000\000\000\000\003!\004\003 \019\t6\128\b\012\000\000\b \001\000\000\000\000\000\000 \000\000\000\000\000\000@\001\000\000\000\000\000\000 \000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\000\000\001\000\000\000\b\003\136\016\000\000 \000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\002\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003)\000B@\019\t5\128\b\012\000\000\b \003)\000B@\019\t\021\128\b\012\000\000\b \003)\000B@S\t\021\128\b\012\000\000\b \001\000\000\000\b\003\136\016\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\004\001\000\000\000\b\003\136\016\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\169*Pb\139\153\253\224\136\0150\b<l\133\169*Pb\139\153\253\224\136\0150\b<l\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128*\000 \136\144\224`\136\0030\b0\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128*\000 \136\144\224`\136\0030\b0\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128*\000 \136\144\224`\136\0030\b0\012\128\000\b\000\000\000\000 \000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\192H\003\174\016\000\b\000\000\000\000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\b\016\224`\000\000\016\b\000\b\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\b\016\192`\000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.0\000\b\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\132\000\000\000\000\b\016\192`\000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\b\016\192`\000\000\016\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\224\000\136\0030\000\016\004\003\000\000\192H\003\174\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\001\000\000\000\b\003\136\016\000\000 \000\000\000\000\132\128\"\000 \128\144\224\000\136\0030\000\016\004\003)\000B@\019\t\021\128\bt6\128\b\012\000\000\bb\000\000\000\000\001\0000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\016\000\000\000\000\000\000\000\000\000\000\000\000\001\000\016\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\003)\000B@\019\t\021\128\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000 \000\000\000\000\002`\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\bb \000\000\128\000\000\000\000\001\002\000\000\000\002\b\000\000\000\128\000\000\000\000\000\000\b\000\000\002\000 \000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000@\000\000\131\b\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000\000\000\000\000\000\001 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131!\000\002\000\019\t\022\128\b\r\000\000\b\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\000\002\000\019\t\022\128\b\r\000\000\bb\000\000\000\000\000\000\000\016\000\000\000\000 \000\001\000\000\000\000\000\000\000\016\000\000\000\000\000\000\001\000\000\000\000\000\003\000\000\128\000\003.0\000\t\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\128\000\003.\016\000\t\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\128\000\003.\016\000\t\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\196\128;\000 \200\144\224`\137\003\176\011\016\142\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\000\000\b\000\000\000\000 \000\000\000\000\002\000\000\001\000\000\000\000\001\000\000\000\b\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000 \000\000\000\000\002\000\000\197\128\187\000 \201\144\224`\201\003\176\011\016\142\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\002\128\000\003.\016\000\b\000\000\000\000\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\160\"\000 \130\144\208\000\136\0070\b\016\132\132\128\"\0000\128\144\224\000\136\0030\b0\132\132\128\"\000 \128\144\224\000\136\0030\b\016\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\224\000\136\0030\b\016\004\132\128\"\000 \128\144\192\000\136\0030\b\016\132\001 \000\000\000\002\000\016\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\0000\128\144\224\000\136\0030\b0\132\132\128\"\000 \128\144\224\000\136\0030\b\016\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\224\000\136\003\176\b\016\004\001 \000 \000\002\000\020\000\000\004\001\000\000\128\001 \000\000\000\002\000\020\000\000\004\001\000\000\128\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\192\000\136\0030\b\016\132\132\128\"\000 \128\144\192\000\136\0030\b\016\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\000 \128\144\192\000\136\0030\b\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\196\128;\000 \200\144\224`\137\003\176\011\016\142\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\003\000\000\192@\003.\016\000\b\000\000\000\000\000\196\128;\000 \200\144\224`\137\003\176\011\016\142\132\128\"\000 \128\144\224\000\136\0030\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000#a\000\022\n7\137\030\128 |\000\000\012pb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000\022\n7\137\030\128 |\000\000\012p\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\000\002\000\019\t\022\128\b\r\000\000\b \000\000\000\000\000\000\000 \000\000\000 \002@\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000'\225 \022*\183\153\158\128\168\127 \000\028pp'\225 \022*\183\153\158\128\168\127 \000\028p
  
  and start =
    7
  
  and action =
    ((16, "?\254Kj?>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\012?>\000\000\019$?>?\254\020\140\0018^f\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\188\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\154\002\164\000\b\000\000\002\196\000\248\000\000\004(\004t\000\000\000\000\000\000\000\000\000\000\000\000\003\194\000\000\000\000\000\000\004vLv\000\000\000\000\000T\000\000\000\000\000\000\005>\004\236LvLvM\248D\170?\014X\230\019$M\188G\244G\002\000\000\020j\000\000\000\000\019\246\000\007\000\000\000T\000\000\000\000\001\134\000\000\019\246\000\000\000\000\000\254sX}N_\b\000\000~\208\1286\000\000G\232LvWx@Z?>?\254\000\000\000\000G\244G\002\020j\000\254\006\028=\190\000\000\000\140\000\000\003\150\007\128\000\000\bb\000\000\000\000\000\140p\136[\198\000\000Rp\000\000X4Rp\000\000X4X4\001\148\000\000\b.\003\186\000\000\000\000\000\000X4\000T\000\000\000\000\000\000\000\000H\204\001\148\000\000\000\000\002\196\000\254\002r\000\000\004\250\000\000\004\250\000\000\000\000\003@\000\000X4\000\000\018<\130\130\000\000Lv\000\000L\252X4\000\000\000\000M\206X4\000\000\000\000\000\000QtLvRF\b\202\000T\000\000\018\240Lv\000\000\000\000\019$\000\000\000\000\000\000\005\230\000\000\b\150X4\006\204\000\000\nd\000\000\019\142\000\000\000\000\000\208\000\000\000\000\000\000\002\132\000\000\003\252\000\000\t\134H\018\000Tm\190\003\242\000T\000\000Lv\000\000\001\246\006\240\018\238\000\000\000\000\011l\000\000\003\178\000\000\000\000c$\000\000\027>\000\000\006\020\000\000\012X\000\000\012r\000\000\000\000F\182\005\206\012(\012\228\000\000\019$\000\000[\198c\160\012\188X4\000\000\019$\000\000n>?>?\254Kj\000\000\000\000\015\130\020\156\001\148\000\000\019$\000\000=`^\194?\254\000\000\000\000K~URS4\000\000\001\018\000\000\000\000\001\248\000\000\000\000DH\001\018\002\188\r\002\000\017\000\000?\014\r\004\012\236\018\202\0206\019$?\254?\254\022~\000\000\002\188\000\000n>\003\186\000\000n>\000\000\020\206\020\156\000T}\228?\014?\014\002\020\0028\000&\000\000\000\000\000\000\012\134?\014\000\000\024\134\003\024\020j\007 \000\000\005z\b\030\000\000\002\186U\184\000\000Lv\000\000Lv\000\000_\134Lv\000\000\005.Lv`\026\000\000\000\000\000\000\000\000\004@\000\254Y\142\000\254Z6d\028\003\024\000\000\000\000\000\000?\014d\176\000\000\004\222\b\220Z\222\000\000\000\000\000\000\006<?\014e\b\000\000\000\000\021\150\000\000\000\000Q>n>\000\000\tJ\0028\0206\0206\019$\000\000\000\000\000\000Kj\000\000\000\240Kj\022~\002\188\000\000\b\128\000\000B\164\b\174\000\000\022X\000\000\020\244QJ\000\000\000\000\000\000KjB\164K*\015\130\015\130\000\000\000\000\000\000\000\000\001\214\019x>P\000\000N\148OHD\170\0206\002\020\0028\b\144\0206\000\000XR\0206\000\000\000\"\000\000\000\000?\014\026d\000\000\000\000\000\000\000\000W\154\000\000\003\004?\014\000\000\r>\000\000\023\178O\252P\176Kj\000\000q\014u\140S4q\140v6\007 \t\154\000\000\000\000\002\n\022F\014\198\000\000\000\000\000\000\022VLv\025\186\023<S4KjS4\004\180\000\000\000\000\000\000\000\000\000\000I\186\025\246\000\000\000\000\000\000F\254\028$q\140\000\000\000\000q\014S4\000\000\000\000LbS4N\254v\218\000\000S\208\000\000S4\000\000\000\000T\026\000\000\000\000L\188\000\000\000\000wR\000\000\128\136w\202\000\000\128\190\0018\000\000\000\000v\218\000\000\004\200r\004EZ\n0\000\000\000\000R\234\000\000\000\000@\152\000\000\001$\tb\000\000\000\000?`\000\000Kjs\206\004\234\004\234\000\000\004\144Lv\006\250\r@\000\000\000\000\005\164\004\234\000\026\000\000q\014S4@\152\000\000K*\015\130\020\244\015\130\002\198\005j\000\000\000\000\015\130\r\012\000\000\000\000\r\012\000\000\015\130\003\182\003\252\000\000\029\n\000\000\007\222\000\000\000\000\016h\021\218\000\000\000\000\000\000\0062\000\000\000\000\000\000\r\n\000\000\024\140\000\000\025r\000\000\026X\000\000\027>\000\000\017N\022\192\000\000\000\000\000\000\028$\000\000\029\n\000\000\029\240\000\000\030\214\000\000\031\188\000\000 \162\000\000!\136\000\000\"n\000\000#T\000\000$:\000\000% \000\000&\006\000\000&\236\000\000'\210\000\000(\184\000\000)\158\000\000*\132\000\000+j,P\000\000-6\000\000.\028/\002\000\000?>\000\000\000\000\000\000\019$S4V\232\000`\000\000S4H\188Lv\007\030\000\026\rP\000\000\000\000\000\000\000\000DH\002\024\002\024\000\000\r\\e~S4\000\000\000\000\000\000Lv\000\000\024\192M\248\000\000\022\014Lv\025\166\012\224\000\000\000\000\000\000\000\000e~\000\000\000\000\001\248E\028\000\000\000\000p^\000\000\0068\000\000\000\000H\018\002\024\012\248Lv\007X\000\000\000\000\004\170Lv\t$\000\000\000\000\r\024\000\000\000\000\000\000E\142Lv\n\n\000\000\000\000A~S4B\238F\000\000\000\000\000xB\000\000Fjx\186\000\000H\136y2\000\000I\018\002\030\000\000\000\000\000\000\000\000n>\000\000\000\000\000\000\011\022\000\000\000\000\000\000\024~\000\000[\028\000\000\005z\b\028\000\000e\224\000\000\000\000\000\000f`\000\000\000\000\000\000f\224\000\000\000\000\000\000\015\130\004\166\t\002\000\000g`\000\000\005\150\000\000/\232\000\000g\224\000\000\006|\000\0000\206\000\000h`\000\000\007b\000\0001\180\029\240\000\000\t\170\bH\000\0002\154\000\000\011\028\t.\000\0003\128\000\000[\196\n\020\000\0004f\t\248\t\232\000\000h\224\n\250\000\0005L\000\000i`\011\224\000\00062\000\000i\224\012\198\000\0007\024\r\172\000\0007\254\0184\014\146\000\000\000\000\000\000\000\000j`\000\000\000\000j\224\000\000\000\000k`\000\000\b\n\000\000\000\000\000\000\r\b\000\000\r\026\000\000\000\000\r\184\000\000\000\000E.\002\024\r\202n\198\000\000\000\000F\020\002\024\r\204n\198X4\r\164\000\000\000\000n\198\000\000\000\000\000\000n\198\000\000\r\168\000\000\000\000\000\000\000\000\000\0008\228S4\000\000\000\000\r\236\000\0009\202\000\000:\176yH\t\208\000\000\000\000B\164\000\000\006\176L\030[\028\nH\000\000\000\000[\196C\136\000\000\005\140\011\252\000\000\000\000\003\252\bj\000\000\000\000\000\244\004P\000\000\000\000\020\244\019(\007 \000\000\015\182\023\242\000\000\022\"\000\000\027r\000\000`\130\t\242\000\000\000\000\001\130\022\192Tz\000\000\000\000\023\166\000\000\007@\000\000\000\000\n\128\000\000\000\000a\002\tP\000\000\000\000\005\140\012\002\000\000\000\000\000\000\002\188\014\n\0028?\014\024\134\0206t0\r\150\000\000\000\000\0028\000\000Dd\000\140\r\180\000\000\000\000\006\020\001t\000\000{\130\000\000S4n>\000\000\014Ju\140S4;\150\\D\000\000\000\000G4\000\000\014&\000\000I\248\000\000\n\222\000\000?\014\014(\000\000t\172n>\000\000\014D\0028n>\000\000?>?\254S4=\178\000\000\000\000?>?\254D\170\0206n>\000\000\020\140\0018\r\138Lv\n\182\014L~\026\000\000n>\000\000Dd\000\140u\004\027>\019$n>\000\000\019$n>\000\000k\246k\246\020\206\n\168\003\252\000\000n>\000\000?\014~\166n>\000\000\003\214\000\000\014b\r\162?\014{\192\000\000D\170?\014{\192\000\000Dd\000\140p\136\020\200\020\200\007\252\000\000\nh\018\154\014n\000T\000\000\000\000\007\214\000\000\018\154\000\000\000\000\014F\r\254\023Z\019$BrLv\bh\000\000\n\216\000\000\000\000\000\000C\224\003^\003\252\002\132\003\252\r\224LvCV\007\252\003\252\r\232LvYR=\138\000\000\r\238Lv[\020\003\136\015T\000\025\000\000\t\216\000\000\003\252\014\004H\018\007fLvB\028=\138\000\000V\014\018\240\023Z\000\000\014\150\005\188\011 \000\000\011,\023ZLv\b\188\011\182\tf\012\028\000\000\000\000Lv\005|\007H\000\000\000\000ld\000\000\\\236\000\000\019$Lv\n\240LvA6=\138\000\000=\138\000\000\000\000\000\000n>\000\000\007\252\nh\014~\014\012I\226\014\158\014*X4\014\188I\226X4\014\212I\226a\152X4\014\218I\226LvD\224\014\224I\226\nL\012tl\210mP\000\000|\020\000\000\000\000\000\000n>\000\000\000\000\129\018\019$\020j\014\214sX\000\000|F\000\000\000\000\000\000\000\000\000\000k\246\000\000\000\000\000\000\000\000\129j\011 \015(\014d?\014{\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n>\000\000\000\000\129\194\003\136\007\252\nh\014\230\014\160\023Zn>\000\000\000\000\000\000\130\026\003\136\007\252\nh\014\248\014\164I\226n>\000\000\000\000\000\000\000\000\000\000\007X\020\200\007\252\nh\015(ofB\206\019$UR\011T\000\000\000\000\000\000H\144>t=\138\000\000\003^\006\194\002\132\003\252\014\182LvJh\011\148\003\252\014\186LvP\020\003\252\003\172\000\000\000\000\014\228\000\000\000\000\027\164\003\136\022:\011\220\003\252\014\202H\018\000\000\012\138\003\252\014\208H\018\000\000\003\252p\006\130\250\002\024\014\236Lv\011\214\000\000\000\000\015\024\000\000\000\000\000\000=\138\000\000\019$\000\000=\138\000\000@(\018\240B\206B\206r|\005\188\011 \000\000\012\024B\206Lv\t\162\001\148\000\000\019$S4ofB\206\011\186B\206\000\000@\220A\194\000\000\\\214\000\000]j\000\000\000\000\000\000]\254\024$\000\000\000\000I\226\011v\000\000\000\000a\018\015l\000\000=\138\000\000\019$Lv=\138\000\000=\138\000\000\000\000\000\000|\144I\226\015\028B\206}$of\000\000n>\000\000\000\000Z$\000\000\000\000\000\000\130rKj\000\000\000\000\000\000\000\000\000\000\127d\011 \015\194\0028n>\000\000\000\000\000\000\000\000\000\000\000\000\000\000Y|n>\000\000\000\000\127v\128\012\003\136\007\252\nh\015\142ofn>\000\000\000\000\000\000\000\000n>\130r\000\000\015\194\000\000Y|\015\210\000\000\000\000\r \000\000\000\000b\020\012\\\000\000\000\000>>\000\000Lv\012\206\000\000\r`\000\000\000\000\000\000\006\176\012\226\000\000\000\000\000\000D\170\0206\002\230\000\000X\210\000\000\015\238\000\000\023r\000\000\000\000\015\244\000\000\016 u\140\000\000S4<|\015\248\000\000\000\000\000\000\000\000\000\000\000\000r\254\027>\019$\000\000\019$\000\000\000\000\000\000\015\250\000\000\000\000\000\000\006\156\000\000\015\138\000\000\015`H\018\004\252\011\026\019$\000\000br\000\000\127B\000\000\000\000\015\238LvT\188\015zLv\001\022\004\180\001\148\000\000\000\000\007\136J\164\001\148\000\000\000\000X4\000\000b\168p\136\019$\000\000y\212z\030\000\140\000\000\000\000p\136\019$\000\000\000\000\000\000\015\210\002\132\016F\000\000u\236?\006An\002\132\016L\000\000\000\000zhz\178\000\000|F\000\000\016L=\190\026\166\000\140p\136|F\000\000\000\000\000\000p\136\000\000\r\138\000\000\000\000\016b\000\000\016@LvU\142\016FLvV`n>\000\000\016p\000\000\000\000\000\000\015\232\000\000\015\238\000\000\015\254\000\000\000\000M\188\016\002\000\000\000\000Lv\000\000\012|\000\000\000\000\016\014\000\000\000\000S4>\002\000\000\000\000B\164\000Tz\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000S\020\bV\000\000\000\000\000\000\016\166\000\000\000\000\000\000\016\174\000\000R4\000\000\012\002\000\000C\136C\136\000\000\000\000H\158\000\000H\158\000\000m\232H\158\000\000\016 \000\000\000\000"), (16, "\007\181\007\181\000\006\002\006\005\153\007\181\002b\002f\007\181\004\194\004^\007\181\0056\007\181\017\242\004\202\007\181\007j\007\181\007\181\007\181\002\n\007\181\007\181\005\153\005\162\005\166\004\206\007\181\004\242\004\246\n\194\007\181\006\005\007\181\007e\004\250\007n\004\210\005\170\007\181\007\181\006\174\006\178\007\181\006\182\004\230\006\190\006\194\001\178\007\181\007\181\002Z\001^\n\226\004\238\007\181\007\181\007\181\006\218\006\222\006\238\007\n\007^\006\246\007\181\007\181\007\181\007\181\007\181\007\181\007\181\007\181\007\181\007\178\000\234\007\181\002\138\007\181\007\181\002:\007\186\t\018\tN\006\250\004z\007\181\007\181\007\181\001\182\007\181\007\181\007\181\007\181\n\230\011\002\014V\007\181\005:\007\181\007\181\tJ\007\181\007\181\007\181\007\181\007\181\007\181\006\254\007\002\007\181\007\181\007\181\007\018\002\242\t^\002\142\007\181\007\181\007\181\012i\012i\006\021\007r\005\161\012i\003\234\012i\012i\002\154\012i\012i\012i\012i\001\170\012i\012i\005\185\012i\012i\012i\014\226\012i\012i\005\161\012i\006\021\012i\012i\012i\012i\012i\012i\012i\012i\002\162\b\190\005\185\012i\024&\012i\012i\012i\012i\012i\b\210\012i\012i\012i\003\185\012i\012i\012i\001j\002.\012i\012i\012i\012i\012i\012i\012i\002\166\012i\012i\012i\012i\012i\012i\012i\012i\012i\012i\012i\001\177\012i\012i\000\234\012i\012i\006\021\005\014\000\250\001\154\012i\012i\012i\012i\012i\002f\012i\012i\012i\012i\012i\002\026\012i\012i\002\242\012i\012i\005\018\012i\012i\012i\012i\012i\012i\012i\012i\012i\012i\012i\012i\012i\001\177\001\177\012i\012i\012i\001\177\007\157\001\177\001\177\000\234\001\177\001\177\001\177\001\177\002\214\001\177\001\177\005\193\001\177\001\177\001\177\006\021\001\177\001\177\000U\001\177\004=\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\000U\012.\005\193\001\177\000U\001\177\001\177\001\177\001\177\001\177\007\226\001\177\001\177\001\177\004=\001\177\001\177\001\177\004}\015.\001\177\001\177\001\177\001\177\001\177\001\177\001\177\002\030\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\000\234\001\177\001\177\000U\001\177\001\177\011\022\005\026\000\250\001\154\001\177\001\177\001\177\001\177\001\177\000\234\001\177\001\177\001\177\001\177\001\177\005\158\007*\001\177\003\"\001\177\001\177\005\030\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\177\001\"\001\177\001\177\001\177\001\177\ti\ti\003-\001Z\003\026\ti\003\250\ti\ti\004}\ti\ti\ti\ti\005a\ti\ti\006\158\ti\ti\ti\001f\ti\ti\001V\ti\000\n\ti\ti\ti\ti\ti\ti\ti\ti\015\142\023J\001b\ti\001n\ti\ti\ti\ti\ti\003\026\ti\ti\ti\005\194\ti\ti\ti\000\234\003&\ti\ti\ti\ti\ti\ti\ti\007^\ti\ti\ti\ti\ti\ti\ti\ti\ti\ti\ti\000\234\ti\ti\007^\ti\ti\000U\006\026\005\222\003>\ti\ti\ti\ti\ti\000\234\ti\ti\ti\ti\tr\003.\t\166\ti\005\230\ti\ti\000U\ti\ti\ti\ti\ti\ti\ti\ti\ti\ti\ti\ti\ti\000U\ti\ti\ti\ti\003\221\003\221\023N\000U\002F\003\221\001\146\003\221\003\221\002\226\003\221\003\221\003\221\003\221\000\234\003\221\003\221\007\150\003\221\003\221\003\221\003\201\003\221\003\221\000U\003\221\001\150\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\000\234\000U\003\250\003\221\017\170\003\221\003\221\003\221\003\221\003\221\005a\003\221\003\221\003\221\002\230\003\221\003\221\003\221\003B\004\026\003\221\003\221\003\221\003\221\003\221\003\221\003\221\005\158\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\017\190\tj\t\158\006\025\003\221\003\221\001r\005\158\004\002\020\162\003\221\003\221\003\221\003\221\003\221\002\146\003\221\003\221\003\221\003\221\tr\005\169\t\166\003\221\0116\003\221\003\221\011B\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\003\221\005\169\003\221\003\221\003\221\003\221\003\209\003\209\016\234\016\222\004\002\003\209\004\"\003\209\003\209\003\229\003\209\003\209\003\209\003\209\001\170\003\209\003\209\006\021\003\209\003\209\003\209\016\234\003\209\003\209\001v\003\209\004\026\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\006\025\b\210\006\"\003\209\006\021\003\209\003\209\003\209\003\209\003\209\005n\003\209\003\209\003\209\003*\003\209\003\209\003\209\006*\002\178\003\209\003\209\003\209\003\209\003\209\003\209\003\209\000U\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\026\tj\t\158\003\229\003\209\003\209\t\030\t\"\001\162\024*\003\209\003\209\003\209\003\209\003\209\0032\003\209\003\209\003\209\003\209\tr\t*\t\166\003\209\011\186\003\209\003\209\000\234\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\003\209\006\021\003\209\003\209\003\209\003\209\b\229\b\229\000U\001\194\006V\b\229\000\234\b\229\b\229\007\157\b\229\b\229\b\229\b\229\014\158\b\229\b\229\006\021\b\229\b\229\b\229\001\198\b\229\b\229\tv\b\229\006E\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\002\226\006\006\r\174\b\229\r\186\b\229\b\229\b\229\b\229\b\229\000\234\b\229\b\229\b\229\012\198\b\229\b\229\b\229\tB\t\"\b\229\b\229\b\229\b\229\b\229\b\229\b\229\003\190\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\004\134\b\229\b\229\006E\b\229\b\229\012r\011\146\005\210\004f\b\229\b\229\b\229\b\229\b\229\007\157\b\229\b\229\b\229\b\229\b\229\002~\b\229\b\229\002\174\b\229\b\229\011\150\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\229\b\221\b\221\b\229\b\229\b\229\b\221\003\145\b\221\b\221\006n\b\221\b\221\b\221\b\221\005\158\b\221\b\221\005^\b\221\b\221\b\221\003\145\b\221\b\221\000\234\b\221\006\021\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\023\214\t\210\007\161\b\221\020r\b\221\b\221\b\221\b\221\b\221\014\158\b\221\b\221\b\221\012\222\b\221\b\221\b\221\004j\004\154\b\221\b\221\b\221\b\221\b\221\b\221\b\221\003\206\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\020\134\b\221\b\221\0042\b\221\b\221\n\210\003\189\005a\003\233\b\221\b\221\b\221\b\221\b\221\002f\b\221\b\221\b\221\b\221\b\221\004\173\b\221\b\221\015J\b\221\b\221\004y\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\221\b\237\b\237\b\221\b\221\b\221\b\237\000\234\b\237\b\237\007\153\b\237\b\237\b\237\b\237\005\202\b\237\b\237\007!\b\237\b\237\b\237\006\021\b\237\b\237\000\234\b\237\004\026\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\002\150\003\233\003B\b\237\024:\b\237\b\237\b\237\b\237\b\237\000\234\b\237\b\237\b\237\012\246\b\237\b\237\b\237\000\234\004y\b\237\b\237\b\237\b\237\b\237\b\237\b\237\t\178\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\015N\b\237\b\237\000\234\b\237\b\237\017^\017>\t\182\011\174\b\237\b\237\b\237\b\237\b\237\007\153\b\237\b\237\b\237\b\237\b\237\r\202\b\237\b\237\018\014\b\237\b\237\002\226\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\237\b\205\b\205\b\237\b\237\b\237\b\205\007\153\b\205\b\205\012\165\b\205\b\205\b\205\b\205\002\226\b\205\b\205\014\214\b\205\b\205\b\205\012\165\b\205\b\205\012v\b\205\005\214\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\002\158\017\138\012\134\b\205\012\150\b\205\b\205\b\205\b\205\b\205\017b\b\205\b\205\b\205\r\014\b\205\b\205\b\205\000\250\001\154\b\205\b\205\b\205\b\205\b\205\b\205\b\205\r\206\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\000\234\b\205\b\205\007R\b\205\b\205\018N\006Z\005\158\002\222\b\205\b\205\b\205\b\205\b\205\003\146\b\205\b\205\b\205\b\205\b\205\014\218\b\205\b\205\004\002\b\205\b\205\006\214\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\205\b\213\b\213\b\205\b\205\b\205\b\213\001\182\b\213\b\213\005n\b\213\b\213\b\213\b\213\006\226\b\213\b\213\015f\b\213\b\213\b\213\006\154\b\213\b\213\012\182\b\213\t\002\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\016:\003\198\012\206\b\213\012\230\b\213\b\213\b\213\b\213\b\213\018b\b\213\b\213\b\213\r\"\b\213\b\213\b\213\000\234\007\214\b\213\b\213\b\213\b\213\b\213\b\213\b\213\t\178\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\003\026\b\213\b\213\007\218\b\213\b\213\021f\014\138\r\n\011\194\b\213\b\213\b\213\b\213\b\213\017\250\b\213\b\213\b\213\b\213\b\213\015j\b\213\b\213\015\"\b\213\b\213\014\142\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\b\213\t\r\t\r\b\213\b\213\b\213\t\r\015&\t\r\t\r\018V\t\r\t\r\t\r\t\r\b\222\t\r\t\r\007a\t\r\t\r\t\r\t\006\t\r\t\r\rF\t\r\014\170\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\004\n\b\226\rZ\t\r\rn\t\r\t\r\t\r\t\r\t\r\018b\t\r\t\r\t\r\r6\t\r\t\r\t\r\000\234\015V\t\r\t\r\t\r\t\r\t\r\t\r\t\r\003\214\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\003\026\t\r\t\r\015Z\t\r\t\r\rB\016\218\005\210\011\230\t\r\t\r\t\r\t\r\t\r\001y\t\r\t\r\t\r\t\r\t\r\017\002\t\r\t\r\017\146\t\r\t\r\017F\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\t\r\b\253\b\253\t\r\t\r\t\r\b\253\016\030\b\253\b\253\019\018\b\253\b\253\b\253\b\253\012R\b\253\b\253\012R\b\253\b\253\b\253\014\174\b\253\b\253\000\234\b\253\000U\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\023\242\012V\003B\b\253\r\030\b\253\b\253\b\253\b\253\b\253\020N\b\253\b\253\b\253\rR\b\253\b\253\b\253\000\234\016\142\b\253\b\253\b\253\b\253\b\253\b\253\b\253\021\198\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\017\150\b\253\b\253\000\234\b\253\b\253\004B\020\138\021\202\018\146\b\253\b\253\b\253\b\253\b\253\016\"\b\253\b\253\b\253\b\253\b\253\003E\b\253\b\253\018B\b\253\b\253\001\170\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\253\b\245\b\245\b\253\b\253\b\253\b\245\005n\b\245\b\245\005e\b\245\b\245\b\245\b\245\014\198\b\245\b\245\015v\b\245\b\245\b\245\020R\b\245\b\245\002\130\b\245\018*\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\007A\014\202\003*\b\245\015z\b\245\b\245\b\245\b\245\b\245\007U\b\245\b\245\b\245\rf\b\245\b\245\b\245\000\234\021\130\b\245\b\245\b\245\b\245\b\245\b\245\b\245\022\254\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\004\186\b\245\b\245\018Z\b\245\b\245\004n\003*\023\002\021\006\b\245\b\245\b\245\b\245\b\245\020\218\b\245\b\245\b\245\b\245\b\245\004v\b\245\b\245\n\210\b\245\b\245\021Z\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\b\245\t\005\t\005\b\245\b\245\b\245\t\005\019\022\t\005\t\005\005n\t\005\t\005\t\005\t\005\0232\t\005\t\005\007Y\t\005\t\005\t\005\000\234\t\005\t\005\023\022\t\005\004\138\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\004\142\004\166\0052\t\005\005B\t\005\t\005\t\005\t\005\t\005\022\238\t\005\t\005\t\005\rz\t\005\t\005\t\005\025s\005F\t\005\t\005\t\005\t\005\t\005\t\005\t\005\000\234\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\005\178\t\005\t\005\023\030\t\005\t\005\007\162\t6\t\134\t\226\t\005\t\005\t\005\t\005\t\005\n\254\t\005\t\005\t\005\t\005\t\005\011\"\t\005\t\005\024\250\t\005\t\005\011Z\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\t\005\tU\tU\t\005\t\005\t\005\tU\011\166\tU\tU\0236\tU\tU\tU\tU\011\206\tU\tU\r\218\tU\tU\tU\022\242\tU\tU\r\226\tU\r\238\tU\tU\tU\tU\tU\tU\tU\tU\014\002\014\026\014&\tU\014J\tU\tU\tU\tU\tU\014r\tU\tU\tU\r\134\tU\tU\tU\023\"\015\138\tU\tU\tU\tU\tU\tU\tU\015\162\tU\tU\tU\tU\tU\tU\tU\tU\tU\tU\tU\024\254\tU\tU\015\190\tU\tU\015\234\016\014\016*\016>\tU\tU\tU\tU\tU\016\134\tU\tU\tU\tU\tU\016\146\tU\tU\017\006\tU\tU\017\n\tU\tU\tU\tU\tU\tU\tU\tU\tU\tU\tU\tU\tU\003\249\003\249\tU\tU\tU\003\249\017N\003\249\003\249\017r\003\249\003\249\003\249\003\249\017v\003\249\003\249\017\182\003\249\003\249\003\249\017\202\003\249\003\249\017\222\003\249\006\021\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\018\006\0182\018\198\003\249\018\202\003\249\003\249\003\249\003\249\003\249\007\234\003\249\003\249\003\249\006\021\003\249\003\249\003\249\018\210\018\214\003\249\003\249\003\249\003\249\003\249\003\249\003\249\018\222\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\018\234\tj\t\158\018\250\003\249\003\249\019\n\019N\019\142\019\146\003\249\003\249\003\249\003\249\003\249\019\218\003\249\003\249\003\249\003\249\tr\019\222\t\166\003\249\020\006\003\249\003\249\017\238\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\020\n\003\249\003\249\003\249\003\249\0021\0021\020:\017\246\020~\0021\020\146\002f\0021\020\174\004^\0021\t\130\0021\020\206\004\202\0021\020\226\0021\0021\0021\020\254\0021\0021\007]\t\142\004)\004\206\0021\0021\0021\0021\0021\t\150\0021\021\018\021\214\022\014\004\210\022b\0021\0021\0021\0021\0021\015\002\004\230\001\154\0021\004)\0021\0021\002Z\022\174\022\214\004\238\0021\0021\0021\006\218\006\222\006\238\022\226\012\170\006\246\0021\0021\0021\0021\0021\0021\0021\0021\0021\023Z\tj\t\158\023n\0021\0021\023v\023\138\023\198\023\222\006\250\004z\0021\0021\0021\023\230\0021\0021\0021\0021\012\178\024\018\012\254\0021\024\030\0021\0021\024\142\0021\0021\0021\0021\0021\0021\006\254\007\002\0021\0021\0021\007\018\002\242\t=\t=\0021\0021\0021\t=\024\150\002f\t=\024\174\004^\t=\t=\t=\024\206\004\202\t=\025\006\t=\t=\t=\025\014\t=\t=\025\026\t=\025.\004\206\t=\t=\t=\t=\t=\t=\t=\025>\025F\025O\004\210\025_\t=\t=\t=\t=\t=\025\127\004\230\001\154\t=\025\215\t=\t=\002Z\025\231\026+\004\238\t=\t=\t=\006\218\006\222\006\238\000\000\t=\006\246\t=\t=\t=\t=\t=\t=\t=\t=\t=\000\000\t=\t=\000\000\t=\t=\000\000\000\000\000\000\000\000\006\250\004z\t=\t=\t=\000\000\t=\t=\t=\t=\t=\000\000\t=\t=\000\000\t=\t=\000\000\t=\t=\t=\t=\t=\t=\006\254\007\002\t=\t=\t=\007\018\002\242\t9\t9\t=\t=\t=\t9\000\000\002f\t9\000\000\004^\t9\t9\t9\000\000\004\202\t9\000\000\t9\t9\t9\000\000\t9\t9\000\000\t9\000\000\004\206\t9\t9\t9\t9\t9\t9\t9\000\000\000\000\000\000\004\210\000\000\t9\t9\t9\t9\t9\000\000\004\230\001\154\t9\000\000\t9\t9\002Z\000\000\000\000\004\238\t9\t9\t9\006\218\006\222\006\238\000\000\t9\006\246\t9\t9\t9\t9\t9\t9\t9\t9\t9\000\000\t9\t9\000\000\t9\t9\000\000\000\000\000\000\000\000\006\250\004z\t9\t9\t9\000\000\t9\t9\t9\t9\t9\000\000\t9\t9\000\000\t9\t9\000\000\t9\t9\t9\t9\t9\t9\006\254\007\002\t9\t9\t9\007\018\002\242\002\209\002\209\t9\t9\t9\002\209\000\000\002f\002\209\000\000\004^\002\209\t\130\002\209\000\000\004\202\002\209\000\000\002\209\002\209\002\209\000\000\002\209\002\209\000\000\t\142\000U\004\206\002\209\002\209\002\209\002\209\002\209\t\150\002\209\000\000\000\000\000\000\004\210\003N\002\209\002\209\002\209\002\209\002\209\000\000\004\230\001\154\002\209\000\000\002\209\002\209\002Z\000\000\000\000\004\238\002\209\002\209\002\209\006\218\006\222\006\238\000\234\012\170\006\246\002\209\002\209\002\209\002\209\002\209\002\209\002\209\002\209\002\209\000\000\0129\002\209\000\000\002\209\002\209\000\000\001\246\000U\000U\006\250\004ztj\t\158\000U\000U\000U\000U\000U\000U\000U\000U\000U\007.\001\154\000U\000U\003\158\000\000\000\000\000U\tr\014\146\t\166\000\000\000U\014\182\014\206\014\238\000\000\000\000\000\000\000U\000U\000U\000\000\0129\000U\000U\000U\000U\000I\000U\000I\000\000\000I\000I\000I\000I\000I\000I\000I\000\000\000I\0129\000I\000I\003\226\000I\000I\001\246\000\000\000I\000I\000\000\000I\000I\006\166\000I\002f\000I\000I\000\000\001\250\000I\000I\005N\000I\000I\000I\000\000\000I\007b\000I\000I\000I\000I\000I\000I\000I\003B\000\000\000I\000I\0129\0061\000I\000I\000\000\000I\000I\000I\000I\000I\000I\000I\000I\000I\006\162\000\000\000\000\000\000\0129\000I\002Z\000I\000\000\000I\001\246\000\000\003-\000I\000I\000I\000I\000I\000I\000I\000I\000\000\000\000\001\250\000I\000\000\001\254\0061\000\n\000\222\000\000\003-\000\000\000I\007F\0176\000\n\003-\005\130\000I\000I\000I\000I\003-\003-\000I\000I\000I\000I\002i\002i\003-\003-\000\000\002i\000\234\002f\002i\000\n\004^\002i\000\n\002i\000\234\004\202\002i\000\000\002i\002i\002i\000\000\002i\002i\000\000\003-\000\000\004\206\002i\002i\002i\002i\002i\000\000\002i\000\000\000\234\003-\004\210\000\234\002i\002i\002i\002i\002i\000\000\004\230\006\242\002i\000\000\002i\002i\002Z\000\000\000\000\004\238\002i\002i\002i\006\218\006\222\006\238\000\000\000\000\006\246\002i\002i\002i\002i\002i\002i\002i\002i\002i\000\000\tj\t\158\000\000\002i\002i\000\000\006\130\005\190\000\000\006\250\004z\002i\002i\002i\000\000\002i\002i\002i\002i\tr\000\000\t\166\002i\000\000\002i\002i\006\134\002i\002i\002i\002i\002i\002i\006\254\007\002\002i\002i\002i\007\018\002\242\002\221\002\221\002i\002i\002i\002\221\000\000\006F\002\221\000\000\000\000\002\221\000\000\002\221\000\000\000\000\002\221\000\000\002\221\002\221\002\221\000\000\002\221\002\221\000\234\000\000\011\213\000\000\002\221\002\221\002\221\002\221\002\221\000\000\002\221\000\000\006!\000\000\000\000\000\000\002\221\002\221\002\221\002\221\002\221\011\213\011\213\000\000\002\221\011\213\002\221\002\221\020\194\000\000\004A\006!\002\221\002\221\002\221\006!\007\230\002f\006\017\003M\000\000\002\221\002\221\002\221\002\221\002\221\002\221\002\221\002\221\002\221\020\214\tj\t\158\004A\002\221\002\221\000\000\006\017\003M\000\000\000\234\006\017\002\221\002\221\002\221\006E\002\221\002\221\002\221\002\221\tr\007U\ttj\t\158\000\000\002\217\002\217\005^\0049\000\000\000\000\001\170\0049\002\217\002\217\002\217\023b\002\217\002\217\002\217\002\217\tr\000\000\t\166\002\217\000\000\002\217\002\217\000\000\002\217\002\217\002\217\002\217\002\217\002\217\000\000\023f\002\217\002\217\002\217\017z\000\000\002m\002m\002\217\002\217\002\217\002m\006M\005\190\002m\018*\018.\002m\000\000\002m\002Z\000\000\002m\000\000\002m\002m\002m\018F\002m\002m\000\000\000\000\006M\000\000\002m\002m\002m\002m\002m\000\000\002m\b\006\000\000\000\000\0041\000\000\002m\002m\002m\002m\002m\002f\000\000\006F\002m\000\000\002m\002m\000\000\000\000\000\000\000\000\002m\002m\002m\000\000\000\000\0041\000\000\021\182\000\234\002m\002m\002m\002m\002m\002m\002m\002m\002m\000\000\tj\t\158\0116\002m\002m\011B\000\000\000\000\021\186\000\000\005\202\002m\002m\002m\000\000\002m\002m\002m\002m\tr\000\000\t\166\002m\000\000\002m\002m\000\000\002m\002m\002m\002m\002m\002m\012b\006M\002m\002m\002m\005\190\000\000\002\213\002\213\002m\002m\002mt\234\000\000\002\213\002\213\002\213\002\213\000\000\t\234\002\213\002\213\002\213\002\213\002\213\000\000\000\000\002\213\002\213\002\213\000\000\011\221\003\029\003\029\002\213\002\213\002\213\003\029\000\000\000\000\003\029\000\000\000\000\003\029\000\000\003\029\000\000\000\000\t\242\000\000\003\029\003\029\003\029\000\000\003\029\003\029\000\000\000\000\011\217\000\000\n\022\n.\n6\n\030\n>\000\000\003\029\000\000\006\r\000\000\000\000\000\000\003\029\003\029\nF\nN\003\029\011\217\011\217\000\000\003\029\011\217\nV\003\029\000\000\000\000\000\000\006\r\003\029\003\029\000\234\006\r\000\000\000\000\000\000\000\000\000\000\003\029\003\029\t\250\n&\n^\nf\nv\003\029\003\029\000\000\000\000\003\029\000\000\003\029\n~\000\000\004\202\000\000\000\000\000\234\000\000\003\029\003\029\n\134\000\000\003\029\003\029\003\029\003\029\000\234\000\000\005\n\003\029\000\000\003\029\003\029\000\000\003\029\003\029\003\029\nn\003\029\003\029\000\000\005\022\003\029\n\142\003\029\000\000\011\217\002\161\002\161\003\029\n\150\n\158\002\161\007z\005\190\002\161\006\r\000\000\002\161\000\000\002\161\000\000\006\246\002\161\000\000\002\161\002\161\002\161\000\000\002\161\002\161\000\000\000\000\007~\000\000\002\161\002\161\002\161\002\161\002\161\000\000\002\161\006\250\000\000\000\000\000\000\000\000\002\161\002\161\002\161\002\161\002\161\000\000\002\138\006F\002\161\002:\002\161\002\161\000\000\000\000\000\000\000\000\002\161\002\161\002\161\006\254\000\000\000\000\000\000\000\000\000\234\002\161\002\161\t\250\002\161\002\161\002\161\002\161\002\161\002\161\000\000\000\000\002\161\000\000\002\161\002\161\000\000\000\000\000\000\000\000\000\000\002\142\002\161\002\161\002\161\000\000\002\161\002\161\002\161\002\161\000\000\000\000\000\000\002\161\002\154\002\161\002\161\000\000\002\161\002\161\002\161\002\161\002\161\002\161\000\000\000\000\002\161\002\161\002\161\000\000\000\000\002\137\002\137\002\161\002\161\002\161\002\137\000\000\002f\002\137\002\162\004^\002\137\000\000\002\137\000\000\000\000\002\137\000\000\002\137\002\137\002\137\000\000\002\137\002\137\000\000\000\000\004%\000\000\002\137\002\137\002\137\002\137\002\137\000\000\002\137\000\000\024\214\000\000\000\000\000\000\002\137\002\137\002\137\002\137\002\137\004%\004b\000\000\002\137\004%\002\137\002\137\000\000\000\000\000\000\006E\002\137\002\137\002\137\004r\000\000\000\000\000\000\000\000\000\000\002\137\002\137\t\250\002\137\002\137\002\137\002\137\002\137\002\137\000\000\000\000\002\137\006E\002\137\002\137\000\000\000\000\000\000\000\000\000\000\004z\002\137\002\137\002\137\000\000\002\137\002\137\002\137\002\137\000\000\000\000\000\000\002\137\006E\002\137\002\137\000\000\002\137\002\137\002\137\002\137\002\137\002\137\000\000\006E\002\137\002\137\002\137\000\000\015\022\002\149\002\149\002\137\002\137\002\137\002\149\000\000\002\226\002\149\000\000\000\000\002\149\000\000\002\149\000\000\000\000\t\242\000\000\002\149\002\149\002\149\000\000\002\149\002\149\000\000\000\000\000\000\000\000\002\149\002\149\002\149\n\030\002\149\000\000\002\149\000\000\000\000\000\000\000\000\000\000\002\149\002\149\002\149\002\149\002\149\000\000\bF\000\000\002\149\005^\002\149\002\149\000\000\000\000\000\000\007\198\002\149\002\149\002\149\b\198\000\000\007\206\000\000\000\000\000\000\002\149\002\149\t\250\n&\002\149\002\149\002\149\002\149\002\149\000\000\000\000\002\149\000\000\002\149\002\149\000\000\000\000\000\000\000\000\000\000\000\000\002\149\002\149\002\149\000\000\002\149\002\149\002\149\002\149\000\000\000\000\000\000\002\149\000\000\002\149\002\149\000\000\002\149\002\149\002\149\002\149\002\149\002\149\000\000\000\000\002\149\002\149\002\149\000\000\000\000\002\165\002\165\002\149\002\149\002\149\002\165\000\000\002f\002\165\000\000\000\000\002\165\000\000\002\165\000\000\000\000\002\165\000\000\002\165\002\165\002\165\000\000\002\165\002\165\000\000\000\000\000\000\000\000\002\165\002\165\002\165\002\165\002\165\000\000\002\165\000\000\000\000\000\000\000\000\000\000\002\165\002\165\002\165\002\165\002\165\000\000\t\170\005\202\002\165\000\000\002\165\002\165\000\000\000\000\000\000\000\000\002\165\002\165\002\165\012J\000\000\012Z\000\000\000\000\000\000\002\165\002\165\t\250\002\165\002\165\002\165\002\165\002\165\002\165\000\000\000\000\002\165\000\000\002\165\002\165\000\000\000\000\000\000\000\000\000\000\000\000\002\165\002\165\002\165\000\000\002\165\002\165\002\165\002\165\000\000\000\000\000\000\002\165\000\000\002\165\002\165\000\000\002\165\002\165\002\165\002\165\002\165\002\165\000\000\000\000\002\165\002\165\002\165\000\000\000\000\002\133\002\133\002\165\002\165\002\165\002\133\000\000\002f\002\133\000\000\000\000\002\133\000\000\002\133\000\000\000\000\002\133\000\000\002\133\002\133\002\133\000\000\002\133\002\133\000\000\000\000\000\000\000\000\002\133\002\133\002\133\002\133\002\133\000\000\002\133\000\000\000\000\000\000\000\000\000\000\002\133\002\133\002\133\002\133\002\133\000\000\r\002\005\202\002\133\000\000\002\133\002\133\000\000\000\000\000\000\000\000\002\133\002\133\002\133\r\022\000\000\r*\000\000\000\000\000\000\002\133\002\133\tt\242\000\000\002\145\002\145\002\145\000\000\002\145\002\145\000\000\000\000\000\000\000\000\002\145\002\145\002\145\n\030\002\145\000\000\002\145\000\000\000\000\000\000\000\000\000\000\002\145\002\145\002\145\002\145\002\145\000\000\000\000\000\000\002\145\000\000\002\145\002\145\000\000\000\000\000\000\000\000\002\145\002\145\002\145\000\000\000\000\000\000\000\000\000\000\000\000\002\145\002\145\t\250\n&\002\145\002\145\002\145\002\145\002\145\000\000\000\000\002\145\000\000\002\145\002\145\000\000\000\000\000\000\000\000\000\000\000\000\002\145\002\145\002\145\000\000\002\145\002\145\002\145\002\145\000\000\000\000\000\000\002\145\000\000\002\145\002\145\000\000\002\145\002\145\002\145\002\145\002\145\002\145\000\000\000\000\002\145\002\145\002\145\000\000\000\000\002\141\002\141\002\145\002\145\002\145\002\141\000\000\000\000\002\141\000\000\000\000\002\141\000\000\002\141\000\000\000\000\t\242\000\000\002\141\002\141\002\141\000\000\002\141\002\141\000\000\000\000\000\000\000\000\002\141\002\141\002\141\n\030\002\141\000\000\002\141\000\000\000\000\000\000\000\000\000\000\002\141\002\141\002\141\002\141\002\141\000\000\000\000\000\000\002\141\000\000\002\141\002\141\000\000\000\000\000\000\000\000\002\141\002\141\002\141\000\000\000\000\000\000\000\000\000\000\000\000\002\141\002\141\t\250\n&\002\141\002\141\002\141\002\141\002\141\000\000\000\000\002\141\000\000\002\141\002\141\000\000\000\000\000\000\000\000\000\000\000\000\002\141\002\141\002\141\000\000\002\141\002\141\002\141\002\141\000\000\000\000\000\000\002\141\000\000\002\141\002\141\000\000\002\141\002\141\002\141\002\141\002\141\002\141\000\000\000\000\002\141\002\141\002\141\000\000\000\000\002\181\002\181\002\141\002\141\002\141\002\181\000\000\000\000\002\181\000\000\000\000\002\181\000\000\002\181\000\000\000\000\t\242\000\000\002\181\002\181\002\181\000\000\002\181\002\181\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002\181\000\000\000\000\000\000\000\000\000\000\002\181\002\181\nF\nN\002\181\000\000\000\000\000\000\002\181\000\000\nV\002\181\000\000\000\000\000\000\000\000\002\181\002\181\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\t\250\n&\n^\nf\nv\002\181\002\181\000\000\000\000\002\181\000\000\002\181\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\n\134\000\000\002\181\002\181\002\181\002\181\000\000\000\000\000\000\002\181\000\000\002\181\002\181\000\000\002\181\002\181\002\181\nn\002\181\002\181\000\000\000\000\002\181\n\142\002\181\000\000\000\000\002\157\002\157\002\181\n\150\n\158\002\157\000\000\000\000\002\157\000\000\000\000\002\157\000\000\002\157\000\000\000\000\t\242\000\000\002\157\002\157\002\157\000\000\002\157\002\157\000\000\000\000\000\000\000\000\002\157\002\157\002\157\n\030\002\157\000\000\002\157\000\000\000\000\000\000\000\000\000\000\002\157\002\157\002\157\002\157\002\157\000\000\000\000\000\000\002\157\000\000\002\157\002\157\000\000\000\000\000\000\000\000\002\157\002\157\002\157\000\000\000\000\000\000\000\000\000\000\000\000\002\157\002\157\t\250\n&\002\157\002\157\002\157\002\157\002\157\000\000\000\000\002\157\000\000\002\157\002\157\000\000\000\000\000\000\000\000\000\000\000\000\002\157\002\157\002\157\000\000\002\157\002\157\002\157\002\157\000\000\000\000\000\000\002\157\000\000\002\157\002\157\000\000\002\157\002\157\002\157\002\157\002\157\002\157\000\000\000\000\002\157\002\157\002\157\000\000\000\000\002\153\002\153\002\157\002\157\002\157\002\153\000\000\000\000\002\153\000\000\000\000\002\153\000\000\002\153\000\000\000\000\t\242\000\000\002\153\002\153\002\153\000\000\002\153\002\153\000\000\000\000\000\000\000\000\002\153\002\153\002\153\n\030\002\153\000\000\002\153\000\000\000\000\000\000\000\000\000\000\002\153\002\153\002\153\002\153\002\153\000\000\000\000\000\000\002\153\000\000\002\153\002\153\000\000\000\000\000\000\000\000\002\153\002\153\002\153\000\000\000\000\000\000\000\000\000\000\000\000\002\153\002\153\t\250\n&\002\153\002\153\002\153\002\153\002\153\000\000\000\000\002\153\000\000\002\153\002\153\000\000\000\000\000\000\000\000\000\000\000\000\002\153\002\153\002\153\000\000\002\153\002\153\002\153\002\153\000\000\000\000\000\000\002\153\000\000\002\153\002\153\000\000\002\153\002\153\002\153\002\153\002\153\002\153\000\000\000\000\002\153\002\153\002\153\000\000\000\000\002\173\002\173\002\153\002\153\002\153\002\173\000\000\000\000\002\173\000\000\000\000\002\173\000\000\002\173\000\000\000\000\t\242\000\000\002\173\002\173\002\173\000\000\002\173\002\173\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\002\173\000\000\002\173\000\000\000\000\000\000\000\000\000\000\002\173\002\173\nF\nN\002\173\000\000\000\000\000\000\002\173\000\000\002\173\002\173\000\000\000\000\000\000\000\000\002\173\002\173\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\t\250\n&\n^\nf\002\173\002\173\002\173\000\000\000\000\002\173\000\000\002\173\002\173\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\002\173\000\000\002\173\002\173\002\173\002\173\000\000\000\000\000\000\002\173\000\000\002\173\002\173\000\000\002\173\002\173\002\173\nn\002\173\002\173\000\000\000\000\002\173\002\173\002\173\000\000\000\000\002\129\002\129\002\173\002\173\002\173\002\129\000\000\000\000\002\129\000\000\000\000\002\129\000\000\002\129\000\000\000\000\t\242\000\000\002\129\002\129\002\129\000\000\002\129\002\129\000\000\000\000\000\000\000\000\002\129\002\129\002\129\n\030\002\129\000\000\002\129\000\000\000\000\000\000\000\000\000\000\002\129\002\129\002\129\002\129\002\129\000\000\000\000\000\000\002\129\000\000\002\129\002\129\000\000\000\000\000\000\000\000\002\129\002\129\002\129\000\000\000\000\000\000\000\000\000\000\000\000\002\129\002\129\t\250\n&\002\129\002\129\002\129\002\129\002\129\000\000\000\000\002\129\000\000\002\129\002\129\000\000\000\000\000\000\000\000\000\000\000\000\002\129\002\129\002\129\000\000\002\129\002\129\002\129\002\129\000\000\000\000\000\000\002\129\000\000\002\129\002\129\000\000\002\129\002\129\002\129\002\129\002\129\002\129\000\000\000\000\002\129\002\129\002\129\000\000\000\000\002}\002}\002\129\002\129\002\129\002}\000\000\000\000\002}\000\000\000\000\002}\000\000\002}\000\000\000\000\t\242\000\000\002}\002}\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\002}\000\000\002}\000\000\000\000\000\000\000\000\000\000\002}\002}\nF\nN\002}\000\000\000\000\000\000\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\002}\002}\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\t\250\n&\n^\nf\002}\002}\002}\000\000\000\000\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\002}\000\000\002}\002}\002}\002}\000\000\000\000\000\000\002}\000\000\002}\002}\000\000\002}\002}\002}\nn\002}\002}\000\000\000\000\002}\002}\002}\000\000\000\000\002\229\002\229\002}\002}\002}\002\229\000\000\000\000\002\229\000\000\000\000\002\229\000\000\002\229\000\000\000\000\t\242\000\000\002\229\002\229\002\229\000\000\002\229\002\229\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\002\229\000\000\002\229\000\000\000\000\000\000\000\000\000\000\002\229\002\229\nF\nN\002\229\000\000\000\000\000\000\002\229\000\000\002\229\002\229\000\000\000\000\000\000\000\000\002\229\002\229\002\229\000\000\000\000\000\000\000\000\000\000\000\000\002\229\002\229\t\250\n&\n^\002\229\002\229\002\229\002\229\000\000\000\000\002\229\000\000\002\229\002\229\000\000\000\000\000\000\000\000\000\000\000\000\002\229\002\229\002\229\000\000\002\229\002\229\002\229\002\229\000\000\000\000\000\000\002\229\000\000\002\229\002\229\000\000\002\229\002\229\002\229\nn\002\229\002\229\000\000\000\000\002\229\002\229\002\229\000\000\000\000\002y\002y\002\229\002\229\002\229\002y\000\000\000\000\002y\000\000\000\000\002y\000\000\002y\000\000\000\000\t\242\000\000\002y\002y\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\002y\000\000\002y\000\000\000\000\000\000\000\000\000\000\002y\002y\nF\nN\002y\000\000\000\000\000\000\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\002y\002y\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002y\002y\t\250\n&\n^\nf\002y\002y\002y\000\000\000\000\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\002y\002y\000\000\002y\002y\002y\002y\000\000\000\000\000\000\002y\000\000\002y\002y\000\000\002y\002y\002y\nn\002y\002y\000\000\000\000\002y\002y\002y\000\000\000\000\002\177\002\177\002y\002y\002y\002\177\000\000\000\000\002\177\000\000\000\000\002\177\000\000\002\177\000\000\000\000\t\242\000\000\002\177\002\177\002\177\000\000\002\177\002\177\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\002\177\000\000\002\177\000\000\000\000\000\000\000\000\000\000\002\177\002\177\nF\nN\002\177\000\000\000\000\000\000\002\177\000\000\002\177\002\177\000\000\000\000\000\000\000\000\002\177\002\177\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\177\002\177\t\250\n&\n^\nf\002\177\002\177\002\177\000\000\000\000\002\177\000\000\002\177\002\177\000\000\000\000\000\000\000\000\000\000\000\000\002\177\002\177\002\177\000\000\002\177\002\177\002\177\002\177\000\000\000\000\000\000\002\177\000\000\002\177\002\177\000\000\002\177\002\177\002\177\nn\002\177\002\177\000\000\000\000\002\177\002\177\002\177\000\000\000\000\002\169\002\169\002\177\002\177\002\177\002\169\000\000\000\000\002\169\000\000\000\000\002\169\000\000\002\169\000\000\000\000\t\242\000\000\002\169\002\169\002\169\000\000\002\169\002\169\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\002\169\000\000\002\169\000\000\000\000\000\000\000\000\000\000\002\169\002\169\nF\nN\002\169\000\000\000\000\000\000\002\169\000\000\002\169\002\169\000\000\000\000\000\000\000\000\002\169\002\169\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\169\002\169\t\250\n&\n^\nf\002\169\002\169\002\169\000\000\000\000\002\169\000\000\002\169\002\169\000\000\000\000\000\000\000\000\000\000\000\000\002\169\002\169\002\169\000\000\002\169\002\169\002\169\002\169\000\000\000\000\000\000\002\169\000\000\002\169\002\169\000\000\002\169\002\169\002\169\nn\002\169\002\169\000\000\000\000\002\169\002\169\002\169\000\000\000\000\002\185\002\185\002\169\002\169\002\169\002\185\000\000\000\000\002\185\000\000\000\000\002\185\000\000\002\185\000\000\000\000\t\242\000\000\002\185\002\185\002\185\000\000\002\185\002\185\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002\185\000\000\000\000\000\000\000\000\000\000\002\185\002\185\nF\nN\002\185\000\000\000\000\000\000\002\185\000\000\nV\002\185\000\000\000\000\000\000\000\000\002\185\002\185\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\t\250\n&\n^\nf\nv\002\185\002\185\000\000\000\000\002\185\000\000\002\185\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\n\134\000\000\002\185\002\185\002\185\002\185\000\000\000\000\000\000\002\185\000\000\002\185\002\185\000\000\002\185\002\185\002\185\nn\002\185\002\185\000\000\000\000\002\185\n\142\002\185\000\000\000\000\002\189\002\189\002\185\n\150\n\158\002\189\000\000\000\000\002\189\000\000\000\000\002\189\000\000\002\189\000\000\000\000\t\242\000\000\002\189\002\189\002\189\000\000\002\189\002\189\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\002\189\000\000\002\189\000\000\000\000\000\000\000\000\000\000\002\189\002\189\nF\nN\002\189\000\000\000\000\000\000\002\189\000\000\nV\002\189\000\000\000\000\000\000\000\000\002\189\002\189\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\t\250\n&\n^\nf\nv\002\189\002\189\000\000\000\000\002\189\000\000\002\189\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\n\134\000\000\002\189\002\189\002\189\002\189\000\000\000\000\000\000\002\189\000\000\002\189\002\189\000\000\002\189\002\189\002\189\nn\002\189\002\189\000\000\000\000\002\189\002\189\002\189\000\000\000\000\002\193\002\193\002\189\n\150\n\158\002\193\000\000\000\000\002\193\000\000\000\000\002\193\000\000\002\193\000\000\000\000\t\242\000\000\002\193\002\193\002\193\000\000\002\193\002\193\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\002\193\000\000\002\193\000\000\000\000\000\000\000\000\000\000\002\193\002\193\nF\nN\002\193\000\000\000\000\000\000\002\193\000\000\nV\002\193\000\000\000\000\000\000\000\000\002\193\002\193\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\t\250\n&\n^\nf\nv\002\193\002\193\000\000\000\000\002\193\000\000\002\193\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\n\134\000\000\002\193\002\193\002\193\002\193\000\000\000\000\000\000\002\193\000\000\002\193\002\193\000\000\002\193\002\193\002\193\nn\002\193\002\193\000\000\000\000\002\193\002\193\002\193\000\000\000\000\002\233\002\233\002\193\n\150\n\158\002\233\000\000\000\000\002\233\000\000\000\000\002\233\000\000\002\233\000\000\000\000\t\242\000\000\002\233\002\233\002\233\000\000\002\233\002\233\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002\233\000\000\000\000\000\000\000\000\000\000\002\233\002\233\nF\nN\002\233\000\000\000\000\000\000\002\233\000\000\nV\002\233\000\000\000\000\000\000\000\000\002\233\002\233\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\233\t\250\n&\n^\nf\nv\002\233\002\233\000\000\000\000\002\233\000\000\002\233\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\233\n\134\000\000\002\233\002\233\002\233\002\233\000\000\000\000\000\000\002\233\000\000\002\233\002\233\000\000\n\170\002\233\n\178\nn\002\233\002\233\000\000\000\000\002\233\n\142\002\233\000\000\000\000\003!\003!\002\233\n\150\n\158\003!\000\000\000\000\003!\000\000\000\000\003!\000\000\003!\000\000\000\000\t\242\000\000\003!\003!\003!\000\000\003!\003!\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\003!\000\000\000\000\000\000\000\000\000\000\003!\003!\nF\nN\003!\000\000\000\000\000\000\003!\000\000\nV\003!\000\000\000\000\000\000\000\000\003!\003!\000\234\000\000\000\000\000\000\000\000\000\000\000\000\003!\003!\t\250\n&\n^\nf\nv\003!\003!\000\000\000\000\003!\000\000\003!\n~\000\000\000\000\000\000\000\000\000\000\000\000\003!\003!\n\134\000\000\003!\003!\003!\003!\000\000\000\000\000\000\003!\000\000\003!\003!\000\000\003!\003!\003!\nn\003!\003!\000\000\000\000\003!\n\142\003!\000\000\000\000\002\197\002\197\003!\n\150\n\158\002\197\000\000\000\000\002\197\000\000\000\000\002\197\000\000\002\197\000\000\000\000\t\242\000\000\002\197\002\197\002\197\000\000\002\197\002\197\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002\197\000\000\000\000\000\000\000\000\000\000\002\197\002\197\nF\nN\002\197\000\000\000\000\000\000\002\197\000\000\nV\002\197\000\000\000\000\000\000\000\000\002\197\002\197\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\t\250\n&\n^\nf\nv\002\197\002\197\000\000\000\000\002\197\000\000\002\197\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\n\134\000\000\002\197\002\197\002\197\002\197\000\000\000\000\000\000\002\197\000\000\002\197\002\197\000\000\n\170\002\197\n\178\nn\002\197\002\197\000\000\000\000\002\197\n\142\002\197\000\000\000\000\007\177\007\177\002\197\n\150\n\158\007\177\000\000\000\000\007\177\000\000\000\000\007\177\000\000\007\177\000\000\000\000\t\242\000\000\007\177\n\190\007\177\000\000\007\177\007\177\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\007\177\000\000\000\000\000\000\000\000\000\000\007\177\007\177\nF\nN\007\177\000\000\000\000\000\000\007\177\000\000\nV\007\177\000\000\000\000\000\000\000\000\007\177\007\177\000\234\000\000\000\000\000\000\000\000\000\000\000\000\007\177\007\177\t\250\n&\n^\nf\nv\007\177\007\177\000\000\000\000\007\177\000\000\007\177\n~\000\000\000\000\000\000\000\000\000\000\000\000\007\177\007\177\n\134\000\000\007\177\007\177\007\177\007\177\000\000\000\000\000\000\007\177\000\000\007\177\007\177\000\000\n\170\007\177\n\178\nn\007\177\007\177\000\000\000\000\007\177\n\142\007\177\000\000\000\000\003\001\003\001\007\177\n\150\n\158\003\001\000\000\000\000\003\001\000\000\000\000\003\001\000\000\003\001\000\000\000\000\t\242\000\000\003\001\003\001\003\001\000\000\003\001\003\001\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\003\001\000\000\000\000\000\000\000\000\000\000\003\001\003\001\nF\nN\003\001\000\000\000\000\000\000\003\001\000\000\nV\003\001\000\000\000\000\000\000\000\000\003\001\003\001\000\234\000\000\000\000\000\000\000\000\000\000\000\000\003\001\003\001\t\250\n&\n^\nf\nv\003\001\003\001\000\000\000\000\003\001\000\000\003\001\n~\000\000\000\000\000\000\000\000\000\000\000\000\003\001\003\001\n\134\000\000\003\001\003\001\003\001\003\001\000\000\000\000\000\000\003\001\000\000\003\001\003\001\000\000\n\170\003\001\n\178\nn\003\001\003\001\000\000\000\000\003\001\n\142\003\001\000\000\000\000\002\253\002\253\003\001\n\150\n\158\002\253\000\000\000\000\002\253\000\000\000\000\002\253\000\000\002\253\000\000\000\000\t\242\000\000\002\253\002\253\002\253\000\000\002\253\002\253\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002\253\000\000\000\000\000\000\000\000\000\000\002\253\002\253\nF\nN\002\253\000\000\000\000\000\000\002\253\000\000\nV\002\253\000\000\000\000\000\000\000\000\002\253\002\253\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\253\002\253\t\250\n&\n^\nf\nv\002\253\002\253\000\000\000\000\002\253\000\000\002\253\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\253\002\253\n\134\000\000\002\253\002\253\002\253\002\253\000\000\000\000\000\000\002\253\000\000\002\253\002\253\000\000\n\170\002\253\n\178\nn\002\253\002\253\000\000\000\000\002\253\n\142\002\253\000\000\000\000\003\005\003\005\002\253\n\150\n\158\003\005\000\000\000\000\003\005\000\000\000\000\003\005\000\000\003\005\000\000\000\000\t\242\000\000\003\005\003\005\003\005\000\000\003\005\003\005\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\003\005\000\000\000\000\000\000\000\000\000\000\003\005\003\005\nF\nN\003\005\000\000\000\000\000\000\003\005\000\000\nV\003\005\000\000\000\000\000\000\000\000\003\005\003\005\000\234\000\000\000\000\000\000\000\000\000\000\000\000\003\005\003\005\t\250\n&\n^\nf\nv\003\005\003\005\000\000\000\000\003\005\000\000\003\005\n~\000\000\000\000\000\000\000\000\000\000\000\000\003\005\003\005\n\134\000\000\003\005\003\005\003\005\003\005\000\000\000\000\000\000\003\005\000\000\003\005\003\005\000\000\n\170\003\005\n\178\nn\003\005\003\005\000\000\000\000\003\005\n\142\003\005\000\000\000\000\002\241\002\241\003\005\n\150\n\158\002\241\000\000\000\000\002\241\000\000\000\000\002\241\000\000\002\241\000\000\000\000\t\242\000\000\002\241\002\241\002\241\000\000\002\241\002\241\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002\241\000\000\000\000\000\000\000\000\000\000\002\241\002\241\nF\nN\002\241\000\000\000\000\000\000\002\241\000\000\nV\002\241\000\000\000\000\000\000\000\000\002\241\002\241\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\241\002\241\t\250\n&\n^\nf\nv\002\241\002\241\000\000\000\000\002\241\000\000\002\241\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\241\002\241\n\134\000\000\002\241\002\241\002\241\002\241\000\000\000\000\000\000\002\241\000\000\002\241\002\241\000\000\n\170\002\241\n\178\nn\002\241\002\241\000\000\000\000\002\241\n\142\002\241\000\000\000\000\002\245\002\245\002\241\n\150\n\158\002\245\000\000\000\000\002\245\000\000\000\000\002\245\000\000\002\245\000\000\000\000\t\242\000\000\002\245\002\245\002\245\000\000\002\245\002\245\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002\245\000\000\000\000\000\000\000\000\000\000\002\245\002\245\nF\nN\002\245\000\000\000\000\000\000\002\245\000\000\nV\002\245\000\000\000\000\000\000\000\000\002\245\002\245\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\245\002\245\t\250\n&\n^\nf\nv\002\245\002\245\000\000\000\000\002\245\000\000\002\245\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\245\002\245\n\134\000\000\002\245\002\245\002\245\002\245\000\000\000\000\000\000\002\245\000\000\002\245\002\245\000\000\n\170\002\245\n\178\nn\002\245\002\245\000\000\000\000\002\245\n\142\002\245\000\000\000\000\002\249\002\249\002\245\n\150\n\158\002\249\000\000\000\000\002\249\000\000\000\000\002\249\000\000\002\249\000\000\000\000\t\242\000\000\002\249\002\249\002\249\000\000\002\249\002\249\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002\249\000\000\000\000\000\000\000\000\000\000\002\249\002\249\nF\nN\002\249\000\000\000\000\000\000\002\249\000\000\nV\002\249\000\000\000\000\000\000\000\000\002\249\002\249\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\249\002\249\t\250\n&\n^\nf\nv\002\249\002\249\000\000\000\000\002\249\000\000\002\249\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\249\002\249\n\134\000\000\002\249\002\249\002\249\002\249\000\000\000\000\000\000\002\249\000\000\002\249\002\249\000\000\n\170\002\249\n\178\nn\002\249\002\249\000\000\000\000\002\249\n\142\002\249\000\000\000\000\003\r\003\r\002\249\n\150\n\158\003\r\000\000\000\000\003\r\000\000\000\000\003\r\000\000\003\r\000\000\000\000\t\242\000\000\003\r\003\r\003\r\000\000\003\r\003\r\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\003\r\000\000\000\000\000\000\000\000\000\000\003\r\003\r\nF\nN\003\r\000\000\000\000\000\000\003\r\000\000\nV\003\r\000\000\000\000\000\000\000\000\003\r\003\r\000\234\000\000\000\000\000\000\000\000\000\000\000\000\003\r\003\r\t\250\n&\n^\nf\nv\003\r\003\r\000\000\000\000\003\r\000\000\003\r\n~\000\000\000\000\000\000\000\000\000\000\000\000\003\r\003\r\n\134\000\000\003\r\003\r\003\r\003\r\000\000\000\000\000\000\003\r\000\000\003\r\003\r\000\000\n\170\003\r\n\178\nn\003\r\003\r\000\000\000\000\003\r\n\142\003\r\000\000\000\000\003\t\003\t\003\r\n\150\n\158\003\t\000\000\000\000\003\t\000\000\000\000\003\t\000\000\003\t\000\000\000\000\t\242\000\000\003\t\003\t\003\t\000\000\003\t\003\t\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\003\t\000\000\000\000\000\000\000\000\000\000\003\t\003\t\nF\nN\003\t\000\000\000\000\000\000\003\t\000\000\nV\003\t\000\000\000\000\000\000\000\000\003\t\003\t\000\234\000\000\000\000\000\000\000\000\000\000\000\000\003\t\003\t\t\250\n&\n^\nf\nv\003\t\003\t\000\000\000\000\003\t\000\000\003\t\n~\000\000\000\000\000\000\000\000\000\000\000\000\003\t\003\t\n\134\000\000\003\t\003\t\003\t\003\t\000\000\000\000\000\000\003\t\000\000\003\t\003\t\000\000\n\170\003\t\n\178\nn\003\t\003\t\000\000\000\000\003\t\n\142\003\t\000\000\000\000\003\017\003\017\003\t\n\150\n\158\003\017\000\000\000\000\003\017\000\000\000\000\003\017\000\000\003\017\000\000\000\000\t\242\000\000\003\017\003\017\003\017\000\000\003\017\003\017\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\003\017\000\000\000\000\000\000\000\000\000\000\003\017\003\017\nF\nN\003\017\000\000\000\000\000\000\003\017\000\000\nV\003\017\000\000\000\000\000\000\000\000\003\017\003\017\000\234\000\000\000\000\000\000\000\000\000\000\000\000\003\017\003\017\t\250\n&\n^\nf\nv\003\017\003\017\000\000\000\000\003\017\000\000\003\017\n~\000\000\000\000\000\000\000\000\000\000\000\000\003\017\003\017\n\134\000\000\003\017\003\017\003\017\003\017\000\000\000\000\000\000\003\017\000\000\003\017\003\017\000\000\n\170\003\017\n\178\nn\003\017\003\017\000\000\000\000\003\017\n\142\003\017\000\000\000\000\002\237\002\237\003\017\n\150\n\158\002\237\000\000\000\000\002\237\000\000\000\000\002\237\000\000\002\237\000\000\000\000\t\242\000\000\002\237\002\237\002\237\000\000\002\237\002\237\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002\237\000\000\000\000\000\000\000\000\000\000\002\237\002\237\nF\nN\002\237\000\000\000\000\000\000\002\237\000\000\nV\002\237\000\000\000\000\000\000\000\000\002\237\002\237\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002\237\002\237\t\250\n&\n^\nf\nv\002\237\002\237\000\000\000\000\002\237\000\000\002\237\n~\000\000\000\000\000\000\000\000\000\000\000\000\002\237\002\237\n\134\000\000\002\237\002\237\002\237\002\237\000\000\000\000\000\000\002\237\000\000\002\237\002\237\000\000\n\170\002\237\n\178\nn\002\237\002\237\000\000\000\000\002\237\n\142\002\237\000\000\000\000\002A\002A\002\237\n\150\nb\000\000\000\000\002]\002]\002A\002A\002A\002]\000\000\000\000\002]\000\000\000\000\002]\000\000\002]\000\000\000\000\t\242\000\000\002]\002]\002]\000\000\002]\002]\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002]\000\000\000\000\000\000\000\000\000\000\002]\002]\nF\nN\002]\000\000\000\000\000\000\002]\000\000\nV\002]\000\000\000\000\000\000\000\000\002]\002]\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002]\002]\t\250\n&\n^\nf\nv\002]\002]\000\000\000\000\002]\000\000\002]\n~\000\000\000\000\000\000\000\000\000\000\000\000\002]\002]\n\134\000\000\002]\002]\014z\002]\000\000\000\000\000\000\002]\000\000\002]\002]\000\000\n\170\002]\n\178\nn\002]\002]\000\000\000\000\002]\n\142\002]\000\000\000\000\002Y\002Y\002]\n\150\n\158\002Y\000\000\000\000\002Y\000\000\000\000\002Y\000\000\002Y\000\000\000\000\t\242\000\000\002Y\002Y\002Y\000\000\002Y\002Y\000\000\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\002Y\000\000\000\000\000\000\000\000\000\000\002Y\002Y\nF\nN\002Y\000\000\000\000\000\000\002Y\000\000\nV\002Y\000\000\000\000\000\000\000\000\002Y\002Y\000\234\000\000\000\000\000\000\000\000\000\000\000\000\002Y\002Y\t\250\n&\n^\nf\nv\002Y\002Y\000\000\000\000\002Y\000\000\002Y\n~\000\000\000\000\000\000\000\000\000\000\000\000\002Y\002Y\n\134\000\000\002Y\002Y\002Y\002Y\000\000\000\000\000\000\002Y\000\000\002Y\002Y\000\000\n\170\002Y\n\178\nn\002Y\002Y\000\000\000\000\002Y\n\142\002Y\000\000\000\000\002M\002M\002Y\n\150\nbb\000\000\000\254\000\000\000\006\002Q\002Q\002Q\002b\002f\000\000\004\194\004^\000\000\000\000\000\000\000\000\004\202\001\002\000\000\000\000\000\000\004f\007A\000\000\000\000\000\000\000\000\007A\004\234\001\n\0076\007:\001\022\001\026\000\000\000\000\000\000\004\250\000\000\004\210\000\000\023>\000\000\007\170\007\174\016Z\006\182\004\230\006\190\006\194\000\000\001.\000\000\002Z\000\000\007U\004\238\000\000\007U\000\000\006\218\006\222\006\238\007\n\007%\006\246\007A\000\000\0012\0016\001:\001>\001B\007A\002\130\007\178\001F\000\000\007A\004\186\001J\000\000\007\186\t\018\tN\006\250\004z\007A\007A\001N\000\000\000\000\000\000\000\000\007U\001R\000\000\000\000\000\000\000\000\000\234\000\000\000\000\000\000\000\000\001z\004j\007U\000\000\006\254\007\002\000\000\001~\007A\014\130\002\242\t^\000\000\000\000\001\134\001\138\000\254\007A\000\006\000\000\000\000\000\000\002b\002f\000\000\004\194\004^\023\n\007U\000\000\000\000\004\202\001\002\000\000\000\000\000\234\0072\000\000\006E\b\162\000\000\000\000\bn\004\234\001\n\0076\007:\001\022\001\026\b\174\000\000\000\000\004\250\b\186\004\210\007U\007>\000\000\007\170\007\174\000\000\006\182\004\230\006\190\006\194\000\234\001.\025\143\002Z\000\000\000\000\004\238\000\000\006E\000\000\006\218\006\222\006\238\007\n\b\162\006\246\006E\bn\0012\0016\001:\001>\001B\000\000\b\174\007\178\001F\006E\b\186\000\000\001J\000\000\007\186\t\018\tN\006\250\004z\000\000\000\000\001N\000\000\000\000\000\000\000\000\b\162\001R\007\154\bn\023\014\007U\000\000\000\000\007U\001\218\b\174\001z\004\138\000\000\b\186\006\254\007\002\000\000\001~\001\222\014\130\002\242\t^\000\000\002\130\001\134\001\138\000\014\000\018\000\022\000\026\000\030\000\000\000\"\000&\000*\000.\0002\005^\0006\000:\000\000\005>\000>\007U\000\000\t\014\000B\005\146\001\182\000\000\000\000\000F\000\000\002Z\000\000\000\000\007U\000J\007U\000N\000R\000V\000Z\000^\000b\000f\000\000\000\000\000\000\000j\000n\000\000\000r\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\150\007U\014R\000\000\000\000\000\000\000z\000\000\000\000\000~\000\130\007U\000\000\000\000\000\000\000\000\000\134\000\138\000\142\000\234\000\000\000\000\000\000\000\000\000\146\000\150\000\154\000\158\007U\000\162\000\166\000\170\000\000\000\000\000\000\000\174\000\178\000\182\000\000\000\000\011q\000\186\000\006\000\190\000\194\000\242\002b\002f\002j\004\194\004^\000\198\000\000\000\202\000\000\004\202\000\000\000\000\005V\000\206\000\210\000\214\011q\b\162\000\000\016R\bn\004\206\006E\004\242\004\246\000\000\000\000\b\174\005Z\000\000\004\250\b\186\004\210\000\000\005~\000\000\006\174\006\178\000\000\006\182\004\230\006\190\006\194\000\000\000\000\016J\002Z\012!\000\000\004\238\016b\006E\000\000\006\218\006\222\006\238\007\n\000\000\006\246\012!\000\000\006E\006E\006E\000\000\000\000\016j\006E\007\178\000\000\000\000\0045\000\000\006E\006E\007\186\t\018\tN\006\250\004z\016z\016\162\000\000\000\000\011q\011q\000\000\012!\000\000\000\000\0045\000\000\000\000\000\000\0045\000\000\000\000\006E\000\000\000\000\016\202\020*\006\254\007\002\023&\000\129\000\000\007\018\002\242\t^\000\129\000\000\002f\000\129\000\000\004^\012!\t\130\000\000\012!\004\202\000\000\000\000\000\129\000\000\000\129\000\000\000\129\005^\000\234\t\142\000\000\004\206\000\000\000\000\000\000\000\000\000\000\t\150\000\129\000\000\000\000\000\000\004\210\000\000\000\129\003\185\000\000\000\000\000\129\001\209\004\230\001\154\000\129\000\000\001\209\000\129\002Z\000\000\tZ\004\238\000\129\000\129\000\129\006\218\006\222\006\238\000\000\012\170\006\246\000\129\000\129\000\000\b\162\000\000\000\000\bn\000\129\000\000\000\000\000\000\000\129\000\000\b\174\000\000\002\138\000\000\b\186\002:\006\250\004z\000\129\000\129\000\000\001\209\000\129\000\129\000\000\000\000\000\000\000\000\001\209\000\000\000\000\000\000\000\129\001\209\001\209\000\234\000\000\000\000\000\129\000\129\006\254\007\002\001\209\001\209\000\000\007\018\002\242\000\149\000\129\000\129\000\000\002\142\000\149\000\000\002f\000\149\000\000\004^\000\000\t\130\000\000\000\000\004\202\000\000\002\154\000\149\024\166\000\149\001\209\000\149\000\000\006\233\t\142\000\000\004\206\000\000\000\000\001\209\000\000\000\000\t\150\000\149\000\000\000\000\000\000\004\210\000\000\000\149\000\000\000\000\002\162\000\149\0071\004\230\001\154\000\149\000\000\0071\000\149\002Z\024\178\006\233\004\238\000\149\000\149\000\149\006\218\006\222\006\238\000\000\012\170\006\246\000\149\000\149\000\000\011\242\000\000\024R\006\233\000\149\000\000\000\000\000\000\000\149\000\000\006\233\000\000\000\000\000\000\006\233\000\000\006\250\004z\000\149\000\149\000\241\0071\000\149\000\149\000\000\000\241\000\000\000\000\0071\000\000\000\000\000\000\000\149\0071\0071\000\234\000\000\000\000\000\149\000\149\006\254\007\002\0071\0071\000\000\007\018\002\242\000\006\000\149\000\149\000\242\002b\002f\002j\004\194\004^\000\000\000\000\000\000\000\000\004\202\000\000\000\000\011\153\000\241\0071\017\130\004v\0071\000\000\000\000\000\241\004\206\002f\004\242\004\246\000\241\0071\000\000\005Z\000\000\004\250\000\000\004\210\000\000\005~\000\241\006\174\006\178\000\000\006\182\004\230\006\190\006\194\000\000\000\000\016J\002Z\000\000\000\000\004\238\016b\020B\000\000\006\218\006\222\006\238\007\n\000\000\006\246\000\000\000\241\021B\002\214\021F\000\000\000\000\016j\002Z\007\178\000\241\025\154\000\000\000\000\000\000\021^\007\186\t\018\tN\006\250\004z\016z\016\162\000\000\012\153\025\199\015B\000\000\000\000\012\153\000\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021n\000\000\000\000\000\000\020*\006\254\007\002\014\150\000\000\000\000\007\018\002\242\t^\000\006\000\000\000\000\000\242\002b\002f\002j\004\194\004^\006\249\000\000\000\000\000\000\004\202\000\000\000\000\025\254\012\153\000\000\000\000\014\186\000\000\000\000\006\249\012\153\004\206\bn\004\242\004\246\012\153\012\153\000\234\005Z\006\249\004\250\000\000\004\210\006\249\005~\012\153\006\174\006\178\000\245\006\182\004\230\006\190\006\194\017\162\000\000\016J\002Z\000\000\000\000\004\238\016b\000\000\000\000\006\218\006\222\006\238\007\n\000\000\006\246\000\000\012\153\000\000\000\000\000\000\000\000\000\000\016j\000\000\007\178\012\153\025\154\000\000\000\000\000\000\000\000\007\186\t\018\tN\006\250\004z\016z\016\162\017\230\000\000\012Y\000\000\000\000\000\000\000\000\016J\000\254\000\000\000\000\000\000\016b\000\000\005\006\002f\011\018\000\000\004^\020*\006\254\007\002\018\"\004\202\001\002\007\018\002\242\t^\004f\003-\000\000\000\000\003-\000\000\000\000\001\006\001\n\001\014\005&\001\022\001\026\000\000\000\000\000\000\000\000\000\000\000\000\000\245\005*\000\000\001&\011v\000\000\000\n\005\"\001\154\018\134\001\"\001.\000\000\002Z\000\000\000\000\007\198\003-\000\000\000\000\007\202\003-\007\206\b\n\003-\006\246\000\000\003-\0012\0016\001:\001>\001B\000\234\003-\000\000\001F\b\018\000\000\000\000\001J\000\n\000\000\000\000\000\000\006\250\004z\000\000\bR\001N\003-\000\000\000\000\003b\000\000\001R\003-\003-\000\000\b\157\003-\000\000\003-\000\000\000\000\001z\004j\011~\000\234\006\254\000\000\000\000\001~\000\000\001\130\002\242\000\254\000\000\b\157\001\134\001\138\000\000\005\006\002f\r\250\000\000\004^\011\130\000\000\000\000\003-\004\202\001\002\000\000\000\000\b\157\004f\000\000\007\t\000\000\000\000\000\000\000\000\001\006\001\n\001\014\005&\001\022\001\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005*\007\t\001&\011v\007\t\000\000\005\"\001\154\000\000\000\234\001.\000\000\002Z\000\000\000\000\007\198\000\000\000\000\000\000\007\202\000\000\007\206\b\n\b\157\006\246\000\000\000\000\0012\0016\001:\001>\001B\000\000\007\165\000\000\001F\b\018\b\157\000\000\001J\000\234\000\000\000\000\000\000\006\250\004z\000\000\bR\001N\000\000\000\000\000\000\000\000\b\162\001R\000\000\bn\011\134\000\000\000\000\000\000\000\000\000\000\b\174\001z\004j\t\201\b\186\006\254\000\000\000\000\001~\000\000\001\130\002\242\000\254\000\000\000\000\001\134\001\138\000\000\005\006\002f\014\018\b\162\004^\000\000\bn\000\000\000\000\004\202\001\002\007\t\000\000\b\174\004f\t\201\000\000\b\186\000\000\000\000\000\000\001\006\001\n\001\014\005&\001\022\001\026\000\000\000\000\t\201\000\000\000\000\t\201\011\222\005*\000\000\001&\011v\000\000\t\201\005\"\001\154\000\234\t\201\001.\000\000\002Z\000\000\000\000\007\198\000\000\000\000\000\000\007\202\000\000\007\206\b\n\000\000\006\246\000\000\000\000\0012\0016\001:\001>\001B\000\000\000\000\000\000\001F\b\018\000\000\011\254\001J\000\000\001\177\000\000\000\000\006\250\004z\001\177\bR\001N\001\177\000\000\000\000\012\006\000\000\001R\012\018\000\000\000\000\000\000\001\177\000\000\000\234\012\030\001\177\001z\004j\012*\000\000\006\254\000\000\000\000\001~\000\000\001\130\002\242\001\177\000\000\001\177\001\134\001\138\001\177\001\177\000\000\001\177\001\177\005u\005u\001\177\000\000\001\177\000\000\006\253\001\177\000\000\000\000\000\000\001\177\001\177\001\177\001\177\001\177\000\000\001\177\005u\016\006\006\253\000\000\001\177\bn\005u\001\177\001\218\000\000\001\177\000\000\006\253\001\238\001\177\001\177\006\253\001\177\001\222\005u\001\177\001\177\005u\005u\001\177\001\177\001\177\000\000\001\177\001\177\000\000\000\000\001\177\001\177\004\130\001\177\001\177\001\177\001\177\000\000\000\000\005>\000\000\000\000\000\000\001\177\000\000\005\146\001\182\000\000\001\177\000\000\000\000\002Z\000\000\000\000\000\000\000\000\001\177\001\177\000\000\001\177\001\177\000\000\001\177\000\000\000\000\000\000\000\000\000\000\bB\000\000\000\000\000\000\000\000\000\000\001\177\001\177\000\000\001\177\001\177\005\150\001\177\000\000\001\177\000\000\001\177\000\000\001\177\000\000\001\177\012!\012!\000\000\000\000\000\000\012!\000\000\012!\012!\000\000\000\000\000\000\003-\003-\000\000\000\000\012!\000\000\012!\012!\012!\011F\012!\012!\000\000\000\000\000\000\001\166\001\170\011\158\003-\000\000\000\000\000\000\012!\000\000\003-\000\n\000\000\000\000\012!\012!\000\000\003-\012!\004\014\001\190\012!\012!\003-\000\000\012!\003-\003-\001\202\000\000\012!\012!\012!\000\000\000\000\000\000\000\000\000\000\000\234\012!\012!\001\206\002J\000\000\000\000\002R\012!\002Z\002\182\002\194\012!\000\000\000\000\012!\002\206\000\000\000\000\000\000\001U\000\000\012!\012!\012!\020^\012!\012!\000\000\000\000\000\000\000\000\000\242\002\210\000\000\002j\012!\000\000\012!\012!\000\000\000\000\002N\012!\000\000\025\254\000\000\000\000\012!\000\000\b=\b=\012!\012!\012!\b=\000\000\001\170\b=\000\000\000\000\005Z\004u\000\000\020\182\000\000\b=\005~\b=\b=\b=\016J\b=\b=\006\213\022>\016b\000\000\016J\000\000\000\000\000\000\000\000\016b\b=\021&\0216\000\000\000\000\000\000\b=\b=\000\000\000\000\b=\000\000\000\000\002\178\b=\016j\000\234\b=\000\000\025\154\006\213\000\000\b=\b=\b=\000\000\000\000\001U\000\000\016z\016\162\b=\b=\012Y\006\213\000\000\021\226\bn\b=\b=\000\000\000\000\003\n\000\000\006\213\b=\004u\000\000\006\213\000\000\020*\000\000\b=\b=\b=\000\000\b=\b=\000\000\000\234\b\162\000\000\000\000\bn\n\238\000\000\b=\000\000\b=\b=\b\174\000\000\000\000\b=\b\186\000\000\000\000\000\000\b=\000\000\000\000\000\000\b=\b=\b=\t\225\000\000\000\000\t\225\006\241\000\000\t\225\t\225\000\000\000\000\t\225\000\000\t\225\000\000\000\000\t\225\000\000\000\000\b\162\t\225\t\225\bn\t\225\t\225\000\000\t\225\001\166\001\170\006\241\000\000\t\225\016\022\006\241\t\225\000\000\000\000\000\000\000\000\001\218\000\000\000\000\t\225\000\000\t\225\001\174\018\206\t\225\t\225\001\222\000\000\000\000\000\000\t\225\018\226\000\000\t\225\017z\000\000\t\225\t\225\000\000\t\225\000\000\t\225\t\225\000\000\001\206\018\238\018.\000\000\002R\005>\002Z\002\182\002\194\000\000\t\225\005\146\001\182\018\254\000\000\000\000\000\000\002Z\t\225\t\225\000\000\012\137\t\225\000\000\t\225\000\000\012\137\000\000\000\000\b.\002\210\000\000\000\000\000\000\000\000\000\000\t\225\t\225\000\000\t\225\t\225\000\000\t\225\000\000\t\225\005\150\t\225\000\000\t\225\000\000\t\225\bA\bA\000\000\000\000\000\000\bA\000\000\001\170\bA\000\000\000\000\000\000\000\000\000\000\012\137\000\000\bA\000\000\bA\bA\bA\012\137\bA\bA\000\000\000\000\012\137\012\137\000\234\000\000\000\000\000\000\000\000\000\000\bA\012\137\012\137\000\000\000\000\000\000\bA\bA\000\000\000\000\bA\000\000\000\000\002\178\bA\000\000\000\000\bA\000\000\000\000\000\000\000\000\bA\bA\bA\000\000\000\000\012\137\000\000\000\000\000\000\bA\bA\000\000\000\000\000\000\012\137\000\000\bA\bA\003-\000\000\024>\003-\000\000\bA\000\000\000\000\003-\000\000\000\000\000\000\bA\bA\bA\000\000\bA\bA\000\000\000\000\003-\000\000\000\000\000\000\000\n\000\000\bA\003-\bA\bA\000\000\003-\003-\bA\003-\003-\000\000\003-\bA\003-\003-\000\000\bA\bA\bA\003-\003-\000\000\003-\000\000\003-\000\234\003-\003-\003-\003-\000\n\003-\003-\006\198\000\000\003-\000\000\003-\000\000\015\130\000\n\003-\003-\000\000\003-\003-\003-\003-\000\000\000\000\000\000\003-\003-\003-\003-\003-\000\000\000\234\003-\003-\003-\003-\003-\003-\000\000\003-\000\000\000\234\000\000\000\000\000\000\000\000\000\000\003-\003-\003-\003-\000\000\000\000\000\000\003-\003-\003-\003-\003-\000\000\015\178\000\000\000\000\006\025\003-\000\006\000\000\000\000\000\000\002b\002f\000\000\004\194\004^\003-\000\000\000\000\000\000\004\202\000\000\000\000\003-\003-\003-\000\000\006\025\003-\003-\003-\000\000\004\206\000\000\004\242\004\246\000\000\000\000\000\000\006\169\000\000\004\250\006\169\004\210\000\000\000\000\000\000\006\174\006\178\011:\006\182\004\230\006\190\006\194\000\000\001\166\001\170\002Z\006\169\006\169\004\238\006\169\006\169\000\000\006\218\006\222\006\238\007\n\000\000\006\246\000\000\000\000\000\000\001\174\001\190\000\000\000\000\000\000\000\000\007\178\006\169\000\000\001\202\000\000\b\154\000\000\007\186\t\018\tN\006\250\004z\000\000\000\000\000\000\000\000\001\206\002J\006\169\000\000\002R\000\000\002Z\002\182\002\194\b\158\000\000\000\000\000\000\002\206\000\000\000\000\000\000\000\000\006\254\007\002\006\025\b\157\b\157\007\018\002\242\t^\b\157\000\000\000\000\b\157\002\210\000\000\006\169\000\000\006\169\000\000\000\000\003b\000\000\b\157\b\157\b\157\000\000\b\157\b\157\000\000\bf\000\234\000\000\006\169\006\169\000\000\000\000\000\000\006\169\b\157\006\169\000\000\000\000\000\000\006\169\b\157\b\157\000\000\000\000\b\157\002\238\000\000\002\242\b\157\000\000\000\000\b\157\000\000\000\000\000\000\000\000\b\157\b\157\b\157\000\000\000\000\000\000\000\000\000\000\000\000\b\157\b\157\000\000\000\000\000\000\b\162\000\000\b\157\bn\000\000\000\000\b\157\000\000\000\000\b\157\b\174\000\000\000\000\000\000\b\186\000\000\b\157\b\157\b\157\000\000\b\157\b\157\000\000\000\000\000\000\000\000\b\029\000\000\000\000\000\000\b\157\000\242\b\157\b\157\001\230\b\161\b\161\b\157\000\000\000\000\b\161\000\000\b\157\b\161\016\206\000\000\b\157\b\157\b\157\000\000\000\000\003r\000\000\b\161\b\161\b\161\011F\b\161\b\161\000\000\005Z\000\000\001\166\001\170\000\000\000\000\016\210\000\000\000\000\b\161\000\000\000\000\000\000\000\000\000\000\b\161\b\161\016J\000\000\b\161\001\174\001\190\016b\b\161\000\000\000\000\b\161\000\000\000\000\001\202\000\000\b\161\b\161\b\161\000\000\000\000\001\210\000\000\017\022\000\000\b\161\b\161\001\206\002J\000\000\000\000\002R\b\161\002Z\002\182\002\194\b\161\016z\017&\b\161\002\206\b\029\b\029\000\000\000\000\000\000\b\161\b\161\b\161\000\000\b\161\b\161\000\000\000\000\000\000\000\000\000\000\002\210\0172\005\189\b\161\000!\b\161\b\161\000\000\000!\000!\b\161\000!\000!\000\000\000\000\b\161\000\000\000!\000\000\b\161\b\161\bbn}\000\000\000\000\000\000\011}\011}\000\000\011}\011}\000\000\000\000\012\133\000\000\011}\000\000\000\000\011\129\011\129\005\193\000\000\012\133\011\129\011\129\011\129\000\000\011}\000\000\011}\011}\000\000\000\000\000\000\000\000\000\000\011}\000\000\011}\000\000\000\000\000\000\011}\011}\000\000\011}\011}\011}\011}\000\000\000\000\000\000\011}\000\000\000\000\011}\000\000\000\000\000\000\011}\011}\011}\011}\000\000\011}\000\000\000\000\000\000\000\000\000\000\000\000\005U\005\190\000\000\011}\000\000\005U\003\237\012i\005U\000\000\011}\011}\011}\011}\011}\000\000\000\000\000\000\005U\000\000\000\000\000\000\005U\000\000\000\000\003\237\000\000\002!\002!\003\237\000\000\000\000\002!\000\000\005U\002!\000\000\011}\011}\000\000\005U\006F\011}\011}\011}\002!\002!\002!\005U\002!\002!\005U\000\000\000\000\000\000\000\000\005U\005U\000\234\000\000\000\000\002!\000\000\000\000\000\000\000\000\000\000\002!\003\134\000\000\000\000\002!\005U\000\000\000\000\002!\005U\000\000\002!\000\000\000\000\012i\012i\002!\002!\002!\005U\005U\000\000\000\000\005U\005U\002!\002!\003\237\000\000\000\000\000\000\000\000\002!\012i\000\000\012i\002!\000\000\000\000\002!\005U\000\000\003\237\000\000\000\000\003\237\002!\002!\002!\000\000\002!\002!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002!\000\242\002!\002!\002j\002\021\002\021\002!\000\000\000\000\002\021\000\000\002!\002\021\011\153\000\000\003\142\002!\002!\000\000\000\000\000\000\000\000\002\021\002\021\002\021\000\000\002\021\002\021\000\000\005Z\000\000\005\253\005\253\000\000\000\000\005~\000\000\000\000\002\021\000\000\000\000\000\000\000\000\022>\002\021\003\134\016J\002\198\002\021\005\253\000\000\016b\002\021\000\000\000\000\002\021\000\000\000\000\000\000\000\000\002\021\002\021\002\021\000\000\000\000\000\000\000\000\016j\000\000\002\021\002\021\005\253\005\253\000\000\000\000\005\253\002\021\005\253\005\253\005\253\002\021\016z\016\162\002\021\005\253\000\000\007\005\000\000\000\000\000\000\002\021\002\021\002\021\000\000\002\021\002\021\000\000\000\000\000\000\000\000\000\000\005\253\020*\000\000\002\021\007\005\002\021\002\021\007\005\000\000\000\000\002\021\011\189\000\000\000\000\011\189\002\021\000\000\000\000\000\000\002\021\002\021\002\021\t\237\000\000\011\189\t\237\000\000\000\000\005\006\002f\000\000\000\000\004^\000\000\t\026\000\000\002\186\004\202\005\253\000\000\011\189\t\237\t\237\000\234\t\237\t\237\011\189\t>\000\000\000\000\000\000\000\000\005\n\000\000\011\189\n\222\000\000\011\189\000\000\000\000\000\000\000\000\011\189\t\237\000\000\005\022\000\000\000\000\005\"\001\154\000\000\000\000\000\000\000\000\002Z\000\000\000\000\007\198\011\189\000\000\t\237\007\202\011\189\007\206\b\n\011&\006\246\b\162\000\000\000\000\bn\000\000\011\189\011\189\000\000\007\005\011\189\b\174\b\018\000\000\006\145\b\186\025\194\006\145\000\000\000\000\006\250\004z\000\000\bR\t\237\000\000\t\237\011\189\000\000\000\000\000\000\000\000\000\000\006\145\006\145\000\000\006\145\006\145\t\237\000\000\000\000\t\237\t\237\000\000\006\254\000\000\t\237\000\000\t\237\000\000\002\242\t\233\t\237\000\000\t\233\006\145\000\000\005\006\002f\000\000\000\000\004^\000\000\000\000\000\000\000\000\004\202\000\000\000\000\000\000\t\233\t\233\006\145\t\233\t\233\000\000\000\000\000\000\000\000\000\000\000\000\005\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\233\000\000\005\022\000\000\000\000\005\"\001\154\003\241\012i\000\000\006\145\002Z\006\145\000\000\007\198\000\000\000\000\t\233\007\202\000\000\007\206\b\n\000\000\006\246\006\145\000\000\003\241\bn\006\145\000\000\003\241\000\000\006\145\000\000\006\145\b\018\000\000\000\000\006\145\000\000\002\017\002\017\000\000\006\250\004z\002\017\bR\t\233\002\017\t\233\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\002\017\002\017\t\233\002\017\002\017\t\233\t\233\000\000\006\254\000\000\t\233\000\000\t\233\000\000\002\242\002\017\t\233\000\000\000\000\000\000\000\000\002\017\003\134\012i\012i\002\017\000\000\000\000\000\000\002\017\000\000\000\000\002\017\000\000\000\000\000\000\003\241\002\017\002\017\002\017\000\000\000\000\012i\000\000\012i\000\000\002\017\002\017\000\000\000\000\000\000\003\241\000\000\002\017\003\241\000\000\000\233\002\017\000\000\000\000\002\017\000\233\000\000\000\000\000\000\000\000\000\000\002\017\002\017\002\017\000\000\002\017\002\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000\000\002\017\002\017\000\000\002\r\002\r\002\017\000\000\000\000\002\r\000\000\002\017\002\r\000\000\000\000\002\017\002\017\002\017\000\233\000\000\005\002\000\000\002\r\002\r\002\r\000\233\002\r\002\r\000\000\000\000\000\233\012\197\012\197\000\000\000\000\000\000\000\000\000\000\002\r\000\233\000\233\000\000\000\000\000\000\002\r\003\134\000\000\000\000\002\r\012\197\012\197\005\226\002\r\000\000\000\000\002\r\000\000\000\000\012\197\000\000\002\r\002\r\002\r\000\000\000\000\000\233\000\000\000\000\007-\002\r\002\r\012\197\012\197\007-\000\233\012\197\002\r\012\197\012\197\012\197\002\r\000\000\000\000\002\r\012\197\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\000\000\002\r\002\r\000\000\000\000\000\000\000\000\000\000\012\197\000\000\000\000\002\r\000\000\002\r\002\r\000\000\002\t\002\t\002\r\007-\000\000\002\t\000\000\002\r\002\t\000\000\007-\002\r\002\r\002\r\000\000\007-\007-\000\234\002\t\002\t\002\t\000\000\002\t\002\t\007-\007-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\t\000\000\000\000\000\000\000\000\000\000\002\t\003\134\000\000\000\000\002\t\000\000\000\000\007-\002\t\000\000\007-\002\t\000\000\000\000\000\000\000\000\002\t\002\t\002\t\007-\000\000\000\000\000\000\000\000\000\000\002\t\002\t\000\000\000\000\000\000\000\000\000\000\002\t\000\000\005\006\002f\002\t\000\000\004^\002\t\t\026\000\000\000\000\004\202\000\000\000\000\002\t\002\t\002\t\000\000\002\t\002\t\000\000\t>\000\000\000\000\000\000\000\000\005\n\000\000\002\t\n\222\002\t\002\t\000\000\000\000\000\000\002\t\000\000\000\000\000\000\005\022\002\t\000\000\011\014\001\154\002\t\002\t\002\t\000\000\002Z\000\000\000\000\007\198\000\000\000\000\t\197\007\202\000\000\007\206\000\000\011&\006\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\018\000\000\001\166\001\170\000\000\000\000\000\000\000\000\006\250\004z\000\000\000\000\011.\005\017\005\017\000\000\000\000\000\000\005\017\000\000\001\174\005\017\000\000\000\000\000\000\000\000\t\197\0116\000\000\t\197\011\154\005\017\006\254\005\017\000\000\005\017\t\197\000\000\002\242\000\000\tnt\210\000\000\000\000\011)\000\000\000\000\012\157\000\000\012\181\000\000\000\000\011A\012\181\011)\011)\000\000\011A\011)\011)\011A\012\185\012\185\012\181\012\181\012\181\012\185\012\181\012\181\012\185\011A\000\000\000\000\003&\011A\011)\000\000\000\000\000\000\012\185\012\181\012\185\000\000\012\185\012\181\nt\242\003\161\000\000\003)\003\161\000\000\003)\012j\000\000\003\161\003\161\003\161\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\161\003\161\nF\nN\000\000\003\161\000\000\012\161\000\000\000\000\nV\000\000\012\161\012\161\000\234\003\161\003\161\003\161\000\234\003\161\003\161\000\000\012\161\000\000\000\000\004\205\000\000\t\250\n&\n^\nf\nv\003\161\000\000\000\000\000\000\003\161\000\000\000\000\n~\000\000\000\000\000\000\000\000\003%\000\000\003\161\012\161\n\134\000\000\000\000\001\166\001\170\000\000\000\000\000\000\012\161\000\000\000\000\000\000\t\242\000\000\n\170\003%\n\178\nn\003%\r2\000\000\001\174\003)\n\142\n\022\n.\n6\n\030\n>\000\000\n\150\n\158\000\000\000\000\000\000\000\000\000\000\000\000\nF\nN\000\000\000\000\000\000\001\206\002\178\000\000\nV\002R\000\000\002Z\002\182\002\194\000\000\000\000\000\234\000\000\002\206\000\000\003\246\000\000\015\250\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\002\210\000\000\n~\t\242\000\000\000\000\000\000\015\254\000\000\000\000\000\000\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\003%\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\137\000\000\000\000\000\000\000\000\000\137\n~\000\000\000\137\000\000\000\000\007A\000\000\000\000\000\000\n\134\007A\000\000\000\137\000\000\000\137\000\000\000\137\000\000\000\000\000\000\000\000\000\000\000\000\n\170\016\002\n\178\nn\016\018\000\137\000\000\000\000\000\000\n\142\000\000\000\137\000\000\000\000\000\000\000\137\n\150\nn\001\014\001\018\001\022\001\026\000\000\000\141\000\141\000\000\000\000\000\141\000\141\001\030\000\000\001&\001*\000\000\000\000\005\129\000\000\000\141\000\000\001.\000\000\000\000\002f\000\141\000\141\004^\000\000\000\000\000\000\000\000\004\202\000\000\000\000\000\141\000\141\005\129\0012\0016\001:\001>\001B\000\000\004\206\000\000\001F\000\000\000\000\000\000\001J\000\000\001\153\000\000\000\000\004\210\000\000\001\153\000\000\001N\001\153\000\000\000\000\004\230\001\154\001R\000\000\000\000\000\000\002Z\001\153\000\000\004\238\000\000\001\153\001z\006\218\006\222\006\238\000\000\000\000\006\246\001~\000\000\001\130\000\000\001\153\001\153\000\000\001\134\001\138\000\000\001\153\000\000\000\000\000\000\000\000\000\000\004\201\000\000\001\153\006\250\004zt\242\000\000\000\000\004!\001\205\000\000\000\000\004!\001\205\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\001\205\001\205\001\205\000\000\001\205\001\205\000\000\000\000\nF\nN\000\000\000\000\000\000\000\000\001\205\000\000\nV\001\205\000\000\000\000\000\000\001\205\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\003I\001\205\000\000\t\250\n&\n^\nf\nv\006\129\000\000\000\000\000\000\000\000\006\129\000\000\n~\t\242\000\000\000\000\003I\000\000\000\000\000\000\000\000\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\006\129\000\000\n\150\n\158\000\000\000\000\000\234\006\129\000\000\000\000\000\000\000\000\006\129\006\129\000\234\t\250\n&\n^\nf\nv\000\000\006\129\006\129\001\129\000\000\000\000\003I\n~\001\129\000\000\012!\001\129\000\000\000\000\000\000\000\000\n\134\000\000\000\000\012!\000\000\001\129\000\000\001\129\000\000\001\129\000\000\006\129\000\000\000\000\n\170\000\000\n\178\nn\000\000\000\000\006\129\001\129\000\000\n\142\000\000\000\000\000\000\001\129\012!\000\000\n\150\nrf\000\000\000\000\004^\000\000\t\026\005)\005A\004\202\000\000\005)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t>\000\000\005)\005)\005)\005\n\005)\005)\n\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\022\005)\000\000\011\014\001\154\005)\012~\000\000\000\000\002Z\000\000\000\000\007\198\000\000\000\000\005)\007\202\000\000\007\206\000\000\011&\006\246\t\242\000\000\000\000\000\000\012\130\000\000\000\000\000\000\000\000\000\000\000\000\b\018\n\022\n.\n6\n\030\n>\000\000\000\000\006\250\004z\000\000\000\000\011.\000\000\000\000\nF\nN\000\000\000\000\000\000\000\000\000\000\000\000\nV\000\000\000\000\000\000\0116\000\000\000\000\011B\000\234\006\254\000\000\000\000\000\000\000\000\012\142\002\242\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\000\000\000\000\012\146\000\000\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\012\158\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\000\000\000\000\000\000\012\162\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\012\190\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\012\194\000\000\000\000\000\000\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\012\214\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\000\000\000\000\012\218\000\000\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\012\238\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\000\000\000\000\000\000\012\242\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\012~\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\rN\000\000\000\000\000\000\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\012\142\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\000\000\000\000\rb\000\000\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\012\158\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\000\000\000\000\000\000\rv\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\012\190\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\r\170\000\000\000\000\000\000\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\012\214\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\000\000\000\000\r\182\000\000\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\012\238\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n~\t\242\000\000\000\000\000\000\000\000\000\000\000\000\r\194\n\134\000\000\000\000\000\000\n\022\n.\n6\n\030\n>\000\000\000\000\000\000\000\000\000\000\n\170\000\000\n\178\nn\nF\nN\000\000\000\000\000\000\n\142\000\000\000\000\nV\000\000\000\000\000\000\n\150\n\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\250\n&\n^\nf\nv\000\000\000\000\000\000\b\029\000\000\000\000\000\000\n~\000\242\001\166\001\170\001\230\000\000\000\000\000\000\000\000\n\134\000\000\000\000\000\000\000\000\016\206\000\000\000\000\000\000\b\029\000\000\001\174\001\190\000\000\n\170\000\000\n\178\nn\000\000\000\000\001\202\005Z\000\000\n\142\000\000\000\000\000\000\016\210\000\000\000\000\n\150\n\158\000\000\001\206\002J\000\000\000\000\002R\016J\002Z\002\182\002\194\0011\016b\000\000\000\000\002\206\0011\000\000\000\000\0011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\022\0011\000\000\0011\002\210\0011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016z\017&\000\000\0011\b\029\bb\153\001!\001\133\000\000\000\000\000\000\012%\000\000\000\000\b\153\000\000\001!\000\000\001!\000\000\001!\001\133\001\133\001\133\000\000\001\133\001\133\000\000\000\000\000\000\000\000\000\000\001!\000\000\000\000\000\000\000\000\000\000\001!\b\153\000\000\000\000\001\133\000\000\000\000\b\153\000\000\000\000\000\000\001!\000\000\000\000\001\133\bM\001!\001!\001!\000\000\bM\000\000\bM\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bM\001!\000\000\bM\000\000\b\153\000\000\bM\012E\000\000\007A\000\000\000\000\007A\000\000\001!\001!\001!\000\000\001!\001!\000\000\000\000\007A\000\000\bM\000\000\000\000\bM\000\000\000\000\bM\000\000\000\000\000\000\bM\001!\000\000\000\000\007A\bM\bM\bM\000\000\000\000\007A\001!\000\000\007A\bM\bM\000\000\000\000\007A\000\000\000\000\007A\000\000\000\000\000\000\bM\007A\004\186\bM\000\000\000\000\007A\000\000\000\000\000\000\007A\000\000\bM\000\000\000\000\bM\000\000\007A\000\000\000\000\012E\007A\007A\000\000\bM\000\000\000\000\bM\007A\000\000\000\000\007A\007A\000\000\007^\007A\007A\000\000\000\000\007A\bM\000\000\000\000\000\000\007A\004\186\000\234\000\000\000\000\000\000\000\000\000\000\007A\007A\007A\000\000\000\000\000\000\000\000\000\000\007A\007A\005\006\002f\007A\000\000\004^\000\000\t\026\000\000\000\000\004\202\000\000\000\000\007A\007A\000\000\000\000\007A\007A\000\000\t>\000\000\000\000\005n\000\000\005\n\000\000\007A\n\222\000\000\000\000\000\000\000\000\000\000\007A\000\000\014\006\000\000\005\022\002\166\000\000\014\014\001\154\000\000\007A\000\000\000\000\002Z\000\000\000\000\007\198\000\000\000\000\000\000\007\202\000\000\007\206\000\000\011&\006\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\250\004z\005\006\002f\000\000\000\000\004^\000\000\t\026\000\000\000\000\004\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t>\014\030\000\000\006\254\000\000\005\n\000\000\000\000\n\222\002\242\000\000\000\000\000\000\000\000\000\000\000\000\021z\000\000\005\022\000\000\000\000\005\"\001\154\000\000\000\000\000\000\000\000\002Z\000\000\000\000\007\198\000\000\000\000\000\000\007\202\000\000\007\206\000\000\011&\006\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\250\004z\005\006\002f\020>\000\000\004^\000\000\t\026\000\000\000\000\004\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t>\022\006\000\000\006\254\000\000\005\n\000\000\000\000\n\222\002\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\022\011\138\000\000\011\014\001\154\000\000\000\000\001\166\001\170\002Z\000\000\000\000\007\198\000\000\000\000\000\000\007\202\000\000\007\206\000\000\011&\006\246\003\145\000\000\000\000\001\174\001\190\003\145\000\000\000\000\003\145\000\000\000\000\b\018\001\202\000\000\000\000\000\000\000\000\000\000\003\145\006\250\004zn\000\000\003\145\000\000\000\000\000\000\000\000\000\000\004\154\003\145\000\000\000\000\003-\000\000\003\145\003-\003-\000\000\000\000\003\145\000\000\003-\000\000\000\000\003-\000\000\000\000\000\234\003-\000\000\003-\003-\bJ\003-\000\000\000\000\000\000\000\000\005\006\002f\000\000\000\000\004^\000\000\000\000\003-\000\000\004\202\000\000\000\000\000\000\000\000\bN\003-\003-\000\000\003-\000\000\000\000\000\000\000\000\000\000\005\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\022\000\000\003-\005\"\001\154\000\000\003-\000\000\003-\002Z\000\000\000\000\007\198\000\000\000\000\000\000\007\202\006\025\007\206\b\n\000\000\006\246\000\000\005\006\002f\000\000\000\000\004^\000\000\000\000\000\000\000\000\004\202\b\018\000\000\000\000\000\000\000\000\000\000\006\025\000\000\006\250\004z\000\000\bR\000\000\000\000\005\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\022\000\000\004\138\005\"\001\154\006\254\000\000\b\246\000\000\002Z\000\000\002\242\007\198\000\000\000\000\000\000\007\202\000\000\007\206\b\n\000\000\006\246\000\000\003-\003-\000\000\000\000\003-\000\000\000\000\000\000\000\000\003-\b\018\000\000\000\000\000\000\000\000\003-\000\000\000\000\006\250\004z\000\000\bR\000\000\000\000\003-\000\nf\003\145\000\000\004^\000\000\t\026\011\245\000\000\004\202\000\000\011\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t>\000\000\011\245\011\245\0022\005\n\011\245\011\245\n\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\245\000\000\005\022\000\000\000\000\r\246\001\154\011\245\004\233\000\000\000\000\002Z\000\000\004\233\007\198\000\000\004\233\011\245\007\202\000\000\007\206\000\000\011&\006\246\000\000\000\000\004\233\000\000\000\000\000\000\004\233\000\000\000\000\000\000\000\000\b\018\000\000\000\000\000\000\000\000\000\000\000\000\004\233\006\250\004zzf\000\000\000\000\004^\011\249\000\000\000\000\011\249\004\202\000\000\000\000\000\000\011\249\011\249\000\234\004v\005\253\000\000\000\000\000\000\002\186\000\000\005\253\005\n\000\000\000\000\000\000\000\000\011\249\000\000\000\000\000\000\011\249\000\000\000\000\000\000\005\022\000\000\000\000\005\"\001\154\000\000\011\249\011\249\024\158\002Z\011\249\011\249\007\198\000\000\000\000\000\000\007\202\000\000\007\206\b\n\011\249\006\246\000\000\000\000\000\000\000\000\000\000\011\249\000\000\000\000\000\000\000\000\000\000\b\018\000\000\000\000\000\000\011\249\000\000\br\000\000\006\250\004z\000\000\bR\005\006\002f\000\000\000\000\004^\000\000\000\000\000\000\000\000\004\202\000\000\000\000\000\000\000\000\000\000\000\000\b\202\000\000\000\000\000\000\006\254\000\000\000\000\000\000\005\n\000\000\002\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\022\000\000\000\000\005\"\001\154\000\000\000\000\000\000\000\000\002Z\000\000\000\000\007\198\000\000\000\000\000\000\007\202\b\166\007\206\b\n\000\000\006\246\000\000\005\006\002f\000\000\000\000\004^\000\000\000\000\000\000\000\000\004\202\b\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\250\004z\000\000\bR\000\000\000\000\005\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\022\000\000\000\000\005\"\001\154\006\254\000\000\000\000\000\000\002Z\000\000\002\242\007\198\000\000\000\000\000\000\007\202\b\178\007\206\b\n\000\000\006\246\000\000\005\006\002f\000\000\000\000\004^\000\000\000\000\000\000\000\000\004\202\b\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\250\004z\000\000\bR\000\000\000\000\005\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\022\000\000\000\000\005\"\001\154\006\254\000\000\000\000\000\000\002Z\000\000\002\242\007\198\000\000\000\000\000\000\007\202\012\n\007\206\b\n\000\000\006\246\000\000\005\006\002f\000\000\000\000\004^\000\000\000\000\000\000\000\000\004\202\b\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\250\004z\000\000\bR\000\000\000\000\005\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\022\000\000\000\000\005\"\001\154\006\254\000\000\000\000\000\000\002Z\000\000\002\242\007\198\000\000\000\000\000\000\007\202\012\022\007\206\b\n\000\000\006\246\000\000\005\006\002f\000\000\000\000\004^\000\000\000\000\000\000\000\000\004\202\b\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\250\004z\000\000\bR\000\000\000\000\005\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\022\000\000\000\000\005\"\001\154\006\254\000\000\000\000\000\000\002Z\000\000\002\242\007\198\000\000\000\000\000\000\007\202\012\"\007\206\b\n\000\000\006\246\000\000\005\006\002f\000\000\000\000\004^\005\181\000\000\000\000\000\000\004\202\b\018\000\000\002f\000\000\000\000\004^\000\000\000\000\006\250\004z\004\202\bR\000\000\000\000\005\n\005\181\000\000\000\000\000\000\000\000\000\000\000\000\004\206\000\000\000\000\000\000\000\000\005\022\000\000\000\000\005\"\001\154\006\254\004\210\000\000\000\000\002Z\000\000\002\242\007\198\000\000\004\230\001\154\007\202\000\000\007\206\b\n\002Z\006\246\000\000\004\238\000\000\000\000\000\000\006\218\006\222\006\238\000\000\000\000\006\246\b\018\000\000\000\000\000\000\000\000\011\253\000\000\000\000\006\250\004z\011\253\bR\000\000\011\253\000\000\000\000\000\000\000\000\000\000\006\250\004zj\012\021\012\001\000\000\011\165\012\005\002f\011\165\000\000\025\162\012\001\012\021\012\021\012\001\025\166\012\021\012\021\011\165\012\001\012\001\000\000\000\000\000\000\000\000\000\000\012\021\000\000\000\000\000\000\000\000\000\000\000\000\012\021\011\165\012\001\000\000\000\000\024j\012\001\011\165\000\000\000\000\012\021\000\000\000\000\000\250\001\154\011\165\012\001\012\001\011\165\000\000\012\001\012\001\000\000\011\165\000\000\000\000\000\000\000\000\000\000\000\000\012\001\025\170\000\000\000\000\000\000\000\000\000\000\012\001\000\000\011\165\007q\007q\024j\011\165\007q\000\000\000\000\012\001\000\000\007q\000\000\000\000\025\174\011\165\011\165\015\214\000\000\011\165\000\000\000\000\000\000\000\000\000\000\000\000\007q\007A\005\190\000\000\000\000\000\000\007A\000\000\000\000\007A\011\165\000\000\000\000\007q\000\000\000\000\007q\007q\000\000\007A\000\000\000\000\007q\007A\000\000\007q\000\000\000\000\000\000\007q\000\000\007q\007q\000\000\007q\007A\000\000\000\000\000\000\000\000\000\000\007A\006F\001Y\000\000\000\000\007q\000\000\001Y\000\000\000\000\001Y\007A\000\000\007q\007q\000\000\007A\004\186\000\234\000\000\001Y\000\000\001Y\000\000\001Y\000\000\000\000\007A\000\000\000\000\000\000\000\000\007A\000\000\000\000\007A\001Y\007q\000\000\000\000\000\000\000\000\001Y\007qa\000\000\002\162\004\245\000\000\011a\000\000\000\000\011a\011Q\000\000\000\000\024N\011Q\000\000\000\000\000\000\000\000\011a\000\000\001\206\002V\011a\000\000\002R\011Q\002Z\002\182\002\194\024R\000\000\011Q\000\000\002\206\011a\000\000\000\000\000\000\000\000\011Q\011a\000\000\011Q\000\000\000\000\000\000\000\000\011Q\011a\000\000\002\210\011a\000\000\004\161\000\000\000\000\011a\000\000\000\000\000\000\000\000\000\000\000\000\011Q\000\000\000\000\000\000\011Q\000\000\023\206\000\000\000\000\011a\000\000\000\000\011]\011a\011Q\011Q\000\000\011]\011Q\011Q\011]\000\000\000\000\011a\011a\000\000\000\000\011a\011a\000\000\011]\000\000\000\000\000\000\011]\011Q\000\000\000\000\000\000\001\166\001\170\000\000\000\000\000\000\011a\022Z\011]\000\000\000\000\000\000\000\000\000\000\011]\002F\019\202\000\000\000\000\001\174\001\190\000\000\011]\000\000\000\000\011]\000\000\000\000\001\202\000\000\011]\000\000\000\000\000\000\000\000\001\210\006\189\000\000\000\000\006\189\000\000\001\206\002J\000\000\000\000\002R\011]\002Z\002\182\002\194\011]\000\000\000\000\000\000\002\206\006\189\006\189\000\000\006\189\006\189\011]\011]\000\000\006\177\011]\011]\006\177\000\000\000\000\000\000\000\000\002\210\000\000\000\000\000\000\000\000\000\000\006\189\000\000\000\000\000\000\011]\006\177\006\177\000\000\006\177\006\177\000\000\000\000\000\000\000\000\022\158\000\000\000\000\000\234\000\000\000\000\000\000\000\000\000\000\002\146\000\000\000\000\000\000\006\177\007\241\000\000\000\000\000\000\000\000\007\241\000\000\000\000\007\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\234\000\000\007\241\006\189\000\000\006\189\007\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\189\007\241\000\000\bn\006\189\000\000\000\000\007\241\006\189\000\000\006\189\b\005\000\000\006\177\006\189\006\177\b\005\000\000\007\241\b\005\000\000\000\000\000\000\007\241\000\000\000\000\000\000\b\162\000\000\b\005\bn\006\177\000\000\b\005\000\000\006\177\000\000\006\177\000\000\007\241\000\000\006\177\000\000\000\000\000\000\b\005\000\000\000\000\000\000\000\000\000\000\b\005\000\000\007\241\007\241\b\025\000\000\007\241\007\241\000\000\b\025\000\000\b\005\b\025\000\000\000\000\000\000\b\005\000\000\000\000\000\000\000\000\000\000\b\025\007\241\000\000\000\000\b\025\000\000\000\000\000\000\000\000\000\000\b\005\019B\000\000\000\000\000\000\000\000\b\025\000\000\000\000\000\000\000\000\000\000\b\025\000\000\b\005\b\005\b\021\000\000\b\005\b\005\000\000\b\021\000\000\b\025\b\021\000\000\000\000\000\000\b\025\000\000\000\000\000\000\000\000\000\000\b\021\b\005\000\000\000\000\b\021\000\000\000\000\000\000\000\000\000\000\b\025\019\134\000\000\000\000\000\000\000\000\b\021\000\000\000\000\000\000\000\000\000\000\b\021\000\000\b\025\b\025\011q\000\000\b\025\b\025\000\000\000\242\000\000\b\021\002j\000\000\000\000\000\000\b\021\000\000\005\249\005\249\000\000\000\000\005V\b\025\000\000\000\000\011q\000\000\000\000\000\000\000\000\000\000\b\021\019\202\000\000\000\000\005\249\005\249\005Z\000\000\000\000\000\000\000\000\000\000\005~\005\249\b\021\b\021\000\000\000\000\b\021\b\021\022>\000\000\000\000\016J\000\000\000\000\005\249\005\249\016b\000\000\005\249\000\000\005\249\005\249\005\249\b\021\000\000\000\000\000\000\005\249\000\000\000\000\000\000\000\000\016j\019\246\001\166\001\170\020\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\249\000\000\016z\016\162\000\000\000\000\011q\011q\004\014\001\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\202\000\000\000\000\000\000\000\000\000\000\020*\000\000\000\000\000\000\000\000\000\000\000\000\001\206\002J\000\000\000\000\002R\000\000\002Z\002\182\002\194\000\000\000\000\000\000\003R\002\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\210"))
  
  and lhs =
~}}}|{{zzzzzzzzzyyyyyyyyyyyxwwvvuutssrrqpppppppppppppppppppppppppppppoonnmmllkkjjihhgggffeedcccccccccccbba`r\r\r\r\012\011\011\011\n\n\t\t\t\t\b\b\007\007")
  
  and goto =
    ((16, "\002$\000\255\000*\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\228\000\000\001U\000\242\003d\000\243\000\021\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\156\000\000\000\000\001\027\000\000\000\000\000\000\000\000\000\000\004\240\017V\003\026\000\007\002T\000\000\000\016\004\240\001\n\000\159\000\000\000\"\000\000\000\000\000\n\000u\000\000\000\171\000\000\000\000\000\000\000\000\001`\000\000\000\000\002 \000\154\000\158\000\000\000\000\001z\003\026\000\000\000\000(F\011V\000\000\0012\004\164\000\000\000\000\001d\000\n\001\128\002&\000\000\000x\000\000\005\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\0008\000&\000\000\000\210\000\000\002\142\001\170\000\000\b\206\015\188\001\156\000\000\000\000\000\000\000\000\000\000\000\000\028\022\001x\000\000\000\000\000\000\000\000\003\020\0024\000\000\000\000\000\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018h\000\000\000\210\002\138\000\000'\170\000\000\000\000\n\228\000\000\000\000\000\000\000\186\000\000\000\000\000\000\000\0005\024\000\000\000\000\002\158\000\000\001\1484p\000\000\000\000\001\220\000\000\000\000\000\000\000\000\000\000\000\000\"b\000\000\000\000\000\000\000\000\000\000\000\000\002\228\003$\000\000\000\000\000\000\000\227\000\000\003\028\000\000\000\000\0060\0032\000\000\000\000\003D\000\0004x\000\000\002\196\000\000\003\016\000\000\000\000\000\000\000\000\000\171\000\000\000\000\000\000\000\000\000\226\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\026\000\000\023(\000\000\000\000\001\128\000\000\003$\000\000\000\016\001:\005\228\002\b\005^\000\000\b*\002F\002\188\000\000\003\198\000\000\015j\b*\006\158\000\000\000\000\002z\001\139*T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\003z\000\000\000\000\000\000\t\014\000\000\000\000\003\214\000\015\003\250\n\160\011\224\004\204\000\000\004d\004\158\005R\000\000\000\000\006*\000\000\004\136\005,\004h\004\202\000\205\001\182\0058\000\192\004~\000\000\000\000\000\000\000\000\003\012\000\000\000\153\006\242\002p\002\226\000\000\000\000\000\000\000\000\005\192\000\000\000\0004\158\000\0004\190\004\214\000\000\015L\000\000\004\1500\196\004\150\000\000\000\000\000\000\005X\000\000\005`\000\000\006\012\000\000\000\000\007(\000\000\000\000\000\000\003\024\000\153\000\000\000\000\006D\000\000\000\000\000\000\000\000\006x\003v\000\153\000\000\000\000\000\153\000\000\000\000\000\153\006\146\000\000\000\000\003\192\000\t\000\184\005\148\r^\000\000\000\000\005:\t\n\000\000\006\018\007\020\0064\006\250\000\000\n\026\011Z\000\193\000\000\000\000\r\226\t\030\000\000\000\000\000\000\000\000\006z\016@\006\188\r\178\015\142\000\000\000\000\000\000\000\000\000\000\007\248\016\024\000\000\000\000\000\000\006\206\0016\005\154\003\202\006x\001h\000\000\000\028\000\184\000\000\000\028\000\000\000\000\004\188\000\153\000\000\000\000\000\000\000\000\000\000\000\000\000\028\tl\000\000\000\000\000\000\000\153\000\000\000\000\006\214\016v\006\244\007T\nd(\198(\240\000G\000\000\000\000\000\000\000\000\001\240\007v\000\000\000\000\000\000\007\1860\210\004\150\000\000*\188\007\b\0040\003$\000\000\000\000\000\000\000\000\000\000\000\000\001\026\000\000\000\000\000\000\000\000\b\130*\250\000\000\000\000\007\014+\006\000\000\000\000\000\000+\"\007\142+\174\000\000\007\142\000\000+\224\007\142\000\000,@\007\142\007\142\007\142\000\000\000\000,T\000\000\007\142,\138\000\000\007\142\t2\000\000\000\000(\240\000\000\b\140,\158\007\142\000\000\000\000\000\000\007\142\000\000\000\000\007\142\000\000\b\156\000\000\000\000\000\000\007\142\016\210\007\0220\248\bb\004.\000\000\000\0001\"\004\150\000\000\000\000\000\000\bj\004P\b\202\017\020\007\028,\254\007\142\017r\007.\019Z\000\000\019\196\000\000\000\000\025\242\0262\001\226\b\158\000\000\000\000\b\238\000\000\022:\000\000\t\018\000\000\004\002\017\150\000\000\000\000\000\000\023\252\000\000\000\000\000\000\000\000\b\150\017\206\000\000\000\000\000\000\026V\000\000\026\144\b\206\026\244\b\206\027X\b\206\000\000\024\240\000\000\027|\b\206\027\174\b\206\027\188\b\206\027\224\b\206\028~\b\206\028\230\b\206\029(\b\206\029<\b\206\029\152\b\206\029\236\b\206\030&\b\206\030\180\b\206\030\196\b\206\031\024\b\206\031R\b\206\031v\b\206\031\182\b\206 \026\b\206 >\b\206\b\206 ~\b\206 \162\b\206\b\206\018^\001v\018\158\000\000\000\000\005\164)&-\024\007\026\000\000)\\\007\1421H\004\150\t\178\000\000\000\000\000\000\000\000\000\000\000\011\t\140\t\144\000\000\000\000\020\238\005\166\000\000\018\252\000\0001t\000\000\004\150\016\246\000\000\004\1501~\004\150\000\000\019 \000\000\000\000\000\000)|\000\000\000\000\000\000\007\142\000\000\000\0001\158\000\000\004\150\000\000\000\000\016\246\t\148\000\0001\212\004\150\019`\000\000\000\0001\236\004\150\019\136\000\000\000\000\020(\000\000\000\000\000\0002$\004\150\020L\000\000\000\000-t\007\142\b\252\020\134\000\000-\142\000\000\007\142-\170\000\000\007\142-\234\000\000\007\142\n\166\000\000\000\000\000\000\000\000\007\156\000\000\000\000\020\170\000\000\000\000\000\000 \220\000\000\000\000\b\206\000\000\000\000\000\000!@\b\206\000\000\000\000!\164\b\206\000\000\000\000!\200\b\206\000\000\000\000\000\000\030\\\000\000\000\000!\250\b\206\000\000\000\000\"\b\b\206\",\b\206\000\000\000\000\"\202\b\206#2\b\206\000\000\000\000#t\b\206\004\198\021,\000\000\000\000#\136\b\206\021r\000\000\000\000#\228\b\206$8\b\206\000\000$r\b\206\000\000\000\000%\000\b\206\000\000%\016\b\206%d\b\206\000\000%\158\b\206%\194\b\206\000\000&\002\b\206\000\000&f\b\206\nb\000\000\000\000\000\000\000\000\b\206\b\206\000\000&\138\b\206\000\000&\202\b\206\000\000\tn\000\000\000\000\021\178\000\000\021\214\000\000\000\000\000\000\000\000\000\000\000\000\000\011\t\210\000\000.\178\022\022\000\000\000\011\t\222\000\000.\226\b\252\000\000\022t\000\000.\252\000\000\000\000\000\000/\016\000\000\000\000\022\216\000\000\023\000\000\000\000\000\000\000)\154\000\000\000\000\000\000&\238\b\206'(\b\206\015\142\000\000\000\000\000\000\011\140\000\000\n\"'\140\b\206\000\000\000\000\000\000\b\206\023^\000\000\n(\000\000\000\000\000\000\001\128\000\000\000\000\000\000\n2\002(\000\000\000\000 R\000\000\000f\000\000\000\000\001\176\000\000\005\246\000\000\000\000'\240\b\206\000\000\000\000\000\000\000\000\007\248\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\206\000\000\000\000\000\000\n6\000\000\000\000\000\000\000\000\007F\000\000\004\226\005\246\000\153\001n\000\028\000\000\023\160\000\000\005n\000\000\007~\004V\000\000\023\224\000\000\t\210\007*\000\000\n\144\000\000**\b^\000\000\000\000\nl(\024\000\000\b\206\000\000\000\000\012\132\000\000\000\000\000\000\015\014\000\000\000\000\000\000\017\022\000\000\000\000\000\028\bp\000\000\000\000\006\"\bz\000\000\005\166\007$. \007\142\024\004\000\000\007\146\bd\007\238\007D\000\028\000\000\b4\011L\000\0002J\004\150\011\016\011\020\000\000\b\194\000\000\bB\nN\n\200\002r\007\210\t(\000\000\b\026\t4\000\000\003\176\0060\b\134\000\000\002\176\011\024\t8\000\000\007<\000\153\th\000\000\006\016\000\000\000\000\000\000\n\172\000\153\000\000\b\148\011\024\0034\000\000\b\168\n\160\n\200\b\186\b\212\012\022\000\000\n\222\000\023\012V\011J\000\000\000\000\000\000\000\000\004\186\000\000\000\000\000\000\000\000\005|\bj\b\1882\160\004\150\000\000\000\000\000\000\000\000\011\n\000\249\b\194\007\146\011\188\011z\000\0002\194\004\150\012\158\011\138\000\0002\238\004\150\t\236\000\000\000\0002\252\004\150\b\236\012.\000\000\000\000\000\000\000\000\011\160\000\000\007r\000\0003\020\004\150\n\n\000\000\004\150\b\250\006\204\000\000\000\000\012\014\t*\011\222\000\000\006\210\023>\000\000\004 \000\000\000\000\000\000\000\00038\004\150\004\150\000\000\000\000\004\018\000\000\004\018\000\000\tL\0146\004\1503\\\004\150\nr\000\000\n~\000\000\000\000\000\000\004(\000\000\012\212\011v\000\000\000\000\0000\000\000\000\000\000\b\000\000\029\192\b\154\000\000\029\250\000\000\011\158\000\000$\012\0008\000\000\000\000$F\000\000\000\000\000\000\000\000\000\000\004\018\000\000\000\000\000\000\n\142\000\000\000\000\011H\t\130\004z\000\000\012\216\011\152\n\154\000\000\000\000\000\000\000\000\000\000\007p\000\000\000\000\000\000\000\000\011f\t\140\000\000\000\000\011x\004\244\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\172\000\000\000\000\011d\t\162\r \011\218\000\000\000\000\007\012\005j\000\000\000\000\000\000\011\156\t\166\rV\011\232\000\000\000\000, \n\194\000\000\000\000\000\000\000\000\000\000\004\150\b\238\rZ\011\254\000\000/,\003\002\t\184\004\136\000\000\000\000\000\000\011\224\000(\004t\n\218\000\000\t\210\012\158\012\160\012X\000\0003j\004\150\000\000\012^\000\0003\176\004\150\012f\rd\024h\000\000\000\000\024\168\000\000\bX\t\218\r\000\r\006\012r\000\000\b\192\000\000\000\000\012t\000\000\014^\000\000\012x0\b\018\228\012\170\000\0003\208\004\150\024\204\000\000\000\000\025\006\000\000\000\000\n\254\000\000\n\000\025*\011\028\000\000\012\238\n\024\004.\004B\006\018\012\250\n\"\012\198\000\000\005n/P\000\000\006\194\000\000\n6.L.\150\005\130\b\150\006\174\000\000\012\176\nb\000\000\001\226\000\000\001\226\000\000\000\000\000\000\001\226\001\226\000\000\000\0004\210\000\000\000\000\000\000\001\226\000\000\000\000\011N\000\000\nj\027\012\011\146\000\000\011\160\000\000\000\000\000\000\001\2264\228\000\000\011\150\001\2260\028\000\000\011\174\000\000\000\000\011H\000\000\000\000\000\000\014h\006\018\000\000\000\000\000\000\000\000\000\000\012\b\n\166\000\000\006\146\011\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\150\011\224\000\000\000\000\011d\012\n\n\218\r\194\012V\000\00000\011\244\000\000\000\000\000\000\000\000\012 \014\236\000\000\000\000\000\000\b\150\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\007\142\000\0004\002\004\150\000\000\000\000\000\000\000\000\000\000\r\n\000\000\000\000\000\000\000\000\t\020\b^\000\028\000\000\017D\000\000\000\000\000\000\r\170\000\000\000\000\000\000\000\000\000\000\r\b\000\000(|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\168\007\016\011*\000\000\011F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000r\011J\000\000\011h\000\000\029R\000\000#\158\000\000\000\000\000\0005 \000\000\000\0004L\004\150\007\242\007\168\000\000\000\000\004\150\t\006\n\172\000\000\000\000\015\188\000\000\012l\012\172\011\140\000\000\004\150\012:\012l\000\000\000\000\012\180\011\144\000\000\000\000\000\000\000\000\000*\000\000\000\000\004\150\r\\\000`\002<\000\000\000\000\000\000\012:\012:\012\144\012\170\000\000\000\000\rj\002\240\012\142\0008\003\150\000\000\000\000\000\000\012\168\000\000\000\000\000\000\000\000\000\000\000\000\000\0005:\000\000\000\0005T\000\000\005\230\000\000\000\000\000\000\000\000\025j\000\000\025\206\000\000\000\000\000\000\000\000\000\000\001\166\000\000\000\000\000\000!X\000\000\004\150\000\000\002\222\000\000\000\000\000\000*H\007\142\000\000\000\000\000\025\012\208\004N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\248\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\192\000\000\012\174\000\000\000\228\t`\000\000\000\000\012\220\000\000\r`\000\000\012\178\r\228\000\000\000\000\000\000\000\000"), (16, "\005\138\005\199\001\198\001\199\001\000\000h\004E\001^\005\022\004S\002\007\004W\004[\000d\005\139\004\217\001n\006s\000o\001\163\006t\006u\006w\006x\006y\000\129\002_\001\149\000\191\005\142\006{\004\169\001\000\005\146\005\147\000}\005\148\000\129\001\016\001\018\001\020\002`\004\171\000\191\000\133\002\b\002\023\006N\000\191\002\n\006M\000\235\000\191\000>\002\011\005\149\006}\001\153\001\186\004\183\000\193\000\194\000\216\005\150\005\157\000\239\001\019\001\018\001\020\005\158\0007\001\154\003\217\003\184\000\132\000\193\000\194\000\218\004\172\004\194\000\193\000\194\000\216\000\215\000\193\000\194\004\193\002\024\002\025\002\223\005\228\001^\001\214\001t\0018\001\214\004\030\001^\000\241\004\147\0018\005\159\0060\000\191\002o\001\245\001\248\000d\005\160\000\134\000\138\002 \001\254\001\225\005\161\005\190\001\202\000\191\004\012\000\157\000\139\001\227\001\134\002\016\001\227\005\183\005\138\002w\001\198\001\199\006\129\006\138\006\140\000\198\000\215\000\193\000\194\000\216\001\000\000\162\005\139\004\217\002x\005\163\000\211\001\148\006t\006\131\000\198\000\193\000\194\000\222\002_\004\196\005\165\005\142\006\133\000\198\006#\005\146\005\147\002q\005\148\0007\002z\002\175\001\228\002`\002\"\001\228\0007\000v\006%\001\018\001\020\005}\000\171\000\219\002\130\001t\002s\005\149\006\135\005\166\004\252\002#\005\127\002\014\001,\005\150\005\157\001\214\000\219\003\191\003\192\005\158\000\129\004\199\003\195\001\021\002\r\000\219\0007\005\167\005\176\001\022\0007\001\128\000\198\000\224\000\225\004\155\000\129\000\191\001\218\000\176\000\191\004\157\0018\002\132\001\227\004\205\000\198\004\207\004\201\005\229\005\230\005\159\000y\000\235\002o\005\128\006.\006\029\005\160\001\226\0007\004\208\004\217\006\030\005\161\001 \001\202\000:\000\215\000\193\000\194\000\216\000\193\000\194\001+\005\183\000\219\002w\001\214\001\198\001\199\001\155\001\128\001\159\000\224\000\225\006'\006/\006\029\001\228\000\219\006!\002x\005\163\006\030\005\b\004\219\004\220\006W\004\222\004\223\001\229\004\224\001\214\005\165\000\137\001\214\001\227\004\225\004\233\005\138\002q\001\198\001\199\002z\002\175\004\234\003d\003e\000\158\0063\001\134\006!\000\159\005\139\004\217\001\215\001%\002\130\003\231\002s\000{\001\227\005\166\004\252\001\227\002_\005\140\005\141\005\142\005\143\006S\000\198\005\146\005\147\000\198\005\148\000\179\004\235\000\237\000\235\002`\001\228\005\167\005\176\004\236\000\129\002\014\000\183\004\237\0009\001n\004\238\005w\001\160\005\149\005\178\000<\001t\002\132\001\186\000\190\001\149\005\150\005\157\000\191\000\156\001\228\0018\005\158\001\228\001\201\003\194\003\192\003\181\003\184\000\219\003\195\000\192\000\219\004\239\006Y\001\128\001\202\000\224\000\225\006\025\006\026\006\029\000\152\001t\004\241\001\153\0010\006\030\001\198\001\199\000\193\000\194\000\206\003h\005\159\001\253\001\248\002o\003g\001\154\000\200\005\160\001\254\000\247\000\238\006A\0018\005\161\000\198\001\202\001\000\000\198\002_\004\242\004\252\006!\002\178\000\183\005\183\000\187\002w\002q\001r\001n\001\134\000\197\001\234\002`\000\191\000\234\000\235\004\253\005\007\002\006\001\149\002x\005\163\001\186\002r\006U\002s\0012\006_\000\214\006+\001\018\001\020\005\165\001 \0068\000\211\003\186\003\184\005\138\002q\001\198\001\199\002z\002\175\000\215\000\193\000\194\000\216\000\198\001\153\000\236\000\235\005\139\004\217\005g\006a\002\130\0016\002s\004=\006\007\005\166\004\252\001\154\002_\005\140\005\141\005\142\005\143\005\177\000\183\005\146\005\147\0018\005\148\002o\004\207\000\250\000\253\002`\000\196\005\167\005\176\001@\004I\001^\000\230\001\202\000\191\001t\004\208\004\217\000\219\005\149\005\178\004-\002t\002\132\002w\004?\001n\005\150\005\157\001o\0018\000\183\001n\005\158\001w\001\147\000\252\001\149\006K\002x\005`\000\198\002w\001\149\000\198\000\215\000\193\000\194\000\216\000\198\005\b\004\219\004\220\005\t\004\222\004\223\0018\004\224\002q\0069\001^\002z\002\175\004\225\004\233\005\159\006;\001\153\002o\002\007\001\002\004\234\005\160\001\153\0017\002\130\005b\002s\005\161\001n\001\202\001\154\001\157\006m\001\199\006<\001\005\001\154\000\219\005\183\001\149\002w\001\012\000\235\001\128\001\b\000\224\000\225\006\014\006n\006o\005\025\005c\004\235\002\b\002\t\002x\005\163\002\n\005e\004\236\000\129\006=\002\011\004\237\005\129\002\132\004\238\005\165\000\198\001\153\004\161\001^\004\r\005\138\002q\001\198\001\199\002z\002\175\001\014\000\235\004\174\001^\001\154\001&\000\235\001L\005\139\004\217\001-\000\235\002\130\004S\002s\004\239\004Z\005\166\004\252\001\148\002_\005\140\005\141\005\142\005\143\005\177\004\241\005\146\005\147\003\028\005\148\003\235\004\207\000\219\001\212\002`\001\159\005\167\005\176\001\128\002\015\000\224\000\225\005\n\000\191\004\149\004\208\004\217\003*\005\149\005\178\000\183\002\016\002\132\0018\004\242\004\252\005\150\005\157\005\027\005`\000\183\002w\005\158\004\211\006:\001\134\006p\005\241\002J\005`\002M\002w\004\253\005\007\000\215\000\193\000\194\000\216\003\239\005\b\004\219\004\220\006>\004\222\004\223\002J\004\224\002R\001\198\001\199\0019\000\235\004\225\004\233\005\159\005b\002\"\002o\001S\000\235\004\234\005\160\001Y\004\231\001^\005b\001[\005\161\004\152\001\202\001c\001n\002_\002<\001\222\002\014\001U\000\235\005\183\001\164\002w\005c\001\149\001Z\001l\002\007\003P\002`\005e\004\159\001|\005c\004\235\003\242\005t\002x\005\163\003\232\005e\004\236\004\159\001\166\005\221\004\237\005m\003a\004\238\005\165\000\198\001.\001]\001^\001\153\005\138\002q\001\198\001\199\002z\002\175\0007\002\b\002\203\004\250\001^\002\n\005\019\001\154\005\139\004\217\002\011\0018\002\130\005\022\002s\004\239\003\235\005\166\004\252\003\196\002_\005\140\005\141\005\142\005\143\005\177\004\241\005\146\005\147\0018\005\148\002o\004\207\000\219\001~\002`\001\132\005\167\005\176\001\006\001\136\000\224\006F\001\202\000\191\001\138\004\208\004\217\003\236\005\149\005\178\000\183\002t\002\132\002w\004\242\004\252\005\150\005\157\004\149\005`\000\183\002w\005\158\001b\006J\001^\002\015\005\226\002x\005`\001\175\002w\004\253\005\007\000\215\000\193\000\194\000\216\002\016\004\218\004\219\004\220\001\148\004\222\004\223\003\235\004\224\002q\001\198\001\199\002z\002\175\004\225\004\233\005\159\005b\003\197\002o\001_\001^\004\234\005\160\004\156\001\011\002\130\005b\002s\005\161\001n\001\202\0018\003\229\002_\005\231\005\232\001g\000\235\0018\005\183\001\149\002w\005c\004\157\002\"\001\141\001\144\004@\002`\005e\004\173\001\140\005c\004\235\005\233\005l\002x\005\163\004\017\005e\004\236\002<\004\159\002\014\004\237\005h\002\132\004\238\005\165\000\198\001\153\001\165\001^\001\143\005\138\002q\001\198\001\199\002z\002\175\005\239\005\240\001\171\000\235\001\154\001\211\000\235\004?\005\139\004\217\002\182\000\235\002\130\004\020\002s\004\239\003\235\005\166\004\252\003\245\002_\005\140\005\141\005\142\005\143\005\177\004\241\005\146\005\147\001\152\005\148\002o\004\207\000\219\005\154\002`\001\180\005\167\005\176\001\015\004\131\000\224\000\225\001\202\001\132\000\191\004\208\004\217\004u\005\149\005\178\000\183\002t\002\132\002w\004\242\004\252\005\150\005\157\001\158\005`\000\183\002w\005\158\002\194\002\195\0018\004\149\005\184\002x\004\149\001\194\003\235\004\253\005\007\001\179\000\215\000\193\000\194\000\216\004\221\004\219\004\220\0018\004\222\004\223\0007\004\224\002q\001\181\005\203\002z\003\173\004\225\004\233\005\159\005b\001\214\002o\004\149\001 \004\234\005\160\003\206\001\196\002\130\004\134\002s\005\161\006\r\001\202\004\156\001n\001\209\004\156\004<\001\241\001\238\0018\005\183\004\029\002w\005c\001\149\003\017\001^\001\227\001\198\001\199\005e\001\252\004\157\001\240\004\235\004\157\005f\002x\005\163\004\160\005[\004\236\004\158\002\004\004\156\004\237\002\022\002\132\004\238\005\165\002F\000\198\0018\002U\001\153\005\138\002q\001\198\001\199\002z\002\175\0018\002Y\005\235\004\157\0018\002\001\005\207\001\154\005\139\004\217\004\249\001\228\002\130\003\226\002s\004\239\000\183\005\166\004\252\0018\002_\005\140\005\141\005\142\005\143\005\177\004\241\005\146\005\147\0018\005\148\004w\0018\000\191\000\219\002`\0018\005\167\005\176\0018\001\128\003\238\000\224\000\225\004\136\003\244\000\235\004\131\0018\005\149\005\178\002;\000\191\002\132\000\198\004\242\004\252\005\150\005\157\000\191\0018\003\249\001^\005\158\004\186\000\193\000\194\000\216\005\181\001\201\004\014\001^\000\192\004\253\005\007\004\018\001^\005/\001\214\001\198\001\199\001\202\000\191\000\215\000\193\000\194\000\216\006\018\0018\001\198\001\199\000\193\000\194\000\206\006\012\005\159\002\031\004\028\002o\004\026\0021\005\210\005\160\002_\000\245\000\238\005H\001\227\005\161\0027\001\202\004(\001^\0055\000\193\000\194\003\137\002@\002`\005\183\005\138\002w\001\198\001\199\006\129\006\130\002q\002O\003\189\004.\000\235\003}\004 \003\250\005\139\004\217\002x\005\163\000\198\004*\006t\006\131\003{\002r\0018\002s\002_\003\213\005\165\005\142\006\133\000\211\001\228\005\146\005\147\002q\005\148\000\198\002z\002\175\002c\002`\004/\001^\000\198\0041\000\235\005\191\0042\001^\004:\001^\002\130\0046\002s\005\149\006\135\005\166\004\252\0018\004G\002o\000\219\005\150\005\157\001n\0018\000\198\001\234\005\158\004K\001\201\000\198\001\202\004>\001^\001\149\005\167\005\176\004\175\002e\000\219\002t\003\203\002w\004`\000\235\001\128\000\219\000\224\000\225\004\136\004O\002\132\001\232\001\198\001\199\003\207\003\192\002x\0018\005\159\003\195\002i\002o\005\012\001\153\0018\005\160\004d\004g\000\219\001n\003\018\005\161\001\234\001\202\0018\002q\002_\001\154\002z\002\175\001\149\005\209\005\183\0018\002w\002q\004j\000\235\001\198\001\199\002\007\002`\002\130\002\129\002s\002\191\0018\004v\001^\002x\005\163\002\200\002r\002\199\002s\002\233\003\224\004{\000\235\0018\001\153\005\165\004\135\001^\004\138\000\235\003\014\005\138\002q\001\198\001\199\002z\002\175\003\r\001\154\002\b\002\023\003e\0018\002\n\003u\005\139\004\217\002\132\002\011\002\130\003\128\002s\004\143\000\235\005\166\004\252\003\134\002_\005\140\005\141\005\142\005\143\005\187\003\170\005\146\005\147\003\177\005\148\002o\004\163\000\235\003\187\002`\003\221\005\167\005\176\003\243\000\191\004\168\001^\001\202\002\024\002\025\002C\004\170\001^\005\149\005\178\003\247\002t\002\132\002w\004\206\001^\005\150\005\157\004\210\000\235\004\215\001^\005\158\004\227\000\235\003\252\001\201\002 \002x\004\240\001^\000\193\000\194\000\218\004\244\000\235\004\255\000\235\001\202\002\016\005\005\001^\004!\003\152\003\155\005\018\000\235\002q\001\198\001\199\002z\002\175\005\026\001^\005\159\003f\000\191\002o\005\028\000\235\003g\005\160\0050\000\235\002\130\001n\002s\005\161\004D\001\202\005I\001^\002_\001\198\001\199\000\183\001\149\004'\005\183\004&\002w\005K\000\235\002q\002\"\005M\001^\002`\000\193\000\194\005\245\004+\000\191\005P\000\235\002x\005\163\002_\005U\000\235\002r\002#\002s\002\014\000\198\002\132\001\153\005\165\005]\000\235\005x\001^\002`\005\138\002q\001\198\001\199\002z\002\175\001n\001\154\0040\004H\004\190\000\193\000\194\000\216\005\139\004\217\0049\001\149\002\130\004L\002s\005z\000\235\005\166\004\252\004Q\002_\005\140\005\186\005\142\005\143\005|\001^\005\146\005\147\000\219\005\148\002o\005~\001^\006\017\002`\000\220\005\167\005\176\005\137\001^\001\153\000\198\001\202\005\247\005\152\000\235\004\\\001n\005\149\005\178\004\230\002t\002\132\002w\001\154\002o\005\150\005\157\001\149\005\155\001^\004V\005\158\005\164\001^\004U\005\249\001\202\002x\005\255\005\169\000\235\000\183\005\174\001^\004h\002t\000\198\002w\006\001\004l\005`\006\003\002w\004m\000\219\004q\002q\001\153\003\220\002z\003\173\004r\002x\005\159\005\179\001^\002o\004\128\001\198\001\199\005\160\001\154\004\129\002\130\004\142\002s\005\161\004\144\001\202\005\236\000\235\002q\004\176\003\167\002z\003\173\005b\005\183\005\138\002w\000\219\004\177\006\132\005\238\000\235\005\252\000\235\004\216\002\130\004\213\002s\004\214\005\139\004\217\002x\005\163\005d\003e\006t\006\131\005\254\000\235\005c\004\232\002\132\004\251\005\165\005\142\006\133\005e\004\245\005\146\005\147\002q\005\148\005\133\002z\002\175\006\024\000\235\006 \000\235\004\003\0062\001^\006~\001^\006\136\001^\002\132\002\130\004\246\002s\005\149\005\006\005\166\004\252\005\000\005\001\005\r\001n\005\150\005\157\001\234\005\138\001\198\001\199\005\158\006\134\005\014\005\023\001\149\005'\005\030\005\031\005\167\005\176\005$\005\139\004\217\001\201\005(\005+\005;\006t\006\131\0052\0053\0058\002_\005<\002\132\001\202\005\142\006\133\005?\005O\005\146\005\147\005\159\005\148\001\153\005T\005V\002`\005\156\005\160\001\198\001\199\003h\005\175\005\170\005\161\005\171\003g\001\154\005\204\005\219\005\224\005\149\005\237\006\022\006\023\005\162\006\028\002w\006\031\005\150\005\157\006)\005\138\001\198\001\199\005\158\006\137\0061\0065\002q\0067\006h\000\000\005\163\000\000\000\000\005\139\004\217\003\208\000\000\000\000\000\000\006t\006\131\005\165\000\000\002r\002_\002s\000\000\000\000\005\142\006\133\000\000\000\000\005\146\005\147\005\159\005\148\002o\000\000\000\000\002`\000\000\005\160\000\000\000\000\000\000\000\000\000\000\005\161\001\202\000\000\005\166\004\252\000\191\000\000\005\149\000\000\000\000\002t\005\162\002w\002w\000\000\005\150\005\157\000\000\005\138\000\000\004\131\005\158\000\000\005\167\005\176\000\191\000\000\002x\000\000\005\163\000\000\001\201\005\139\004\217\000\000\000\000\000\215\000\193\000\194\000\216\005\165\000\000\000\000\001\202\000\000\005\145\002q\005\142\005\143\002z\003\254\005\146\005\147\005\159\005\148\002o\000\215\000\193\000\194\000\216\005\160\000\000\000\000\002\130\000\000\002s\005\161\001\202\000\000\005\166\004\252\000\000\000\000\005\149\000\000\000\000\002t\005\162\002w\002w\000\000\005\150\005\157\000\000\005\138\000\000\005:\005\158\002q\005\167\005\176\000\000\000\000\002x\000\000\005\163\000\000\000\000\005\139\004\217\000\000\000\000\000\000\000\000\002\132\002r\005\165\002s\000\000\000\000\000\198\005\180\002q\005\142\005\143\002z\003\216\005\146\005\147\005\159\005\148\000\000\000\000\000\000\000\000\000\000\005\160\000\000\000\000\002\130\000\198\002s\005\161\000\000\000\000\005\166\004\252\000\000\000\000\005\149\000\000\000\000\000\000\005\162\000\191\002w\000\000\005\150\005\157\001\198\001\199\000\000\000\000\005\158\000\219\005\167\005\176\000\000\000\000\000\000\001\128\005\163\000\224\000\225\004\164\000\000\000\000\001\198\001\199\004\167\002\132\000\000\005\165\002_\000\219\000\215\000\193\000\194\000\216\000\000\001\128\000\000\000\224\000\225\004\136\005\159\000\000\000\000\002`\004\007\005\138\000\000\005\160\000\000\000\000\000\000\000\000\000\000\005\161\000\000\000\191\005\166\004\252\005\216\005\139\004\217\001\200\001n\000\000\005\162\001\234\002w\006|\000\239\000\000\000\000\000\000\000\000\001\149\005\142\006{\005\167\005\176\005\146\005\147\000\000\005\148\005\163\000\000\000\000\000\000\000\000\000\193\000\194\000\206\000\000\001\198\001\199\005\165\000\000\000\000\000\000\000\000\000\000\000\000\005\149\000\241\000d\001\153\000\198\000\000\002o\000\000\005\150\005\157\000\000\001\198\001\199\000\000\005\158\002_\000\000\001\154\001\202\000\000\000\000\000\000\005\166\004\252\001\201\000\000\000\000\002t\000\000\002w\002`\000\000\000\000\000\000\000\000\002_\001\202\000\000\001\198\001\199\000\000\000\000\005\167\005\176\002x\003\162\005\159\000\211\000\219\000\000\002`\000\000\000\000\005\160\001\128\000\000\000\224\000\225\001\129\005\161\000\198\000\000\002_\002q\001\133\003\210\002z\002\175\000\000\000\000\005\162\000\000\002w\000\000\000\000\000\000\000\000\002`\000\000\000\000\002\130\002q\002s\000\000\001\198\001\199\000\000\000\000\005\163\000d\000\000\000\000\003\156\002o\000\000\000\000\000\000\000\000\002r\005\165\002s\000\000\000\000\000\000\000\219\001\202\000\000\002\238\002_\000\000\000\000\000\000\000\191\002o\002t\000\000\002w\001\198\001\199\000\000\000\000\002\132\000\000\002`\000\000\001\202\000\000\000\000\005\166\004\252\000\000\002x\000\000\000\000\002t\000\000\002w\000\000\003\146\000\000\002o\002_\000\000\000\215\000\193\000\194\000\216\000\000\005\167\005\176\002q\002x\001\202\002z\002\175\000\000\002`\000\000\000\000\000\000\000\191\002t\000\000\002w\001\198\001\199\000\000\002\130\000\000\002s\002q\003z\000\000\002z\002\175\000\000\000\000\000\000\002x\000\000\000\000\000\000\001\198\001\199\000\000\000\000\002o\002\130\002_\002s\000\000\000\215\000\193\000\194\000\216\000\000\000\000\002q\001\202\000\000\002z\002\175\000\000\002`\004\n\000\000\002_\002t\002\132\002w\001\198\001\199\000\000\000\000\002\130\000\000\002s\000\198\003r\002o\000\000\002`\001n\000\000\002x\001\234\000\000\005\214\002\132\000\000\000\000\001\202\000\000\001\149\002_\000\000\002l\000\000\000\000\000\000\002t\000\000\002w\002q\000\000\001n\002z\002\175\001\234\002`\000\000\000\000\000\000\000\000\000\000\002\132\001\149\002x\000\000\000\000\002\130\000\219\002s\001\153\002v\000\198\002o\001\128\000\000\000\224\000\225\002\211\000\000\000\000\000\000\000\000\002q\001\154\001\202\002z\002\175\000\000\001\198\001\199\002o\000\000\001\153\002t\000\000\002w\000\000\000\000\000\000\002\130\000\000\002s\001\202\000\191\000\000\000\000\001\154\002\132\000\000\000\000\002x\002t\002_\002w\000\000\000\219\000\192\000\000\002o\000\000\001\198\001\199\000\000\000\224\006C\000\000\000\000\002`\002x\002q\001\202\000\000\002z\002\175\000\000\000\193\000\194\000\206\000\000\002t\002\132\002w\002\180\000\000\002_\000\000\002\130\002q\002s\000\210\002z\002\175\000\000\000\000\000\000\000\000\002x\000\000\000\000\002`\004\131\000\000\000\000\000\000\002\130\000\191\002s\001\198\001\199\000\000\000\000\000\000\000\000\000\000\002\179\002q\000\000\000\000\002z\002\175\000\000\000\000\000\000\000\000\000\000\001\198\001\199\002\132\000\000\000\000\002o\002_\002\130\000\000\002s\000\211\000\215\000\193\000\194\000\216\000\000\000\000\001\202\000\000\000\000\002\132\002`\000\000\000\198\002_\000\000\002t\000\000\002w\001\198\001\199\000\000\001\198\001\199\000\000\000\000\002\205\002o\000\000\002`\000\000\005D\000\000\002x\000\000\000\000\000\000\000\000\002\132\001\202\000\000\000\000\001\198\001\199\002\216\000\000\002_\000\000\002t\000\000\002w\000\000\002q\000\000\000\000\002z\002\175\000\219\002Z\000\000\000\000\002`\000\000\000\000\000\000\002x\002_\000\000\000\000\002\130\000\000\002s\001\198\001\199\002o\000\198\002\237\000\000\000\000\000\000\000\000\002`\000\000\000\000\002q\000\000\001\202\002z\002\175\000\000\000\000\000\000\002o\000\000\000\000\002t\002\242\002w\000\000\000\000\000\000\002\130\000\000\002s\001\202\000\000\000\000\000\000\000\000\000\000\002\132\002\\\002x\002t\000\000\002w\000\000\000\000\000\000\000\219\000\000\001\201\001\198\001\199\002o\001\128\000\000\000\224\000\225\004\136\002x\002q\000\000\001\202\002z\002\175\001\202\000\000\000\000\000\000\001\198\001\199\002\132\000\000\002o\002t\002_\002w\002\130\002q\002s\000\000\002z\002\175\000\000\000\000\001\202\000\000\000\000\000\000\000\000\002`\002x\000\000\002_\002t\002\130\002w\002s\001\198\001\199\000\000\000\000\000\000\001\201\000\000\002\245\000\000\002q\002`\000\000\002q\002x\000\000\002z\002\175\001\202\001\198\001\199\002\132\000\000\000\000\000\000\002_\002\251\002r\000\000\002s\002\130\000\000\002s\002q\000\000\000\000\002z\002\175\000\000\002\132\002`\000\000\000\000\002_\000\000\000\000\000\000\000\000\000\000\000\000\002\130\000\000\002s\000\000\002\007\003\001\002o\000\000\002`\000\000\000\000\000\000\000\000\002q\000\000\000\000\000\000\002\214\001\202\000\000\000\000\002\132\000\000\003\020\002o\000\000\000\000\002t\000\000\002w\002r\000\000\002s\002\217\001\198\001\199\001\202\000\000\000\000\002\b\002\218\002\132\000\000\002\n\002x\002t\000\000\002w\002\011\000\000\000\000\000\000\000\000\002o\000\000\000\000\000\000\000\000\002_\000\000\000\000\000\000\002x\002q\000\000\001\202\002z\002\175\000\000\001\198\001\199\002o\000\000\002`\002t\000\000\002w\000\000\000\000\000\000\002\130\002q\002s\001\202\002z\002\175\000\000\000\000\003B\000\000\000\000\002x\002t\002_\002w\000\000\000\000\000\000\002\130\000\000\002s\001\198\001\199\000\000\000\000\002\015\000\000\000\000\002`\002x\002q\000\000\000\000\002z\002\175\000\000\000\000\002\016\000\000\001\198\001\199\002\132\000\000\003G\000\000\002_\000\000\002\130\002q\002s\000\000\002z\002\175\002\219\000\000\000\000\002o\000\000\000\000\002\132\002`\000\000\000\000\002_\000\000\002\130\000\000\002s\001\202\000\000\000\000\001\198\001\199\000\000\002\221\003v\000\000\002t\002`\002w\000\000\000\000\002\"\000\000\000\000\000\000\000\000\000\000\002\132\001\198\001\199\002o\000\000\003x\002x\002_\000\000\000\000\000\000\002<\000\000\002\014\000\000\001\202\000\000\000\000\002\132\000\000\000\000\000\000\002`\000\000\002t\002q\002w\000\000\002z\002\175\001\198\001\199\000\000\000\000\000\000\002o\000\000\003\131\000\000\000\000\002g\002x\002\130\000\000\002s\000\000\000\000\001\202\000\000\000\000\000\000\000\000\000\000\002o\002_\000\000\002t\000\000\002w\000\000\002q\000\000\000\000\002z\002\175\001\202\000\000\000\000\000\000\002`\000\000\000\000\000\000\002x\002t\000\000\002w\002\130\000\000\002s\001\198\001\199\000\000\002\132\003\139\002o\000\000\000\000\000\000\000\000\000\000\002x\002q\000\000\000\000\002z\002\175\001\202\000\000\000\000\001\198\001\199\000\000\001\201\002_\000\000\002t\000\000\002w\002\130\002q\002s\000\000\002z\002\175\001\202\000\000\000\000\002\132\002`\000\000\000\000\000\000\002x\002_\000\000\000\000\002\130\000\000\002s\000\191\000\000\002o\000\000\003\148\000\000\000\000\000\000\000\000\002`\000\000\000\191\002q\000\000\001\202\002z\002\175\001\198\001\199\000\000\002\132\000\000\000\000\002t\003\151\002w\000\000\000\000\000\000\002\130\002q\002s\000\193\000\194\001(\000\000\000\000\000\000\002\132\000\000\002x\002_\000\215\000\193\000\194\000\216\000\000\002r\000\000\002s\001\198\001\199\002o\000\000\000\000\000\000\002`\000\000\004\147\002q\000\000\000\000\002z\002\175\001\202\000\000\000\000\000\000\000\000\000\000\002\132\000\000\002o\002t\002_\002w\002\130\000\000\002s\000\000\000\000\000\000\001\198\001\199\001\202\000\000\000\000\000\000\000\000\002`\002x\000\000\000\000\002t\000\000\002w\001\198\001\199\000\000\000\000\001\198\001\199\000\000\000\000\003\234\000\198\002_\000\000\000\000\002q\002x\000\000\002z\002\175\000\000\000\000\000\198\002\132\000\000\002o\000\000\002`\000\000\000\000\002_\000\000\002\130\000\000\002s\002q\000\000\001\202\002z\002\175\000\000\002p\003\241\000\000\000\000\002`\002t\000\000\002w\000\000\000\000\000\000\002\130\000\000\002s\000\219\001\198\001\199\002o\000\000\004\024\000\000\001\021\002x\000\000\000\000\000\219\000\000\001)\000\000\001\202\000\000\001\128\002\132\000\224\000\225\004\155\000\000\000\000\002t\002_\002w\002q\000\000\003\176\002z\003\173\000\000\001\198\001\199\002o\000\000\000\000\002\132\000\000\002`\002x\000\000\000\000\002\130\000\000\002s\001\202\000\000\001\201\000\000\001\198\001\199\002o\000\000\005*\002t\002_\002w\000\000\002q\001\202\000\000\002z\002\175\001\202\000\000\000\000\000\000\001\198\001\199\000\000\002`\002x\002t\002_\002w\002\130\000\000\002s\001\198\001\199\000\000\000\000\000\000\002\132\000\000\005-\000\000\000\000\002`\002x\002q\000\000\000\000\002z\002\175\000\000\001\198\001\199\000\000\000\000\000\000\002o\002_\005C\002q\000\000\002\131\002\130\002q\002s\000\000\002z\002\175\001\202\000\000\000\000\002\132\002`\000\000\000\000\002_\002r\002t\002s\002w\002\130\000\000\002s\001\198\001\199\000\000\000\000\005F\002o\000\000\002`\000\000\000\000\000\000\002x\000\000\000\000\000\000\000\000\000\000\001\202\000\000\000\000\002\132\000\000\005L\002o\002_\000\000\002t\000\000\002w\000\000\002q\000\000\000\000\002z\002\175\001\202\000\000\000\000\002\132\002`\000\000\001\201\000\000\002x\002t\000\000\002w\002\130\000\000\002s\001\198\001\199\002o\001\202\006O\000\000\000\000\000\000\000\000\000\000\000\000\002x\002q\000\000\001\202\002z\002\175\000\000\001\198\001\199\002o\000\000\000\000\002t\002_\002w\000\000\000\000\000\000\002\130\002q\002s\001\202\002z\002\175\000\000\000\000\000\000\002\132\002`\002x\002t\002_\002w\000\000\000\000\000\000\002\130\002q\002s\001\198\001\199\002o\000\000\006Q\000\000\000\000\002`\002x\002q\000\000\000\000\002z\002\175\001\202\002r\000\000\002s\001\198\001\199\002\132\000\000\000\000\002t\002_\002w\002\130\002q\002s\000\000\002z\002\175\000\000\000\000\000\000\000\000\000\000\000\000\002\132\002`\002x\000\000\002_\000\000\002\130\000\000\002s\001\198\001\199\000\000\000\000\000\000\002o\000\000\000\000\000\000\000\000\002`\000\000\002q\000\000\000\000\002z\002\175\001\202\000\000\000\000\002\132\000\000\000\000\002o\002_\000\000\002t\000\000\002w\002\130\000\000\002s\000\000\000\000\000\000\001\202\000\000\000\000\002\132\002`\000\000\000\000\000\000\002x\002t\000\000\002w\000\000\000\000\000\000\001\198\001\199\000\000\000\000\000\000\002o\000\000\000\000\000\000\000\000\000\000\002x\002q\000\000\000\000\002z\002\175\001\202\000\000\000\000\002\132\000\000\000\191\002o\002_\000\000\002t\000\000\002w\002\130\002q\002s\000\000\002z\003j\001\202\000\000\000\000\000\000\002`\000\000\000\000\000\000\002x\002t\000\000\002w\002\130\000\000\002s\001\198\001\199\002o\000\215\000\193\000\194\000\216\000\000\000\000\000\000\000\000\002x\002q\000\000\001\202\002z\003i\000\000\001\198\001\199\002\132\000\000\000\000\002t\002_\002w\000\000\000\000\000\000\002\130\002q\002s\000\000\002z\002\170\000\000\000\000\000\000\002\132\002`\002x\000\000\002_\001\198\001\199\000\000\000\000\002\130\000\000\002s\001\198\001\199\002o\000\000\000\000\000\000\000\000\002`\000\000\002q\000\000\000\000\002z\002|\001\202\000\000\000\000\002_\001\198\001\199\002\132\000\000\000\000\002t\002_\002w\002\130\000\198\002s\000\000\000\000\000\000\002`\000\000\000\000\000\000\000\000\000\000\002\132\002`\002x\000\000\002_\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002o\000\000\000\000\000\191\000\000\002`\000\000\002q\000\000\000\000\002z\002~\001\202\000\000\000\000\002\132\000\192\000\000\002o\000\219\000\000\002t\000\000\002w\002\130\001\128\002s\000\224\000\225\004\164\001\202\000\000\000\000\000\000\005{\000\193\000\194\000\206\002x\002t\000\000\002w\000\000\002o\000\000\001\198\001\199\000\000\000\207\000\238\002o\000\000\000\000\000\000\000\000\001\202\002x\002q\000\000\000\000\002z\002\128\001\202\000\000\002t\002\132\002w\000\000\002o\002_\000\000\002t\000\000\002w\002\130\002q\002s\000\000\002z\002\133\001\202\002x\000\000\000\000\002`\000\000\000\000\000\000\002x\002t\000\000\002w\002\130\000\000\002s\000\211\000\000\001\198\001\199\000\000\002q\000\000\000\000\002z\002\135\000\000\002x\002q\000\198\000\000\002z\002\137\000\000\000\000\000\000\002\132\000\000\002\130\000\000\002s\000\000\002_\000\000\000\000\002\130\002q\002s\000\000\002z\002\139\001\198\001\199\000\000\002\132\000\000\000\000\002`\000\000\000\000\000\000\001\198\001\199\002\130\000\000\002s\000\000\000\000\002o\000\000\000\000\000\000\000\000\000\219\000\000\002_\000\000\000\000\000\000\002\132\001\202\000\000\000\191\000\000\000\000\002_\002\132\000\000\000\000\002t\002`\002w\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002`\000\000\000\000\000\000\002\132\000\000\002x\001\198\001\199\000\000\000\000\000\000\000\000\000\000\000\193\000\194\005\245\000\000\000\000\000\000\002o\000\000\000\000\000\000\000\000\002q\000\000\000\000\002z\002\141\000\000\002_\001\202\000\000\000\000\000\000\000\000\000\191\000\000\000\000\000\000\002t\002\130\002w\002s\000\000\002`\000\000\000\000\001\198\001\199\000\000\000\000\002o\000\000\000\000\000\000\000\000\002x\000\000\000\000\000\000\000\000\002o\000\000\001\202\000\191\000\000\004\194\000\193\000\194\000\216\000\000\002_\002t\001\202\002w\002q\001\198\001\199\002z\002\143\000\000\002\132\002t\000\000\002w\000\198\002`\006\000\000\000\002x\000\000\000\000\002\130\000\000\002s\004\194\000\193\000\194\000\216\002x\002_\000\000\000\000\001\198\001\199\000\000\000\000\002o\002q\000\000\005\249\002z\002\145\005\255\000\000\002`\000\000\000\000\002q\001\202\000\000\002z\002\147\006\001\000\000\002\130\006\003\002s\002t\000\219\002w\000\000\000\000\002\132\000\000\002\130\000\000\002s\000\000\000\000\004\196\000\000\003,\000\000\000\000\002x\000\000\001\198\001\199\002o\000\000\000\000\000\000\000\000\000\000\001\198\001\199\000\000\000\000\000\000\000\000\001\202\000\000\000\000\002q\000\000\002\132\002z\002\149\004\196\002t\002_\002w\000\000\000\000\000\000\002\132\000\000\002o\002_\000\000\002\130\000\000\002s\004\199\000\000\002`\002x\000\000\000\000\001\202\000\000\000\000\000\000\002`\000\000\000\000\001\198\001\199\002t\000\000\002w\000\000\000\000\004\157\001\201\002q\000\000\004\204\002z\002\151\004\201\000\000\004\199\000\000\000\000\002x\001\202\000\000\000\000\000\000\002_\002\132\002\130\000\000\002s\001\198\001\199\000\000\000\000\000\000\000\000\000\000\004\157\000\000\002q\002`\004\203\002z\002\153\004\201\000\000\000\000\000\000\001\198\001\199\000\000\000\000\000\000\002o\002_\000\000\002\130\000\000\002s\000\000\000\000\002o\000\000\000\000\000\000\001\202\002q\000\000\002\132\002`\000\000\000\000\002_\001\202\002t\000\000\002w\000\000\000\000\000\000\001\198\001\199\002t\002r\002w\002s\000\000\002`\000\000\000\000\000\000\002x\000\000\000\000\000\000\000\000\000\000\002\132\000\000\002x\000\000\000\000\000\000\002o\002_\000\000\000\000\000\000\000\000\000\000\002q\000\000\000\000\002z\002\155\001\202\000\000\000\000\002q\002`\000\000\002z\002\157\000\000\002t\000\000\002w\002\130\000\000\002s\001\198\001\199\002o\000\000\000\000\002\130\000\000\002s\000\000\000\000\000\000\002x\000\000\000\000\001\202\000\000\000\000\000\000\001\198\001\199\002o\000\000\000\000\002t\002_\002w\000\000\000\000\001\198\001\199\002q\000\000\001\202\002z\002\159\000\000\000\000\000\000\002\132\002`\002x\002t\002_\002w\000\000\000\000\002\132\002\130\000\000\002s\001\198\001\199\002o\000\000\000\000\000\000\000\000\002`\002x\002q\000\000\000\000\002z\002\161\001\202\000\000\000\000\003\189\001\198\001\199\000\000\000\000\000\000\002t\002_\002w\002\130\002q\002s\000\000\002z\002\163\000\000\000\000\000\000\000\000\003\200\000\000\002\132\002`\002x\000\000\002_\000\000\002\130\000\000\002s\001\198\001\199\000\000\000\000\000\000\002o\000\000\000\000\000\000\000\000\002`\000\000\002q\000\000\000\000\002z\002\165\001\202\000\000\000\000\002\132\000\000\000\000\002o\002_\000\000\002t\000\000\002w\002\130\000\000\002s\000\000\001\201\000\000\001\202\000\000\000\000\002\132\002`\000\000\000\000\000\000\002x\002t\003\203\002w\000\000\000\000\000\000\001\198\001\199\000\000\000\000\000\000\002o\000\000\000\000\000\000\003\207\003\192\002x\002q\000\000\003\195\002z\002\167\001\202\000\000\000\000\002\132\000\000\000\191\002o\002_\000\000\002t\000\000\002w\002\130\002q\002s\000\000\002z\002\169\001\202\000\000\000\000\000\000\002`\002q\000\000\000\000\002x\002t\000\000\002w\002\130\000\000\002s\001\198\001\199\002o\000\215\000\193\000\194\000\216\002r\000\000\002s\000\000\002x\002q\000\000\001\202\002z\002\172\000\000\001\198\001\199\002\132\000\000\000\000\002t\002_\002w\000\000\000\000\000\000\002\130\002q\002s\000\000\002z\002\174\000\000\000\000\000\000\002\132\002`\002x\000\000\002_\001\198\001\199\006[\000\000\002\130\000\000\002s\001\198\001\199\002o\000\000\000\000\000\000\000\000\002`\000\000\002q\000\000\000\000\003\024\003\026\001\202\000\000\000\000\002_\001\198\001\199\002\132\000\000\000\000\002t\002_\002w\002\130\000\198\002s\000\000\000\000\000\000\002`\000\000\000\000\000\000\000\000\000\000\002\132\002`\002x\000\000\002_\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002o\000\000\000\000\000\191\000\000\002`\000\000\002q\000\000\000\000\002z\003\031\001\202\000\000\000\000\002\132\000\192\000\000\002o\000\219\000\000\002t\000\000\002w\002\130\001\128\002s\000\224\000\225\006\\\001\202\000\000\000\000\000\000\000\000\000\193\000\194\000\206\002x\002t\000\000\002w\000\000\002o\000\000\001\198\001\199\000\000\000\243\000\238\002o\000\000\000\000\000\000\000\000\001\202\002x\002q\000\000\000\000\002z\003#\001\202\000\000\002t\002\132\002w\000\000\002o\002_\000\000\002t\000\000\002w\002\130\002q\002s\000\000\002z\003'\001\202\002x\000\000\000\000\002`\000\000\000\000\000\000\002x\002t\000\000\002w\002\130\000\000\002s\000\211\000\000\001\198\001\199\000\000\002q\000\000\000\000\002z\003/\000\000\002x\002q\000\198\000\000\002z\0033\000\000\000\000\000\000\002\132\000\000\002\130\000\000\002s\000\000\002_\000\000\000\000\002\130\002q\002s\000\000\002z\0035\001\198\001\199\000\000\002\132\000\000\000\000\002`\000\000\000\000\000\000\001\198\001\199\002\130\000\000\002s\000\000\000\000\002o\000\000\000\000\000\000\000\000\000\219\000\000\002_\000\000\000\000\000\000\002\132\001\202\000\000\000\191\000\000\000\000\002_\002\132\000\000\000\000\002t\002`\002w\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002`\000\000\000\000\000\000\002\132\000\000\002x\001\198\001\199\000\000\000\000\000\000\000\000\000\000\000\193\000\194\005\245\000\000\000\000\000\000\002o\000\000\000\000\000\000\000\000\002q\000\000\000\000\002z\0039\000\000\002_\001\202\000\000\000\000\000\000\000\000\000\191\000\000\000\000\000\000\002t\002\130\002w\002s\000\000\002`\000\000\000\000\001\198\001\199\000\000\000\000\002o\000\000\000\000\000\000\000\000\002x\000\000\000\000\000\000\000\000\002o\000\000\001\202\000\191\000\000\004\194\000\193\000\194\000\216\000\000\002_\002t\001\202\002w\002q\001\198\001\199\002z\003;\000\000\002\132\002t\000\000\002w\000\198\002`\006\002\000\000\002x\000\000\000\000\002\130\000\000\002s\004\194\000\193\000\194\000\216\002x\002_\000\000\000\000\000\000\000\000\000\000\000\000\002o\002q\000\000\005\249\002z\003?\005\255\000\000\002`\000\000\000\000\002q\001\202\000\000\002z\003E\006\001\000\000\002\130\006\003\002s\002t\000\219\002w\000\000\000\000\002\132\000\000\002\130\000\000\002s\000\000\000\000\004\196\000\000\000\000\000\000\000\000\002x\000\000\001\198\001\199\002o\000\000\000\000\000\000\000\000\000\000\001\198\001\199\000\000\000\000\000\000\000\000\001\202\000\000\000\000\002q\000\000\002\132\002z\003J\004\196\002t\002_\002w\000\000\000\000\000\000\002\132\000\000\002o\002_\000\000\002\130\000\000\002s\004\199\000\000\002`\002x\000\000\000\000\001\202\000\000\000\000\000\000\002`\000\000\000\000\001\198\001\199\002t\000\000\002w\000\000\000\000\004\157\000\000\002q\000\000\004\202\003\024\003L\004\201\000\000\004\199\000\000\000\000\002x\000\000\000\000\000\000\000\000\002_\002\132\002\130\000\000\002s\001\198\001\199\000\000\000\000\000\000\000\000\000\000\004\157\000\000\002q\002`\004\200\002z\003O\004\201\000\000\000\000\000\000\001\198\001\199\000\000\000\000\000\000\002o\002_\000\000\002\130\000\000\002s\000\000\000\000\002o\000\000\000\000\000\000\001\202\000\000\000\000\002\132\002`\000\000\000\000\002_\001\202\002t\000\000\002w\000\000\000\000\000\000\001\198\001\199\002t\000\000\002w\000\000\000\000\002`\000\000\000\000\000\000\002x\000\000\000\000\000\000\000\000\000\000\002\132\000\000\002x\000\000\000\000\000\000\002o\002_\000\000\000\000\000\000\000\000\000\000\002q\000\000\000\000\002z\003S\001\202\000\000\000\000\002q\002`\000\000\002z\003V\000\000\002t\000\000\002w\002\130\000\000\002s\001\198\001\199\002o\000\000\000\000\002\130\000\000\002s\000\000\000\000\000\000\002x\000\000\000\000\001\202\000\000\000\000\000\000\001\198\001\199\002o\000\000\000\000\002t\002_\002w\000\000\000\000\000\000\000\000\002q\000\000\001\202\002z\003X\000\000\000\000\000\000\002\132\002`\002x\002t\002_\002w\000\000\000\000\002\132\002\130\000\000\002s\001\198\001\199\002o\000\000\000\000\000\000\000\000\002`\002x\002q\000\000\000\000\002z\003[\001\202\000\000\000\000\000\000\001\198\001\199\000\000\000\000\000\000\002t\002_\002w\002\130\002q\002s\000\000\002z\003]\000\000\000\000\000\000\000\000\000\000\000\000\002\132\002`\002x\000\000\002_\000\000\002\130\000\000\002s\001\198\001\199\000\000\000\000\000\000\002o\000\000\000\000\000\000\000\000\002`\000\000\002q\000\000\000\000\002z\003`\001\202\000\000\000\000\002\132\000\000\000\000\002o\002_\000\000\002t\000\000\002w\002\130\000\000\002s\000\000\000\000\000\000\001\202\000\000\000\000\002\132\002`\000\000\000\000\000\000\002x\002t\000\000\002w\000\000\000\000\000\000\001\198\001\199\000\000\000\000\000\000\002o\000\000\000\000\000\000\000\000\000\000\002x\002q\000\000\000\000\002z\003c\001\202\000\000\000\000\002\132\000\000\000\000\002o\002_\000\191\002t\000\000\002w\002\130\002q\002s\000\000\002z\003m\001\202\000\000\000\000\000\000\002`\000\000\000\000\000\000\002x\002t\000\000\002w\002\130\000\000\002s\001\198\001\199\002o\000\000\000\000\000\000\000\215\000\193\000\194\000\216\000\000\002x\002q\000\000\001\202\002z\003p\000\000\000\000\000\000\002\132\002\007\000\000\002t\002_\002w\000\000\000\000\000\000\002\130\002q\002s\000\000\002z\003\158\000\000\000\000\000\000\002\132\002`\002x\000\000\000\000\000\000\000\000\000\000\000\000\002\130\000\000\002s\000\000\000\000\002o\000\191\000\000\000\000\002\b\002\023\000\000\002q\002\n\000\000\002z\003\160\001\202\002\011\000\000\000\000\000\000\000\000\002\132\002\007\000\000\002t\000\000\002w\002\130\000\000\002s\000\000\000\198\000\000\000\000\000\000\000\215\000\193\000\194\000\216\002\132\000\000\002x\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\024\002\025\002C\000\000\002o\000\000\000\000\000\000\002\b\002\023\002\007\002q\002\n\000\000\002z\003\169\001\202\002\011\000\000\002\132\000\000\000\000\000\000\000\000\002 \002t\000\219\002w\002\130\000\000\002s\002\007\000\223\000\000\000\224\000\225\002\016\000\000\000\000\000\000\003\253\003\155\002x\000\000\000\000\002\b\002\023\000\000\000\000\002\n\002\024\002\025\002C\000\000\002\011\000\000\000\000\000\000\002\183\000\000\000\198\002q\000\000\000\000\002z\003\199\002\b\002\023\000\000\002\132\002\n\000\000\000\000\000\000\002 \002\011\000\000\000\000\002\130\000\000\002s\002\"\000\000\000\231\002?\002\007\002\016\002\024\002\025\002:\005\225\003\155\000\000\002\247\002\023\000\000\000\000\002\n\002#\000\000\002\014\002\007\002\011\000\000\000\219\0024\000\000\000\000\002\024\002\025\002:\002 \000\224\006\004\002\214\000\000\002\007\000\000\000\000\002\132\002\b\002\023\000\000\002\016\002\n\000\000\000\000\000\000\000\000\002\011\002\217\002\"\002 \002\252\002\255\003\015\002\b\002\218\000\000\000\000\002\n\000\000\000\000\000\000\002\016\002\011\000\000\000\000\002#\000\000\002\014\002\b\002\023\000\000\000\000\002\nn\000\000\002\016\002\219\000\000\002\011\002#\003\154\002\014\000\000\000\000\002\b\002\023\000\000\000\000\002\n\002\"\002\b\002\023\000\000\002\011\002\n\000\000\000\000\002\220\000\000\002\011\000\000\000\000\000\000\000\000\000\000\002\"\002#\002\007\002\014\002\252\002\255\003\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\"\000\000\002<\000\000\002\014\000\000\002\024\002\025\006c\006e\000\000\000\000\002\024\002\025\005\194\002 \000\000\002#\002\007\002\014\000\000\000\000\002\b\002\023\002\007\000\000\002\n\002\016\000\000\000\000\002 \002\011\000\000\000\000\000\000\000\000\002 \003\248\002\007\000\000\000\000\000\000\002\016\000\000\000\000\000\000\000\000\000\000\002\016\000\000\000\000\000\000\000\000\002\b\002\023\000\000\000\000\002\n\000\000\002\b\002\023\000\000\002\011\002\n\002\024\002\025\002=\000\000\002\011\000\000\000\000\000\000\002\"\002\b\002\023\000\000\000\000\002\n\000\000\000\000\000\000\000\000\002\011\000\000\000\000\000\000\000\000\002\"\002 \002#\000\000\002\014\000\000\002\"\000\000\002\024\002\025\002&\000\000\000\000\002\016\002\024\002\025\002%\002#\000\000\002\014\000\000\002\007\000\000\002#\000\000\002\014\000\000\000\000\002\024\002\025\002\027\000\000\002 \000\000\000\000\000\000\000\000\000\000\002 \000\000\000\000\000\000\000\000\000\000\002\016\000\000\002\007\000\000\000\000\000\000\002\016\000\000\002 \000\000\000\000\000\000\002\b\002\023\002\"\000\000\002\n\000\000\000\000\000\000\002\016\002\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002#\000\000\002\014\000\000\000\000\000\000\002\b\002\023\000\000\000\000\002\n\000\000\000\191\000\000\002\"\002\011\000\000\000\000\000\000\002\007\002\"\000\000\000\000\002\024\002\025\002\030\000\000\000\000\000\000\002\007\000\000\002#\000\000\002\014\002\"\000\000\000\000\002#\000\000\002\014\000\000\000\000\000\000\004\194\000\193\000\194\000\216\002 \002\024\002\025\002!\002#\000\000\002\014\002\b\002\023\002\007\000\000\002\n\002\016\000\000\000\000\000\000\002\011\002\b\002\023\002\007\000\000\002\n\000\000\000\000\000\000\002 \002\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\002\b\002\023\000\000\000\000\002\n\002\024\002\025\002$\000\000\002\011\002\b\002\023\000\000\002\"\002\n\002\024\002\025\002+\000\000\002\011\000\000\000\000\000\000\002\007\000\000\000\000\004\196\000\000\000\000\002 \002#\000\000\002\014\000\000\000\000\000\000\002\007\000\000\002\"\002 \000\000\002\016\002\024\002\025\002.\000\000\000\000\000\000\000\000\002\243\000\000\002\016\002\024\002\025\0026\002#\000\000\002\014\002\b\002\023\000\000\000\000\002\n\000\000\000\000\002\246\002 \002\011\000\000\000\000\004\199\002\b\002\218\000\000\000\000\002\n\002 \000\000\002\016\000\000\002\011\000\000\002\007\000\000\000\000\000\000\002\"\000\000\002\016\000\000\004\157\000\000\000\000\000\000\005\004\002\007\002\"\004\201\000\000\000\000\002\024\002\025\002V\002#\000\000\002\014\000\000\000\000\000\000\002\007\000\000\000\000\000\000\002#\000\000\002\014\000\000\002\b\002\023\000\000\000\000\002\n\000\000\002\"\002 \000\000\002\011\000\000\000\000\000\000\002\b\002\023\000\000\002\"\002\n\000\000\002\016\002\015\000\000\002\011\002#\002\007\002\014\000\000\002\b\002\023\000\000\000\000\002\n\002\016\002#\000\000\002\014\002\011\000\000\000\000\000\000\000\000\000\000\002\024\002\025\002\254\000\000\000\000\000\000\002\219\000\000\000\000\002\007\000\000\000\000\000\000\002\024\002\025\003\004\000\000\002\b\002\023\000\000\000\000\002\n\002\"\000\000\002 \000\000\002\011\002\024\002\025\003\007\000\000\002\007\000\000\000\000\000\000\002\"\002\016\002 \000\000\002#\000\000\002\014\000\000\000\000\002\b\002\023\000\000\000\000\002\n\002\016\000\000\002 \002<\002\011\002\014\000\000\000\000\000\000\000\000\002\024\002\025\003\n\000\000\002\016\000\000\000\000\002\b\002\218\002\007\000\000\002\n\000\000\000\000\000\000\000\000\002\011\000\000\000\000\000\000\000\000\000\000\002\"\002\007\002 \000\000\000\000\002\024\002\025\004\022\000\000\000\000\000\000\000\000\000\000\002\"\002\016\000\000\000\000\002#\000\000\002\014\000\000\000\000\002\b\002\218\000\000\002\007\002\n\002\"\000\000\002 \002#\002\011\002\014\000\000\000\000\000\000\002\b\002\218\002\007\000\000\002\n\002\016\000\000\000\000\002#\002\011\002\014\000\000\002\007\000\000\000\000\002\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\"\002\b\002\218\002\007\002\016\002\n\000\000\000\000\000\000\000\000\002\011\000\000\000\000\000\000\002\b\002\218\000\000\002#\002\n\002\014\005^\000\000\000\000\002\011\002\b\002\218\000\000\002\"\002\n\002\015\000\191\000\000\000\000\002\011\000\000\000\000\000\000\000\000\002\b\002\218\000\000\002\016\002\n\002\015\002#\000\000\002\014\002\011\000\000\002\"\000\000\000\000\000\000\000\000\000\000\002\016\000\000\005^\000\000\000\000\000\000\000\215\000\193\000\194\000\216\000\000\002<\002\015\002\014\000\000\000\000\003\140\000\000\000\000\000\000\000\000\000\000\005Y\000\000\002\016\002\015\000\000\000\000\005i\005k\000\000\002\"\000\000\000\000\000\000\002\015\003\143\002\016\000\000\000\000\003\140\000\000\000\000\000\000\000\000\002\"\000\000\002\016\002<\002\015\002\014\000\000\000\000\003\140\000\000\000\000\000\000\000\000\002\007\000\000\003\142\002\016\002<\003\140\002\014\005i\005j\000\000\002\007\002\"\000\000\000\000\000\000\003\141\000\000\000\000\000\000\005\134\002\007\000\000\000\198\000\000\002\"\003\145\000\000\000\000\002<\005G\002\014\000\000\000\000\000\000\002\"\002\b\002\218\000\000\000\000\002\n\000\000\002<\000\000\002\014\002\011\002\b\002\218\000\000\002\"\002\n\000\000\002<\000\000\002\014\002\011\002\b\002\218\001\006\000\000\002\nb\002\218\000\000\002\"\002\nb\000\000\000\000\000\000\000\198\000\000\000\000\000\219\000\215\000\193\000\194\000\216\000\000\001\128\000\000\000\224\000\225\004o\000\191\000\000\000\000\000\000\000\198\000\000\000\215\000\193\000\194\000\216\000\000\000\219\000\000\000\000\000\000\000\000\000\000\001\128\000\219\000\224\000\225\004t\000\198\000\000\001\128\000\000\000\224\000\225\004y\000\198\000\219\000\215\000\193\000\194\000\216\000\000\001\128\000\191\000\224\000\225\004\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\219\000\000\000\000\000\000\000\000\000\000\001\128\000\191\000\224\000\225\004\154\000\191\000\000\000\000\000\000\000\000\000\198\000\000\000\219\000\000\000\215\000\193\000\194\000\216\001\128\000\219\000\224\000\225\004\166\000\000\000\191\001\128\000\198\000\224\000\225\005!\000\000\000\000\000\215\000\193\000\194\000\216\000\215\000\193\000\194\000\216\000\191\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\191\000\198\000\000\000\000\000\219\000\215\000\193\000\194\000\216\000\191\001\128\000\000\000\224\000\225\005&\000\000\000\000\000\000\000\000\000\000\000\219\000\215\000\193\000\194\000\216\000\000\001\128\000\000\000\224\000\225\005A\004\194\000\193\000\194\000\216\000\191\000\000\000\000\000\198\000\191\004\194\000\193\000\194\000\216\000\000\000\219\000\000\000\000\000\000\000\000\000\000\001\128\000\191\000\224\000\225\005\197\000\198\000\000\000\000\000\000\000\198\000\000\000\000\000\000\000\000\000\191\000\215\000\193\000\194\000\216\000\215\000\193\000\194\000\216\000\000\000\000\000\000\000\000\000\000\000\198\000\000\000\000\000\219\000\215\000\193\000\194\000\216\000\000\001\128\000\000\000\224\000\225\006\t\000\000\000\000\000\198\000\215\000\193\000\194\000\216\000\219\000\000\000\000\000\000\000\219\004\196\000\233\000\000\000\224\000\225\001\n\000\000\000\224\000\225\004\196\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\219\000\000\000\000\000\000\000\000\000\000\001{\000\000\000\224\000\225\000\000\000\000\000\000\000\000\000\000\000\000\000\219\000\198\000\000\000\000\000\000\000\198\001}\000\000\000\224\000\225\004\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\004\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\157\000\198\000\000\000\000\005q\000\000\000\000\004\201\000\000\004\157\000\000\000\000\000\000\005\131\000\000\000\219\004\201\000\000\000\000\000\219\000\000\000\000\000\000\000\224\000\227\000\000\000\000\000\224\006\006\000\000\000\000\000\000\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\006E\000\000\000\000\000\000\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\006H"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2912 "parsing/parser.mly"
                                                ( "+" )
# 1236 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2913 "parsing/parser.mly"
                                                ( "+." )
# 1261 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type list) = 
# 2647 "parsing/parser.mly"
                                                ( [_1] )
# 1286 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type list) = 
# 2648 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 1323 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.attributes) = Obj.magic _7 in
        let _6 : (Parsetree.class_expr) = Obj.magic _6 in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 1376 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _4 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _4 in
        let _3 : (Asttypes.virtual_flag) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_declaration) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 1403 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1208 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        let text = symbol_text _symbolstartpos in
        Ci.mk _5 _6 ~virt:_3 ~params:_4
                    ~attrs:(_2@_7) ~loc:(make_loc _sloc) ~text ~docs )
# 1415 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.attributes) = Obj.magic _8 in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 1474 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _4 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _4 in
        let _3 : (Asttypes.virtual_flag) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.class_description) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 1501 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1479 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        let text = symbol_text _symbolstartpos in
        Ci.mk _5 _7 ~virt:_3 ~params:_4
                    ~attrs:(_2@_8) ~loc:(make_loc _sloc) ~text ~docs )
# 1513 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.attributes) = Obj.magic _8 in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 1572 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _4 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _4 in
        let _3 : (Asttypes.virtual_flag) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.class_type_declaration) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 1599 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1502 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        let text = symbol_text _symbolstartpos in
        Ci.mk _5 _7 ~virt:_3 ~params:_4
                    ~attrs:(_2@_8) ~loc:(make_loc _sloc) ~text ~docs )
# 1611 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.pattern * Parsetree.expression) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (let_binding) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1945 "parsing/parser.mly"
      ( mklb ~loc:_sloc false _3 (_2@_4) )
# 1657 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.attributes) = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _10 : (
# 625 "parsing/parser.mly"
       (string)
# 1700 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_binding) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 1725 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1032 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        let text = symbol_text _symbolstartpos in
        Mb.mk _3 _4 ~attrs:(_2@_5) ~loc:(make_loc _sloc) ~text ~docs )
# 1736 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.attributes) = Obj.magic _6 in
        let _5 : (Parsetree.module_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (
# 625 "parsing/parser.mly"
       (string)
# 1785 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.module_declaration) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 1810 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1173 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        let text = symbol_text _symbolstartpos in
        Md.mk _3 _5 ~attrs:(_2@_6) ~loc:(make_loc _sloc) ~text ~docs )
# 1821 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.attributes) = Obj.magic _7 in
        let _6 : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic _6 in
        let _5 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _5 in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 1875 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _3 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.type_declaration) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 1901 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2263 "parsing/parser.mly"
      ( let (kind, priv, manifest) = _5 in
        let docs = symbol_docs _sloc in
        let text = symbol_text _symbolstartpos in
        Type.mk _4 ~params:_3 ~cstrs:(List.rev _6)
          ~kind ~priv ?manifest
          ~attrs:(_2@_7) ~loc:(make_loc _sloc) ~docs ~text )
# 1915 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (string Asttypes.loc) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2975 "parsing/parser.mly"
                     ( _1 )
# 1946 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 746 "parsing/parser.mly"
    ( mkloc _1 (make_loc _sloc) )
# 1957 "parsing/parser.ml"
          
        in
        
# 2977 "parsing/parser.mly"
    ( _1 )
# 1963 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (string Asttypes.loc) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (string) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (string Asttypes.loc) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2976 "parsing/parser.mly"
                                 ( _1 ^ "." ^ _3.txt )
# 2010 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 746 "parsing/parser.mly"
    ( mkloc _1 (make_loc _sloc) )
# 2021 "parsing/parser.ml"
          
        in
        
# 2977 "parsing/parser.mly"
    ( _1 )
# 2027 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2981 "parsing/parser.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 2073 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 2997 "parsing/parser.mly"
               ( [] )
# 2091 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.attributes) = 
# 2998 "parsing/parser.mly"
                         ( _1 :: _2 )
# 2122 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _3 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.constructor_declaration) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 2180 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2346 "parsing/parser.mly"
    ( let args,res = _3 in
      let info = symbol_info _endpos in
      Type.constructor _2 ~args ?res ~attrs:_4 ~loc:(make_loc _sloc) ~info )
# 2191 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _3 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension_constructor) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 2249 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2455 "parsing/parser.mly"
      ( let args, res = _3 in
        let info = symbol_info _endpos in
        Te.decl _2 ~args ?res ~attrs:_4 ~loc:(make_loc _sloc) ~info )
# 2260 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.attributes) = Obj.magic _5 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.extension_constructor) = let _4 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 2324 "parsing/parser.ml"
          
        in
        let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 2345 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2466 "parsing/parser.mly"
      ( let info = symbol_info _endpos in
        Te.rebind _2 _4 ~attrs:_5 ~loc:(make_loc _sloc) ~info )
# 2355 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.attributes) = Obj.magic _7 in
        let _6 : (Parsetree.class_expr) = Obj.magic _6 in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 2408 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _4 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _4 in
        let _3 : (Asttypes.virtual_flag) = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_declaration * string Asttypes.loc option) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 2435 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1199 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Ci.mk _5 _6 ~virt:_3 ~params:_4
                    ~attrs:(attrs@_7) ~loc:(make_loc _sloc) ~docs
        , ext )
# 2448 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_declaration list * string Asttypes.loc option) = 
# 1192 "parsing/parser.mly"
      ( let (body, ext) = _1 in ([body], ext) )
# 2473 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_declaration) = Obj.magic _2 in
        let _1 : (Parsetree.class_declaration list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_declaration list * string Asttypes.loc option) = 
# 1194 "parsing/parser.mly"
      ( let (l, ext) = _1 in (_2 :: l, ext) )
# 2504 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.attributes) = Obj.magic _8 in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 2563 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _4 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _4 in
        let _3 : (Asttypes.virtual_flag) = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.class_description * string Asttypes.loc option) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 2590 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1470 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Ci.mk _5 _7 ~virt:_3 ~params:_4
                    ~attrs:(attrs @ _8) ~loc:(make_loc _sloc) ~docs
        , ext )
# 2603 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_description list * string Asttypes.loc option) = 
# 1463 "parsing/parser.mly"
      ( let (body, ext) = _1 in ([body],ext) )
# 2628 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_description) = Obj.magic _2 in
        let _1 : (Parsetree.class_description list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_description list * string Asttypes.loc option) = 
# 1465 "parsing/parser.mly"
      ( let (l, ext) = _1 in (_2 :: l, ext) )
# 2659 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = 
# 1237 "parsing/parser.mly"
      ( _1 )
# 2684 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1239 "parsing/parser.mly"
      ( wrap_class_attrs ~loc:_sloc _3 _2 )
# 2724 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1241 "parsing/parser.mly"
      ( class_of_let_bindings ~loc:_sloc _1 _3 )
# 2764 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Asttypes.override_flag) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_expr) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 2840 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1243 "parsing/parser.mly"
      ( mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(_3, _5, _7)) )
# 2849 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1245 "parsing/parser.mly"
      ( Cl.attr _1 _2 )
# 2880 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic _200 in
        let _100 : (Parsetree.class_expr) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1248 "parsing/parser.mly"
        ( Pcl_apply(_1, List.rev _2) )
# 2919 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 767 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 2930 "parsing/parser.ml"
          
        in
        
# 1251 "parsing/parser.mly"
      ( _1 )
# 2936 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1250 "parsing/parser.mly"
        ( Pcl_extension _1 )
# 2967 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 767 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 2978 "parsing/parser.ml"
          
        in
        
# 1251 "parsing/parser.mly"
      ( _1 )
# 2984 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.attributes) = Obj.magic _6 in
        let _5 : (string Asttypes.loc option) = Obj.magic _5 in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : (Asttypes.override_flag) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.class_field) = let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1295 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, _5)) ~attrs:(_3@_6) ~docs )
# 3043 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_field) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1298 "parsing/parser.mly"
      ( let v, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_val v) ~attrs:(attrs@_3) ~docs )
# 3087 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_field) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1302 "parsing/parser.mly"
      ( let meth, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_method meth) ~attrs:(attrs@_3) ~docs )
# 3131 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_field) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1306 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_constraint _3) ~attrs:(_2@_4) ~docs )
# 3178 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_field) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1309 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_initializer _3) ~attrs:(_2@_4) ~docs )
# 3225 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_field) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1312 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_extension _1) ~attrs:_2 ~docs )
# 3260 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_field) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1315 "parsing/parser.mly"
      ( Pcf_attribute _1 )
# 3291 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 765 "parsing/parser.mly"
    ( mkcf ~loc:_sloc _1 )
# 3302 "parsing/parser.ml"
          
        in
        
# 1316 "parsing/parser.mly"
      ( _1 )
# 3308 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_field list) = 
# 1288 "parsing/parser.mly"
      ( [] )
# 3326 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_field) = Obj.magic _2 in
        let _1 : (Parsetree.class_field list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_field list) = 
# 1290 "parsing/parser.mly"
      ( _2 :: List.rev (text_cstr _startpos__2_) @ _1 )
# 3357 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1215 "parsing/parser.mly"
      ( _2 )
# 3388 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : (Parsetree.class_expr) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.class_type) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1218 "parsing/parser.mly"
        ( Pcl_constraint(_4, _2) )
# 3443 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 767 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 3454 "parsing/parser.ml"
          
        in
        
# 1221 "parsing/parser.mly"
      ( _1 )
# 3460 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.class_expr) = Obj.magic _200 in
        let _100 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1220 "parsing/parser.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, _2) )
# 3499 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 767 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 3510 "parsing/parser.ml"
          
        in
        
# 1221 "parsing/parser.mly"
      ( _1 )
# 3516 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.class_expr_desc) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 767 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 3548 "parsing/parser.ml"
          
        in
        
# 1228 "parsing/parser.mly"
                                           ( _1 )
# 3554 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr_desc) = 
# 1231 "parsing/parser.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, _3) )
# 3591 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr_desc) = 
# 1233 "parsing/parser.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, _2) )
# 3622 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 579 "parsing/parser.mly"
       (string)
# 3643 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2828 "parsing/parser.mly"
                                                ( Lident _1 )
# 3651 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 579 "parsing/parser.mly"
       (string)
# 3682 "parsing/parser.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 2829 "parsing/parser.mly"
                                                ( Ldot(_1, _3) )
# 3692 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1279 "parsing/parser.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 3732 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.core_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1281 "parsing/parser.mly"
      ( Ppat_constraint(_2, _4) )
# 3795 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 3806 "parsing/parser.ml"
          
        in
        
# 1282 "parsing/parser.mly"
      ( _1 )
# 3812 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__0_ in
        let _symbolstartpos = _endpos in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1284 "parsing/parser.mly"
      ( ghpat ~loc:_sloc Ppat_any )
# 3833 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 1413 "parsing/parser.mly"
      ( _2 )
# 3870 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type) = let _1 =
          let _1 =
            
# 1414 "parsing/parser.mly"
                      ( Ptyp_any )
# 3890 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__0_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _endpos in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 3900 "parsing/parser.ml"
          
        in
        
# 1415 "parsing/parser.mly"
      ( _1 )
# 3906 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Parsetree.class_type_field list) = Obj.magic _10 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_signature) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 724 "parsing/parser.mly"
                               ( extra_csig _startpos _endpos _1 )
# 3943 "parsing/parser.ml"
          
        in
        
# 1409 "parsing/parser.mly"
      ( Csig.mk _1 (List.rev _2) )
# 3949 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.class_type) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_type_field) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1425 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_inherit _3) ~attrs:(_2@_4) ~docs )
# 3996 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
  Asttypes.virtual_flag * Parsetree.core_type) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_type_field) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1428 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_val _3) ~attrs:(_2@_4) ~docs )
# 4044 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.attributes) = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _3 : (Asttypes.private_flag * Asttypes.virtual_flag) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_type_field) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 4120 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1432 "parsing/parser.mly"
      ( let (p, v) = _3 in
        let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_method (_4, p, v, _6)) ~attrs:(_2@_7) ~docs )
# 4131 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_type_field) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1436 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_constraint _3) ~attrs:(_2@_4) ~docs )
# 4178 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_type_field) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1439 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_extension _1) ~attrs:_2 ~docs )
# 4213 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_type_field) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1442 "parsing/parser.mly"
      ( Pctf_attribute _1 )
# 4244 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 763 "parsing/parser.mly"
    ( mkctf ~loc:_sloc _1 )
# 4255 "parsing/parser.ml"
          
        in
        
# 1443 "parsing/parser.mly"
      ( _1 )
# 4261 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_field list) = 
# 1419 "parsing/parser.mly"
    ( [] )
# 4279 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_type_field) = Obj.magic _2 in
        let _1 : (Parsetree.class_type_field list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_type_field list) = 
# 1421 "parsing/parser.mly"
    ( _2 :: List.rev (text_csig _startpos__2_) @ _1 )
# 4310 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = tys000;
              MenhirLib.EngineTypes.startp = _startpos_tys000_;
              MenhirLib.EngineTypes.endp = _endpos_tys000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _300 : unit = Obj.magic _300 in
        let tys000 : (Parsetree.core_type list) = Obj.magic tys000 in
        let _110 : unit = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _30 = _300 in
          let tys00 = tys000 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _3 = _30 in
            let tys0 = tys00 in
            let _1 = _11 in
            let _4 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 4383 "parsing/parser.ml"
              
            in
            let _2 =
              let tys = tys0 in
              
# 2663 "parsing/parser.mly"
    ( tys )
# 4391 "parsing/parser.ml"
              
            in
            
# 1392 "parsing/parser.mly"
        ( Pcty_constr (_4, List.rev _2) )
# 4397 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 761 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 4408 "parsing/parser.ml"
          
        in
        
# 1397 "parsing/parser.mly"
      ( _1 )
# 4414 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 4462 "parsing/parser.ml"
              
            in
            
# 1394 "parsing/parser.mly"
        ( Pcty_constr (_1, []) )
# 4468 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 761 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 4479 "parsing/parser.ml"
          
        in
        
# 1397 "parsing/parser.mly"
      ( _1 )
# 4485 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1396 "parsing/parser.mly"
        ( Pcty_extension _1 )
# 4516 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 761 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 4527 "parsing/parser.ml"
          
        in
        
# 1397 "parsing/parser.mly"
      ( _1 )
# 4533 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.class_signature) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_type) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1399 "parsing/parser.mly"
      ( mkcty ~loc:_sloc ~attrs:_2 (Pcty_signature _3) )
# 4579 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.class_signature) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_type) = let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1401 "parsing/parser.mly"
      ( unclosed "object" _loc__1_ "end" _loc__4_ )
# 4624 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_type) = 
# 1403 "parsing/parser.mly"
      ( Cty.attr _1 _2 )
# 4655 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Asttypes.override_flag) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.class_type) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 4731 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1405 "parsing/parser.mly"
      ( mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(_3, _5, _7)) )
# 4740 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = 
# 1255 "parsing/parser.mly"
      ( _2 )
# 4777 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1257 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 4816 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = tys000;
              MenhirLib.EngineTypes.startp = _startpos_tys000_;
              MenhirLib.EngineTypes.endp = _endpos_tys000_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _110;
                MenhirLib.EngineTypes.startp = _startpos__110_;
                MenhirLib.EngineTypes.endp = _endpos__110_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _300 : unit = Obj.magic _300 in
        let tys000 : (Parsetree.core_type list) = Obj.magic tys000 in
        let _110 : unit = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _30 = _300 in
          let tys00 = tys000 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _3 = _30 in
            let tys0 = tys00 in
            let _1 = _11 in
            let _4 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 4889 "parsing/parser.ml"
              
            in
            let _2 =
              let tys = tys0 in
              
# 2663 "parsing/parser.mly"
    ( tys )
# 4897 "parsing/parser.ml"
              
            in
            
# 1260 "parsing/parser.mly"
        ( Pcl_constr(_4, List.rev _2) )
# 4903 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 767 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 4914 "parsing/parser.ml"
          
        in
        
# 1269 "parsing/parser.mly"
      ( _1 )
# 4920 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 4968 "parsing/parser.ml"
              
            in
            
# 1262 "parsing/parser.mly"
        ( Pcl_constr(_1, []) )
# 4974 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 767 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 4985 "parsing/parser.ml"
          
        in
        
# 1269 "parsing/parser.mly"
      ( _1 )
# 4991 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : (Parsetree.class_structure) = Obj.magic _300 in
        let _200 : (Parsetree.attributes) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 1264 "parsing/parser.mly"
        ( unclosed "object" _loc__1_ "end" _loc__4_ )
# 5054 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 767 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 5065 "parsing/parser.ml"
          
        in
        
# 1269 "parsing/parser.mly"
      ( _1 )
# 5071 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.class_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.class_expr) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1266 "parsing/parser.mly"
        ( Pcl_constraint(_2, _4) )
# 5134 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 767 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 5145 "parsing/parser.ml"
          
        in
        
# 1269 "parsing/parser.mly"
      ( _1 )
# 5151 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.class_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.class_expr) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.class_expr) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 1268 "parsing/parser.mly"
        ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 5222 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 767 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 5233 "parsing/parser.ml"
          
        in
        
# 1269 "parsing/parser.mly"
      ( _1 )
# 5239 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.class_structure) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.class_expr) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1271 "parsing/parser.mly"
    ( mkclass ~loc:_sloc ~attrs:_2 (Pcl_structure _3) )
# 5285 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Parsetree.class_field list) = Obj.magic _10 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.class_structure) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 723 "parsing/parser.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 5322 "parsing/parser.ml"
          
        in
        
# 1275 "parsing/parser.mly"
       ( Cstr.mk _1 (List.rev _2) )
# 5328 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = 
# 1377 "parsing/parser.mly"
      ( _1 )
# 5353 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _600;
          MenhirLib.EngineTypes.startp = _startpos__600_;
          MenhirLib.EngineTypes.endp = _endpos__600_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _500;
            MenhirLib.EngineTypes.startp = _startpos__500_;
            MenhirLib.EngineTypes.endp = _endpos__500_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _400;
              MenhirLib.EngineTypes.startp = _startpos__400_;
              MenhirLib.EngineTypes.endp = _endpos__400_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _300;
                MenhirLib.EngineTypes.startp = _startpos__300_;
                MenhirLib.EngineTypes.endp = _endpos__300_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _200;
                  MenhirLib.EngineTypes.startp = _startpos__200_;
                  MenhirLib.EngineTypes.endp = _endpos__200_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _600 : (Parsetree.class_type) = Obj.magic _600 in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.core_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (
# 579 "parsing/parser.mly"
       (string)
# 5403 "parsing/parser.ml"
        ) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__600_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__60_ = _endpos__600_ in
          let _startpos__10_ = _startpos__100_ in
          let _60 = _600 in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _6 = _60 in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1380 "parsing/parser.mly"
        ( Pcty_arrow(Optional _2 , _4, _6) )
# 5428 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__60_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 761 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 5439 "parsing/parser.ml"
          
        in
        
# 1387 "parsing/parser.mly"
      ( _1 )
# 5445 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : (Parsetree.class_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.core_type) = Obj.magic _200 in
        let _100 : (
# 596 "parsing/parser.mly"
       (string)
# 5484 "parsing/parser.ml"
        ) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1382 "parsing/parser.mly"
        ( Pcty_arrow(Optional _1, _2, _4) )
# 5504 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 761 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 5515 "parsing/parser.ml"
          
        in
        
# 1387 "parsing/parser.mly"
      ( _1 )
# 5521 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : (Parsetree.class_type) = Obj.magic _500 in
        let _400 : unit = Obj.magic _400 in
        let _300 : (Parsetree.core_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (
# 579 "parsing/parser.mly"
       (string)
# 5566 "parsing/parser.ml"
        ) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1384 "parsing/parser.mly"
        ( Pcty_arrow(Labelled _1, _3, _5) )
# 5588 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 761 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 5599 "parsing/parser.ml"
          
        in
        
# 1387 "parsing/parser.mly"
      ( _1 )
# 5605 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.class_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.core_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.class_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1386 "parsing/parser.mly"
        ( Pcty_arrow(Nolabel, _1, _3) )
# 5652 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 761 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 5663 "parsing/parser.ml"
          
        in
        
# 1387 "parsing/parser.mly"
      ( _1 )
# 5669 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.attributes) = Obj.magic _9 in
        let _8 : (Parsetree.class_type) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 5733 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _5 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _5 in
        let _4 : (Asttypes.virtual_flag) = Obj.magic _4 in
        let _3 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.class_type_declaration * string Asttypes.loc option) = let _6 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 5761 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1493 "parsing/parser.mly"
      ( let (ext, attrs) = _3 in
        let docs = symbol_docs _sloc in
        Ci.mk _6 _8 ~virt:_4 ~params:_5
                    ~attrs:(attrs@_9) ~loc:(make_loc _sloc) ~docs
        , ext )
# 5774 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_type_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type_declaration list * string Asttypes.loc option) = 
# 1486 "parsing/parser.mly"
      ( let (body, ext) = _1 in ([body],ext) )
# 5799 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_type_declaration) = Obj.magic _2 in
        let _1 : (Parsetree.class_type_declaration list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_type_declaration list * string Asttypes.loc option) = 
# 1488 "parsing/parser.mly"
      ( let (l, ext) = _1 in (_2 :: l, ext) )
# 5830 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 1224 "parsing/parser.mly"
                                                ( [] )
# 5848 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 1225 "parsing/parser.mly"
                                                ( List.rev _2 )
# 5885 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 579 "parsing/parser.mly"
       (string)
# 5906 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2824 "parsing/parser.mly"
                                                ( Lident _1 )
# 5914 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 579 "parsing/parser.mly"
       (string)
# 5945 "parsing/parser.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 2825 "parsing/parser.mly"
                                                ( Ldot(_1, _3) )
# 5955 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 565 "parsing/parser.mly"
       (string * char option)
# 5976 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 2722 "parsing/parser.mly"
                 ( let (n, m) = _1 in Pconst_integer (n, m) )
# 5984 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 526 "parsing/parser.mly"
       (char)
# 6005 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 2723 "parsing/parser.mly"
                 ( Pconst_char _1 )
# 6013 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 617 "parsing/parser.mly"
       (string * string option)
# 6034 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 2724 "parsing/parser.mly"
                 ( let (s, d) = _1 in Pconst_string (s, d) )
# 6042 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 546 "parsing/parser.mly"
       (string * char option)
# 6063 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 2725 "parsing/parser.mly"
                 ( let (f, m) = _1 in Pconst_float (f, m) )
# 6071 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 625 "parsing/parser.mly"
       (string)
# 6092 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2780 "parsing/parser.mly"
                                                ( _1 )
# 6100 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 2781 "parsing/parser.mly"
                                                ( "[]" )
# 6131 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 2782 "parsing/parser.mly"
                                                ( "()" )
# 6162 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 2783 "parsing/parser.mly"
                                                ( "::" )
# 6199 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2784 "parsing/parser.mly"
                                                ( "false" )
# 6224 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2785 "parsing/parser.mly"
                                                ( "true" )
# 6249 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2793 "parsing/parser.mly"
                                                ( _1 )
# 6274 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Longident.t) = 
# 2794 "parsing/parser.mly"
                                                ( Ldot(_1,"::") )
# 6323 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 2795 "parsing/parser.mly"
                                                ( Lident "[]" )
# 6354 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 2796 "parsing/parser.mly"
                                                ( Lident "()" )
# 6385 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 2797 "parsing/parser.mly"
                                                ( Lident "::" )
# 6422 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2798 "parsing/parser.mly"
                                                ( Lident "false" )
# 6447 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2799 "parsing/parser.mly"
                                                ( Lident "true" )
# 6472 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1455 "parsing/parser.mly"
    ( _1, _3, make_loc _sloc )
# 6512 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type * Parsetree.core_type) = 
# 1459 "parsing/parser.mly"
    ( _1, _3 )
# 6549 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = 
# 2271 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 6586 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = 
# 2272 "parsing/parser.mly"
                                                ( [] )
# 6604 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constructor_arguments) = 
# 2386 "parsing/parser.mly"
                                     ( Pcstr_tuple (List.rev _1) )
# 6629 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.constructor_arguments) = 
# 2387 "parsing/parser.mly"
                                     ( Pcstr_record _2 )
# 6666 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.constructor_declaration) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 6718 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2340 "parsing/parser.mly"
    ( let args,res = _2 in
      let info = symbol_info _endpos in
      Type.constructor _1 ~args ?res ~attrs:_3 ~loc:(make_loc _sloc) ~info )
# 6730 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constructor_declaration list) = 
# 2333 "parsing/parser.mly"
                                                         ( [  ] )
# 6755 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constructor_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constructor_declaration list) = 
# 2334 "parsing/parser.mly"
                                                         ( [_1] )
# 6780 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constructor_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constructor_declaration list) = 
# 2335 "parsing/parser.mly"
                                                         ( [_1] )
# 6805 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.constructor_declaration) = Obj.magic _2 in
        let _1 : (Parsetree.constructor_declaration list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_declaration list) = 
# 2336 "parsing/parser.mly"
                                                         ( _2 :: _1 )
# 6836 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 2534 "parsing/parser.mly"
      ( _1 )
# 6861 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 2536 "parsing/parser.mly"
      ( Typ.attr _1 _2 )
# 6892 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 2547 "parsing/parser.mly"
      ( _1 )
# 6917 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.core_type_desc) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 6949 "parsing/parser.ml"
          
        in
        
# 2549 "parsing/parser.mly"
      ( _1 )
# 6955 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 579 "parsing/parser.mly"
       (string)
# 7005 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.core_type_desc) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _1 = _10 in
          
# 2562 "parsing/parser.mly"
  ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 7017 "parsing/parser.ml"
          
        in
        
# 2553 "parsing/parser.mly"
      ( Ptyp_arrow(Optional _2, _4, _6) )
# 7023 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _1 : (
# 596 "parsing/parser.mly"
       (string)
# 7062 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type_desc) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _1 = _10 in
          
# 2562 "parsing/parser.mly"
  ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 7073 "parsing/parser.ml"
          
        in
        
# 2555 "parsing/parser.mly"
      ( Ptyp_arrow(Optional _1 , _2, _4) )
# 7079 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 579 "parsing/parser.mly"
       (string)
# 7124 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.core_type_desc) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _1 = _10 in
          
# 2562 "parsing/parser.mly"
  ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 7135 "parsing/parser.ml"
          
        in
        
# 2557 "parsing/parser.mly"
      ( Ptyp_arrow(Labelled _1, _3, _5) )
# 7141 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (Parsetree.core_type) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type_desc) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _1 = _10 in
          
# 2562 "parsing/parser.mly"
  ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 7181 "parsing/parser.ml"
          
        in
        
# 2559 "parsing/parser.mly"
      ( Ptyp_arrow(Nolabel, _1, _3) )
# 7187 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type list) = 
# 2679 "parsing/parser.mly"
                                           ( [_1] )
# 7212 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type list) = 
# 2680 "parsing/parser.mly"
                                           ( _3 :: _1 )
# 7249 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 2540 "parsing/parser.mly"
      ( _1 )
# 7274 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : (Asttypes.label) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.core_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2542 "parsing/parser.mly"
      ( Ptyp_alias(_1, _4) )
# 7329 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 7340 "parsing/parser.ml"
          
        in
        
# 2543 "parsing/parser.mly"
      ( _1 )
# 7346 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 2873 "parsing/parser.mly"
                                                ( Upto )
# 7371 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 2874 "parsing/parser.mly"
                                                ( Downto )
# 7396 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 1574 "parsing/parser.mly"
      ( _1 )
# 7421 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _30;
                  MenhirLib.EngineTypes.startp = _startpos__30_;
                  MenhirLib.EngineTypes.endp = _endpos__30_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _20;
                    MenhirLib.EngineTypes.startp = _startpos__20_;
                    MenhirLib.EngineTypes.endp = _endpos__20_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _11;
                      MenhirLib.EngineTypes.startp = _startpos__11_;
                      MenhirLib.EngineTypes.endp = _endpos__11_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.module_expr) = Obj.magic _50 in
        let _100 : (
# 625 "parsing/parser.mly"
       (string)
# 7475 "parsing/parser.ml"
        ) = Obj.magic _100 in
        let _30 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _30 in
        let _20 : unit = Obj.magic _20 in
        let _11 : unit = Obj.magic _11 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__11_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _10 = _100 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _11 in
          let _4 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 7511 "parsing/parser.ml"
            
          in
          
# 1613 "parsing/parser.mly"
      ( Pexp_letmodule(_4, _5, _7), _3 )
# 7517 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__11_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 7529 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _60;
          MenhirLib.EngineTypes.startp = _startpos__60_;
          MenhirLib.EngineTypes.endp = _endpos__60_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _40;
              MenhirLib.EngineTypes.startp = _startpos__40_;
              MenhirLib.EngineTypes.endp = _endpos__40_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _30;
                MenhirLib.EngineTypes.startp = _startpos__30_;
                MenhirLib.EngineTypes.endp = _endpos__30_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _60 : (Parsetree.expression) = Obj.magic _60 in
        let _50 : unit = Obj.magic _50 in
        let _40 : (Parsetree.extension_constructor) = Obj.magic _40 in
        let _30 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _30 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__60_ in
        let _v : (Parsetree.expression) = let _1 =
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1615 "parsing/parser.mly"
      ( Pexp_letexception(_4, _6), _3 )
# 7591 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__60_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 7603 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _30;
                  MenhirLib.EngineTypes.startp = _startpos__30_;
                  MenhirLib.EngineTypes.endp = _endpos__30_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _20;
                    MenhirLib.EngineTypes.startp = _startpos__20_;
                    MenhirLib.EngineTypes.endp = _endpos__20_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _11;
                      MenhirLib.EngineTypes.startp = _startpos__11_;
                      MenhirLib.EngineTypes.endp = _endpos__11_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _40 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _40 in
        let _30 : (Asttypes.override_flag) = Obj.magic _30 in
        let _20 : unit = Obj.magic _20 in
        let _11 : unit = Obj.magic _11 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__11_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _7 = _70 in
          let _6 = _60 in
          let _10 = _100 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _11 in
          let _5 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 7689 "parsing/parser.ml"
            
          in
          
# 1617 "parsing/parser.mly"
      ( Pexp_open(_3, _5, _7), _4 )
# 7695 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__11_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 7707 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30;
            MenhirLib.EngineTypes.startp = _startpos__30_;
            MenhirLib.EngineTypes.endp = _endpos__30_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _40 : (Parsetree.case list) = Obj.magic _40 in
        let _30 : (unit) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1619 "parsing/parser.mly"
      ( Pexp_function(List.rev _4), _2 )
# 7755 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 7767 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30;
            MenhirLib.EngineTypes.startp = _startpos__30_;
            MenhirLib.EngineTypes.endp = _endpos__30_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _40 : (Parsetree.expression) = Obj.magic _40 in
        let _30 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1621 "parsing/parser.mly"
      ( let (l,o,p) = _3 in
        Pexp_fun(l, o, p, _4), _2 )
# 7816 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 7828 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _30;
                  MenhirLib.EngineTypes.startp = _startpos__30_;
                  MenhirLib.EngineTypes.endp = _endpos__30_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _20;
                    MenhirLib.EngineTypes.startp = _startpos__20_;
                    MenhirLib.EngineTypes.endp = _endpos__20_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (string Asttypes.loc list) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : unit = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__7_ = _endpos__70_ in
          let _startpos__1_ = _startpos__10_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1624 "parsing/parser.mly"
      ( (mk_newtypes ~loc:_sloc _5 _7).pexp_desc, _2 )
# 7902 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 7914 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _60;
          MenhirLib.EngineTypes.startp = _startpos__60_;
          MenhirLib.EngineTypes.endp = _endpos__60_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _40;
              MenhirLib.EngineTypes.startp = _startpos__40_;
              MenhirLib.EngineTypes.endp = _endpos__40_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _30;
                MenhirLib.EngineTypes.startp = _startpos__30_;
                MenhirLib.EngineTypes.endp = _endpos__30_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _60 : (Parsetree.case list) = Obj.magic _60 in
        let _50 : (unit) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__60_ in
        let _v : (Parsetree.expression) = let _1 =
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1626 "parsing/parser.mly"
      ( Pexp_match(_3, List.rev _6), _2 )
# 7976 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__60_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 7988 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _60;
          MenhirLib.EngineTypes.startp = _startpos__60_;
          MenhirLib.EngineTypes.endp = _endpos__60_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _40;
              MenhirLib.EngineTypes.startp = _startpos__40_;
              MenhirLib.EngineTypes.endp = _endpos__40_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _30;
                MenhirLib.EngineTypes.startp = _startpos__30_;
                MenhirLib.EngineTypes.endp = _endpos__30_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _60 : (Parsetree.case list) = Obj.magic _60 in
        let _50 : (unit) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__60_ in
        let _v : (Parsetree.expression) = let _1 =
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1628 "parsing/parser.mly"
      ( Pexp_try(_3, List.rev _6), _2 )
# 8050 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__60_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 8062 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _20;
                MenhirLib.EngineTypes.startp = _startpos__20_;
                MenhirLib.EngineTypes.endp = _endpos__20_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : unit = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1630 "parsing/parser.mly"
      ( syntax_error() )
# 8117 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 8129 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _30;
                  MenhirLib.EngineTypes.startp = _startpos__30_;
                  MenhirLib.EngineTypes.endp = _endpos__30_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _20;
                    MenhirLib.EngineTypes.startp = _startpos__20_;
                    MenhirLib.EngineTypes.endp = _endpos__20_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1632 "parsing/parser.mly"
      ( Pexp_ifthenelse(_3, _5, Some _7), _2 )
# 8198 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 8210 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _20;
                MenhirLib.EngineTypes.startp = _startpos__20_;
                MenhirLib.EngineTypes.endp = _endpos__20_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1634 "parsing/parser.mly"
      ( Pexp_ifthenelse(_3, _5, None), _2 )
# 8265 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 8277 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _60;
          MenhirLib.EngineTypes.startp = _startpos__60_;
          MenhirLib.EngineTypes.endp = _endpos__60_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _40;
              MenhirLib.EngineTypes.startp = _startpos__40_;
              MenhirLib.EngineTypes.endp = _endpos__40_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _30;
                MenhirLib.EngineTypes.startp = _startpos__30_;
                MenhirLib.EngineTypes.endp = _endpos__30_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _60 : unit = Obj.magic _60 in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__60_ in
        let _v : (Parsetree.expression) = let _1 =
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1636 "parsing/parser.mly"
      ( Pexp_while(_3, _5), _2 )
# 8339 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__60_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 8351 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _90;
            MenhirLib.EngineTypes.startp = _startpos__90_;
            MenhirLib.EngineTypes.endp = _endpos__90_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _80;
              MenhirLib.EngineTypes.startp = _startpos__80_;
              MenhirLib.EngineTypes.endp = _endpos__80_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _70;
                MenhirLib.EngineTypes.startp = _startpos__70_;
                MenhirLib.EngineTypes.endp = _endpos__70_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _60;
                  MenhirLib.EngineTypes.startp = _startpos__60_;
                  MenhirLib.EngineTypes.endp = _endpos__60_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _50;
                    MenhirLib.EngineTypes.startp = _startpos__50_;
                    MenhirLib.EngineTypes.endp = _endpos__50_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _40;
                      MenhirLib.EngineTypes.startp = _startpos__40_;
                      MenhirLib.EngineTypes.endp = _endpos__40_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _30;
                        MenhirLib.EngineTypes.startp = _startpos__30_;
                        MenhirLib.EngineTypes.endp = _endpos__30_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _20;
                          MenhirLib.EngineTypes.startp = _startpos__20_;
                          MenhirLib.EngineTypes.endp = _endpos__20_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _11;
                            MenhirLib.EngineTypes.startp = _startpos__11_;
                            MenhirLib.EngineTypes.endp = _endpos__11_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _90 : (Parsetree.expression) = Obj.magic _90 in
        let _80 : unit = Obj.magic _80 in
        let _70 : (Parsetree.expression) = Obj.magic _70 in
        let _60 : (Asttypes.direction_flag) = Obj.magic _60 in
        let _50 : (Parsetree.expression) = Obj.magic _50 in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.pattern) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _11 : unit = Obj.magic _11 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__11_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _10 = _100 in
          let _9 = _90 in
          let _8 = _80 in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _11 in
          
# 1639 "parsing/parser.mly"
      ( Pexp_for(_3, _5, _7, _6, _9), _2 )
# 8441 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__100_ in
        let _startpos__1_ = _startpos__11_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 8453 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1641 "parsing/parser.mly"
      ( Pexp_assert _3, _2 )
# 8494 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__30_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 8506 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.expression) = let _1 =
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1643 "parsing/parser.mly"
      ( Pexp_lazy _3, _2 )
# 8547 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__30_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 8559 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30;
            MenhirLib.EngineTypes.startp = _startpos__30_;
            MenhirLib.EngineTypes.endp = _endpos__30_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.class_structure) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1645 "parsing/parser.mly"
      ( Pexp_object _3, _2 )
# 8607 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 8619 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30;
            MenhirLib.EngineTypes.startp = _startpos__30_;
            MenhirLib.EngineTypes.endp = _endpos__30_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.class_structure) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__4_ = _endpos__40_ in
          let _startpos__4_ = _startpos__40_ in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          
# 1647 "parsing/parser.mly"
      ( unclosed "object" _loc__1_ "end" _loc__4_ )
# 8673 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1576 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 8685 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _10000 : (
# 557 "parsing/parser.mly"
       (string)
# 8717 "parsing/parser.ml"
        ) = Obj.magic _10000 in
        let _1100 : (Parsetree.expression) = Obj.magic _1100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1100_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__110_ = _startpos__1100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _300 = _3000 in
          let _1000 = _10000 in
          let _110 = _1100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _30 = _300 in
            let _100 = _1000 in
            let _11 = _110 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _3 = _30 in
              let _10 = _100 in
              let _1 = _11 in
              let _2 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 8755 "parsing/parser.ml"
                
              in
              
# 1662 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 8761 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 8767 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__110_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 8778 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 8784 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _10000 : (
# 558 "parsing/parser.mly"
       (string)
# 8816 "parsing/parser.ml"
        ) = Obj.magic _10000 in
        let _1100 : (Parsetree.expression) = Obj.magic _1100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1100_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__110_ = _startpos__1100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _300 = _3000 in
          let _1000 = _10000 in
          let _110 = _1100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _30 = _300 in
            let _100 = _1000 in
            let _11 = _110 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _3 = _30 in
              let _10 = _100 in
              let _1 = _11 in
              let _2 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 8854 "parsing/parser.ml"
                
              in
              
# 1664 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 8860 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 8866 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__110_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 8877 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 8883 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _10000 : (
# 559 "parsing/parser.mly"
       (string)
# 8915 "parsing/parser.ml"
        ) = Obj.magic _10000 in
        let _1100 : (Parsetree.expression) = Obj.magic _1100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1100_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__110_ = _startpos__1100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _300 = _3000 in
          let _1000 = _10000 in
          let _110 = _1100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _30 = _300 in
            let _100 = _1000 in
            let _11 = _110 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _3 = _30 in
              let _10 = _100 in
              let _1 = _11 in
              let _2 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 8953 "parsing/parser.ml"
                
              in
              
# 1666 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 8959 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 8965 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__110_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 8976 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 8982 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _10000 : (
# 560 "parsing/parser.mly"
       (string)
# 9014 "parsing/parser.ml"
        ) = Obj.magic _10000 in
        let _1100 : (Parsetree.expression) = Obj.magic _1100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1100_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__110_ = _startpos__1100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _300 = _3000 in
          let _1000 = _10000 in
          let _110 = _1100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _30 = _300 in
            let _100 = _1000 in
            let _11 = _110 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _3 = _30 in
              let _10 = _100 in
              let _1 = _11 in
              let _2 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 9052 "parsing/parser.ml"
                
              in
              
# 1668 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9058 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 9064 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__110_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 9075 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 9081 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1100;
              MenhirLib.EngineTypes.startp = _startpos__1100_;
              MenhirLib.EngineTypes.endp = _endpos__1100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _10000 : (
# 561 "parsing/parser.mly"
       (string)
# 9113 "parsing/parser.ml"
        ) = Obj.magic _10000 in
        let _1100 : (Parsetree.expression) = Obj.magic _1100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1100_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _startpos__110_ = _startpos__1100_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _300 = _3000 in
          let _1000 = _10000 in
          let _110 = _1100 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _30 = _300 in
            let _100 = _1000 in
            let _11 = _110 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _3 = _30 in
              let _10 = _100 in
              let _1 = _11 in
              let _2 =
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _1 = _10 in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 9151 "parsing/parser.ml"
                
              in
              
# 1670 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9157 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 9163 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__110_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 9174 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 9180 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1671 "parsing/parser.mly"
                 ("+")
# 9243 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 9256 "parsing/parser.ml"
                
              in
              
# 1672 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9262 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 9268 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 9279 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 9285 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1673 "parsing/parser.mly"
                    ("+.")
# 9348 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 9361 "parsing/parser.ml"
                
              in
              
# 1674 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9367 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 9373 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 9384 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 9390 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1675 "parsing/parser.mly"
                   ("+=")
# 9453 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 9466 "parsing/parser.ml"
                
              in
              
# 1676 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9472 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 9478 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 9489 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 9495 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1677 "parsing/parser.mly"
                  ("-")
# 9558 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 9571 "parsing/parser.ml"
                
              in
              
# 1678 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9577 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 9583 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 9594 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 9600 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1679 "parsing/parser.mly"
                     ("-.")
# 9663 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 9676 "parsing/parser.ml"
                
              in
              
# 1680 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9682 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 9688 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 9699 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 9705 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1681 "parsing/parser.mly"
                 ("*")
# 9768 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 9781 "parsing/parser.ml"
                
              in
              
# 1682 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9787 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 9793 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 9804 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 9810 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1683 "parsing/parser.mly"
                    ("%")
# 9873 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 9886 "parsing/parser.ml"
                
              in
              
# 1684 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9892 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 9898 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 9909 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 9915 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1685 "parsing/parser.mly"
                  ("=")
# 9978 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 9991 "parsing/parser.ml"
                
              in
              
# 1686 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 9997 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 10003 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10014 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10020 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1687 "parsing/parser.mly"
                 ("<")
# 10083 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 10096 "parsing/parser.ml"
                
              in
              
# 1688 "parsing/parser.mly"
    ( mkinfix _1 _2 _3 )
# 10102 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 10108 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10119 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10125 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1689 "parsing/parser.mly"
                    (">")
# 10188 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 10201 "parsing/parser.ml"
                
              in
              
# 1690 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 10207 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 10213 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10224 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10230 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1691 "parsing/parser.mly"
               ("or")
# 10293 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 10306 "parsing/parser.ml"
                
              in
              
# 1692 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 10312 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 10318 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10329 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10335 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1693 "parsing/parser.mly"
                   ("||")
# 10398 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 10411 "parsing/parser.ml"
                
              in
              
# 1694 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 10417 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 10423 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10434 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10440 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1695 "parsing/parser.mly"
                      ("&")
# 10503 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 10516 "parsing/parser.ml"
                
              in
              
# 1696 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 10522 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 10528 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10539 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10545 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1697 "parsing/parser.mly"
                       ("&&")
# 10608 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 10621 "parsing/parser.ml"
                
              in
              
# 1698 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 10627 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 10633 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10644 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10650 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3000;
          MenhirLib.EngineTypes.startp = _startpos__3000_;
          MenhirLib.EngineTypes.endp = _endpos__3000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100000;
            MenhirLib.EngineTypes.startp = _startpos__100000_;
            MenhirLib.EngineTypes.endp = _endpos__100000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3000 : (Parsetree.expression) = Obj.magic _3000 in
        let _100000 : unit = Obj.magic _100000 in
        let _1000 : (Parsetree.expression) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__3000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__300_ = _endpos__3000_ in
          let _endpos__10000_ = _endpos__100000_ in
          let _startpos__10000_ = _startpos__100000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _300 = _3000 in
          let _10000 = _100000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__1000_ = _endpos__10000_ in
            let _startpos__1000_ = _startpos__10000_ in
            let _30 = _300 in
            let _1000 = _10000 in
            let _10 = _100 in
            let _1 =
              let _endpos__100_ = _endpos__1000_ in
              let _startpos__100_ = _startpos__1000_ in
              let _3 = _30 in
              let _100 = _1000 in
              let _1 = _10 in
              let _2 =
                let _endpos__10_ = _endpos__100_ in
                let _startpos__10_ = _startpos__100_ in
                let _10 = _100 in
                let _1 =
                  let _1 = _10 in
                  
# 1699 "parsing/parser.mly"
                       (":=")
# 10713 "parsing/parser.ml"
                  
                in
                let _endpos__1_ = _endpos__10_ in
                let _startpos__1_ = _startpos__10_ in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                let _loc = (_startpos, _endpos) in
                
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 10726 "parsing/parser.ml"
                
              in
              
# 1700 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 10732 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 10738 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__300_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10749 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10755 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2000;
          MenhirLib.EngineTypes.startp = _startpos__2000_;
          MenhirLib.EngineTypes.endp = _endpos__2000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2000 : (Parsetree.expression) = Obj.magic _2000 in
        let _1000 : (string) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__2000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__200_ = _endpos__2000_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _2 = _20 in
              let _1 = _10 in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1702 "parsing/parser.mly"
      ( mkuminus ~oploc:_loc__1_ _1 _2 )
# 10803 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 10809 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__200_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10820 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10826 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2000;
          MenhirLib.EngineTypes.startp = _startpos__2000_;
          MenhirLib.EngineTypes.endp = _endpos__2000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2000 : (Parsetree.expression) = Obj.magic _2000 in
        let _1000 : (string) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__2000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__200_ = _endpos__2000_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _200 = _2000 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _20 = _200 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _2 = _20 in
              let _1 = _10 in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1704 "parsing/parser.mly"
      ( mkuplus ~oploc:_loc__1_ _1 _2 )
# 10874 "parsing/parser.ml"
              
            in
            
# 1650 "parsing/parser.mly"
            ( _1 )
# 10880 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__200_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10891 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10897 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic _200 in
        let _100 : (Parsetree.expression) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1652 "parsing/parser.mly"
    ( Pexp_apply(_1, List.rev _2) )
# 10936 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10947 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 10953 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.expression list) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1654 "parsing/parser.mly"
    ( Pexp_tuple(List.rev _1) )
# 10984 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10995 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 11001 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 11058 "parsing/parser.ml"
              
            in
            
# 1656 "parsing/parser.mly"
    ( Pexp_construct(_1, Some _2) )
# 11064 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11075 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 11081 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _100 : (Asttypes.label) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1658 "parsing/parser.mly"
    ( Pexp_variant(_1, Some _2) )
# 11120 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11131 "parsing/parser.ml"
          
        in
        
# 1579 "parsing/parser.mly"
    ( _1 )
# 11137 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1581 "parsing/parser.mly"
    ( expr_of_let_bindings ~loc:_sloc _1 _3 )
# 11177 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc__2_ = (_startpos__2_, _endpos__2_) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1583 "parsing/parser.mly"
      ( mkexp_cons ~loc:_sloc _loc__2_ (ghexp ~loc:_sloc (Pexp_tuple[_1;_3])) )
# 11218 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 11270 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1585 "parsing/parser.mly"
      ( mkexp ~loc:_sloc (Pexp_setinstvar(_1, _3)) )
# 11280 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 11344 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1587 "parsing/parser.mly"
      ( mkexp ~loc:_sloc (Pexp_setfield(_1, _3, _5)) )
# 11353 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1589 "parsing/parser.mly"
      ( array_set ~loc:_sloc _1 _4 _7 )
# 11417 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1591 "parsing/parser.mly"
      ( string_set ~loc:_sloc _1 _4 _7 )
# 11481 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1593 "parsing/parser.mly"
      ( bigarray_set ~loc:_sloc _1 _4 _7 )
# 11545 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 562 "parsing/parser.mly"
       (string)
# 11601 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1595 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc (Lident ("." ^ _2 ^ "[]<-")) _1 _4 _7 )
# 11613 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 562 "parsing/parser.mly"
       (string)
# 11669 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1597 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc (Lident ("." ^ _2 ^ "()<-")) _1 _4 _7 )
# 11681 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 562 "parsing/parser.mly"
       (string)
# 11737 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1599 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc (Lident ("." ^ _2 ^ "{}<-")) _1 _4 _7 )
# 11749 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 562 "parsing/parser.mly"
       (string)
# 11815 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1601 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc (Ldot(_3,"." ^ _4 ^ "[]<-")) _1 _6 _9 )
# 11829 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 562 "parsing/parser.mly"
       (string)
# 11895 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1603 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "()<-")) _1 _6 _9 )
# 11909 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 562 "parsing/parser.mly"
       (string)
# 11975 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1605 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "{}<-")) _1 _6 _9 )
# 11989 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 1607 "parsing/parser.mly"
      ( Exp.attr _1 _2 )
# 12020 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1609 "parsing/parser.mly"
     ( not_expecting _loc__1_ "wildcard \"_\"" )
# 12046 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression list) = 
# 1989 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 12083 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression list) = 
# 1990 "parsing/parser.mly"
                                                ( [_3; _1] )
# 12120 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression list) = 
# 2020 "parsing/parser.mly"
                                                ( [_1] )
# 12145 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression list) = 
# 2021 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 12182 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Asttypes.loc option * Parsetree.attributes) = 
# 3001 "parsing/parser.mly"
                 ( None, [] )
# 12200 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string Asttypes.loc option * Parsetree.attributes) = 
# 3002 "parsing/parser.mly"
                         ( None, _1 :: _2 )
# 12231 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string Asttypes.loc option * Parsetree.attributes) = 
# 3003 "parsing/parser.mly"
                               ( Some _2, _3 )
# 12268 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 3006 "parsing/parser.mly"
                                           ( (_2, _3) )
# 12311 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.extension_constructor) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 12363 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2449 "parsing/parser.mly"
      ( let args, res = _2 in
        let info = symbol_info _endpos in
        Te.decl _1 ~args ?res ~attrs:_3 ~loc:(make_loc _sloc) ~info )
# 12375 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _11;
            MenhirLib.EngineTypes.startp = _startpos__11_;
            MenhirLib.EngineTypes.endp = _endpos__11_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension_constructor) = let _3 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 12433 "parsing/parser.ml"
          
        in
        let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 12454 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2461 "parsing/parser.mly"
      ( let info = symbol_info _endpos in
        Te.rebind _1 _3 ~attrs:_4 ~loc:(make_loc _sloc) ~info )
# 12465 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.object_field) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 12523 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2695 "parsing/parser.mly"
    ( let info = symbol_info _endpos in
      let attrs = add_info_attrs info _4 in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 12535 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _v : (Asttypes.label Asttypes.loc * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 12587 "parsing/parser.ml"
          
        in
        
# 2015 "parsing/parser.mly"
      ( (_1, _3) )
# 12593 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Asttypes.label Asttypes.loc * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 12633 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__10_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2017 "parsing/parser.mly"
      ( (_1, exp_of_label ~loc:_sloc {_1 with txt = Lident _1.txt}) )
# 12644 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (unit) = Obj.magic _2 in
        let _1 : (Asttypes.label Asttypes.loc * Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = 
# 2010 "parsing/parser.mly"
                        ( [_1] )
# 12675 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Asttypes.label Asttypes.loc * Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = 
# 2011 "parsing/parser.mly"
                                    ( _1 :: _3 )
# 12712 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.attributes) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.object_field) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 12782 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2702 "parsing/parser.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 12798 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2989 "parsing/parser.mly"
    ( mark_symbol_docs _sloc;
      Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 12845 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 1949 "parsing/parser.mly"
      ( _1 )
# 12870 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1951 "parsing/parser.mly"
      ( mkexp_constraint ~loc:_sloc _3 _1 )
# 12910 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 1975 "parsing/parser.mly"
      ( _2 )
# 12941 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : (Parsetree.expression) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.core_type) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1977 "parsing/parser.mly"
      ( Pexp_constraint (_4, _2) )
# 12996 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 13007 "parsing/parser.ml"
          
        in
        
# 1978 "parsing/parser.mly"
      ( _1 )
# 13013 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1981 "parsing/parser.mly"
      (
       let (l,o,p) = _1 in
       ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2))
      )
# 13050 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string Asttypes.loc list) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1986 "parsing/parser.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 13102 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (string Asttypes.loc * Parsetree.module_type option) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 859 "parsing/parser.mly"
                        ("*")
# 13141 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 13160 "parsing/parser.ml"
          
        in
        
# 860 "parsing/parser.mly"
      ( _1, None )
# 13166 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (string) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (string Asttypes.loc * Parsetree.module_type option) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 13230 "parsing/parser.ml"
          
        in
        
# 862 "parsing/parser.mly"
      ( _2, Some _4 )
# 13236 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 625 "parsing/parser.mly"
       (string)
# 13257 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 866 "parsing/parser.mly"
               ( _1 )
# 13265 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 867 "parsing/parser.mly"
               ( "_" )
# 13290 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string Asttypes.loc * Parsetree.module_type option) = Obj.magic _2 in
        let _1 : ((string Asttypes.loc * Parsetree.module_type option) list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : ((string Asttypes.loc * Parsetree.module_type option) list) = 
# 872 "parsing/parser.mly"
      ( _2 :: _1 )
# 13321 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string Asttypes.loc * Parsetree.module_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((string Asttypes.loc * Parsetree.module_type option) list) = 
# 874 "parsing/parser.mly"
      ( [ _1 ] )
# 13346 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 2377 "parsing/parser.mly"
                                  ( (Pcstr_tuple [],None) )
# 13364 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 2378 "parsing/parser.mly"
                                  ( (_2,None) )
# 13395 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 2380 "parsing/parser.mly"
                                  ( (_2,Some _4) )
# 13438 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 2382 "parsing/parser.mly"
                                  ( (Pcstr_tuple [],Some _2) )
# 13469 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 625 "parsing/parser.mly"
       (string)
# 13490 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 2738 "parsing/parser.mly"
                              ( _1 )
# 13498 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 579 "parsing/parser.mly"
       (string)
# 13519 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 2739 "parsing/parser.mly"
                              ( _1 )
# 13527 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 705 "parsing/parser.mly"
      (Parsetree.structure)
# 13558 "parsing/parser.ml"
        ) = 
# 798 "parsing/parser.mly"
                                         ( _1 )
# 13562 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.object_field) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2713 "parsing/parser.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) _1 )
# 13596 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.signature) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 707 "parsing/parser.mly"
      (Parsetree.signature)
# 13627 "parsing/parser.ml"
        ) = 
# 802 "parsing/parser.mly"
                                         ( _1 )
# 13631 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 3009 "parsing/parser.mly"
                                                  ( (_2, _3) )
# 13674 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 579 "parsing/parser.mly"
       (string)
# 13695 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 2716 "parsing/parser.mly"
                                                ( _1 )
# 13703 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.attributes) = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _1 : (Asttypes.mutable_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.label_declaration) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 13767 "parsing/parser.ml"
          
        in
        let _startpos__2_ = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = if Pervasives.(!=) _startpos__1_ _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2396 "parsing/parser.mly"
      ( let info = symbol_info _endpos in
        Type.field _2 _4 ~mut:_1 ~attrs:_5 ~loc:(make_loc _sloc) ~info )
# 13781 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.attributes) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.attributes) = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _1 : (Asttypes.mutable_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.label_declaration) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 13857 "parsing/parser.ml"
          
        in
        let _startpos__2_ = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if Pervasives.(!=) _startpos__1_ _endpos__1_ then
          _startpos__1_
        else
          _startpos__2_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2401 "parsing/parser.mly"
      ( let info =
          match rhs_info _endpos__5_ with
          | Some _ as info_before_semi -> info_before_semi
          | None -> symbol_info _endpos
       in
       Type.field _2 _4 ~mut:_1 ~attrs:(_5 @ _7) ~loc:(make_loc _sloc) ~info )
# 13875 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 2390 "parsing/parser.mly"
                                                ( [_1] )
# 13900 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 2391 "parsing/parser.mly"
                                                ( [_1] )
# 13925 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.label_declaration list) = 
# 2392 "parsing/parser.mly"
                                                ( _1 :: _2 )
# 13956 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 566 "parsing/parser.mly"
       (string)
# 13983 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 1883 "parsing/parser.mly"
      ( (Labelled _1, _2) )
# 13991 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string * Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 1885 "parsing/parser.mly"
      ( (Labelled (fst _2), snd _2) )
# 14022 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string * Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 1887 "parsing/parser.mly"
      ( (Optional (fst _2), snd _2) )
# 14053 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 596 "parsing/parser.mly"
       (string)
# 14080 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 1889 "parsing/parser.mly"
      ( (Optional _1, _2) )
# 14088 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 579 "parsing/parser.mly"
       (string)
# 14109 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string * Parsetree.expression) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1893 "parsing/parser.mly"
      ( (_1, mkexp ~loc:_sloc (Pexp_ident(mkrhs (Lident _1) _sloc))) )
# 14120 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string * Parsetree.pattern) = 
# 1555 "parsing/parser.mly"
      ( _1 )
# 14145 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string * Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1557 "parsing/parser.mly"
      ( let (lab, pat) = _1 in
        (lab, mkpat ~loc:_sloc (Ppat_constraint(pat, _3))) )
# 14186 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 579 "parsing/parser.mly"
       (string)
# 14207 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2802 "parsing/parser.mly"
                                                ( Lident _1 )
# 14215 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 579 "parsing/parser.mly"
       (string)
# 14246 "parsing/parser.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 2803 "parsing/parser.mly"
                                                ( Ldot(_1, _3) )
# 14256 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 14277 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string * Parsetree.pattern) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 14300 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__10_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1562 "parsing/parser.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 14311 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 1877 "parsing/parser.mly"
      ( (Nolabel, _1) )
# 14336 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.arg_label * Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 1879 "parsing/parser.mly"
      ( _1 )
# 14361 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression option) = Obj.magic _4 in
        let _3 : (string * Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1523 "parsing/parser.mly"
      ( (Optional (fst _3), _4, snd _3) )
# 14410 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string * Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1525 "parsing/parser.mly"
      ( (Optional (fst _2), None, snd _2) )
# 14441 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression option) = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 596 "parsing/parser.mly"
       (string)
# 14486 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1527 "parsing/parser.mly"
      ( (Optional _1, _4, _3) )
# 14494 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 596 "parsing/parser.mly"
       (string)
# 14521 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1529 "parsing/parser.mly"
      ( (Optional _1, None, _2) )
# 14529 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string * Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1531 "parsing/parser.mly"
      ( (Labelled (fst _3), None, snd _3) )
# 14572 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string * Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1533 "parsing/parser.mly"
      ( (Labelled (fst _2), None, snd _2) )
# 14603 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 566 "parsing/parser.mly"
       (string)
# 14630 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1535 "parsing/parser.mly"
      ( (Labelled _1, None, _2) )
# 14638 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 1537 "parsing/parser.mly"
      ( (Nolabel, None, _1) )
# 14663 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic _2 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _v : (Longident.t Asttypes.loc * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 14721 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2003 "parsing/parser.mly"
      ( (_1, mkexp_opt_constraint ~loc:_sloc _4 _2) )
# 14731 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic _2 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t Asttypes.loc * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 14777 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2005 "parsing/parser.mly"
      ( (_1,
         mkexp_opt_constraint ~loc:_sloc
           (exp_of_longident ~loc:_sloc _1) _2) )
# 14789 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t Asttypes.loc * Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((Longident.t Asttypes.loc * Parsetree.expression) list) = 
# 1997 "parsing/parser.mly"
              ( [_1] )
# 14814 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : ((Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t Asttypes.loc * Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Longident.t Asttypes.loc * Parsetree.expression) list) = 
# 1998 "parsing/parser.mly"
                                 ( _1 :: _3 )
# 14851 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t Asttypes.loc * Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : ((Longident.t Asttypes.loc * Parsetree.expression) list) = 
# 1999 "parsing/parser.mly"
                   ( [_1] )
# 14882 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type option) = Obj.magic _2 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _v : (Longident.t Asttypes.loc * Parsetree.pattern) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 14940 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2204 "parsing/parser.mly"
     ( (_1, mkpat_opt_constraint ~loc:_sloc _4 _2) )
# 14950 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type option) = Obj.magic _2 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t Asttypes.loc * Parsetree.pattern) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 14996 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2206 "parsing/parser.mly"
     ( let label = {_1 with txt = Longident.last _1.txt} in
       (_1, mkpat_opt_constraint ~loc:_sloc
              (pat_of_label ~loc:_sloc label) _2) )
# 15008 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t Asttypes.loc * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((Longident.t Asttypes.loc * Parsetree.pattern) list * Asttypes.closed_flag) = 
# 2196 "parsing/parser.mly"
                ( [_1], Closed )
# 15033 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t Asttypes.loc * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : ((Longident.t Asttypes.loc * Parsetree.pattern) list * Asttypes.closed_flag) = 
# 2197 "parsing/parser.mly"
                     ( [_1], Closed )
# 15064 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (unit) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t Asttypes.loc * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : ((Longident.t Asttypes.loc * Parsetree.pattern) list * Asttypes.closed_flag) = 
# 2198 "parsing/parser.mly"
                                         ( [_1], Open )
# 15107 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : ((Longident.t Asttypes.loc * Parsetree.pattern) list * Asttypes.closed_flag) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t Asttypes.loc * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Longident.t Asttypes.loc * Parsetree.pattern) list * Asttypes.closed_flag) = 
# 2200 "parsing/parser.mly"
      ( let (fields, closed) = _3 in _1 :: fields, closed )
# 15144 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.attributes) = Obj.magic _5 in
        let _4 : (Parsetree.pattern * Parsetree.expression) = Obj.magic _4 in
        let _3 : (Asttypes.rec_flag) = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (let_bindings) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1940 "parsing/parser.mly"
      ( let (ext, attr) = _2 in
        mklbs ~loc:_sloc ext _3 (mklb ~loc:_sloc true _4 (attr@_5)) )
# 15197 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 1900 "parsing/parser.mly"
              ( mkpatvar ~loc:_loc _1 )
# 15235 "parsing/parser.ml"
          
        in
        
# 1903 "parsing/parser.mly"
      ( (_1, _2) )
# 15241 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 1900 "parsing/parser.mly"
              ( mkpatvar ~loc:_loc _1 )
# 15291 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1905 "parsing/parser.mly"
      ( let v = _1 in (* PR#7344 *)
        let t =
          match _2 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__1_, _endpos__2_) in
        (ghpat ~loc:patloc (Ppat_constraint(v, typ)),
         mkexp_constraint ~loc:_sloc _4 _2) )
# 15312 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Asttypes.label Asttypes.loc list) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 1900 "parsing/parser.mly"
              ( mkpatvar ~loc:_loc _1 )
# 15380 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        
# 1918 "parsing/parser.mly"
      ( let typloc = (_startpos__3_, _endpos__5_) in
        let patloc = (_startpos__1_, _endpos__5_) in
        (ghpat ~loc:patloc
           (Ppat_constraint(_1, ghtyp ~loc:typloc (Ptyp_poly(List.rev _3,_5)))),
         _7) )
# 15391 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _10;
                        MenhirLib.EngineTypes.startp = _startpos__10_;
                        MenhirLib.EngineTypes.endp = _endpos__10_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string Asttypes.loc list) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 1900 "parsing/parser.mly"
              ( mkpatvar ~loc:_loc _1 )
# 15465 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1924 "parsing/parser.mly"
      ( let exp, poly =
          wrap_type_annotation ~loc:_sloc _4 _6 _8 in
        let loc = (_startpos__1_, _endpos__6_) in
        (ghpat ~loc (Ppat_constraint(_1, poly)), exp) )
# 15478 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 1929 "parsing/parser.mly"
      ( (_1, _3) )
# 15515 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 1931 "parsing/parser.mly"
      ( let loc = (_startpos__1_, _endpos__3_) in
        (ghpat ~loc (Ppat_constraint(_1, _3)), _5) )
# 15565 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (let_bindings) = 
# 1935 "parsing/parser.mly"
                                                ( _1 )
# 15590 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (let_binding) = Obj.magic _2 in
        let _1 : (let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (let_bindings) = 
# 1936 "parsing/parser.mly"
                                                ( addlb _1 _2 )
# 15621 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _2 in
        let _10 : (string) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.extension_constructor) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 15673 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2373 "parsing/parser.mly"
      ( let args, res = _2 in
        Te.decl _1 ~args ?res ~attrs:_3 ~loc:(make_loc _sloc) )
# 15684 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 1566 "parsing/parser.mly"
      ( _1 )
# 15709 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.core_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1568 "parsing/parser.mly"
      ( Ppat_constraint(_1, _3) )
# 15756 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 15767 "parsing/parser.ml"
          
        in
        
# 1569 "parsing/parser.mly"
      ( _1 )
# 15773 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 15794 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (string Asttypes.loc list) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 15817 "parsing/parser.ml"
          
        in
        
# 1896 "parsing/parser.mly"
                                      ( [_1] )
# 15823 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string Asttypes.loc list) = Obj.magic _2 in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 15850 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _v : (string Asttypes.loc list) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 15873 "parsing/parser.ml"
          
        in
        
# 1897 "parsing/parser.mly"
                                      ( _1 :: _2 )
# 15879 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = 
# 1967 "parsing/parser.mly"
      ( Exp.case _1 _3 )
# 15916 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.case) = 
# 1969 "parsing/parser.mly"
      ( Exp.case _1 ~guard:_3 _5 )
# 15965 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1971 "parsing/parser.mly"
      ( Exp.case _1 (Exp.unreachable ~loc:(make_loc _loc__3_) ()) )
# 16003 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.case) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.case list) = 
# 1962 "parsing/parser.mly"
               ( [_1] )
# 16028 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.case) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.case list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case list) = 
# 1963 "parsing/parser.mly"
                               ( _3 :: _1 )
# 16065 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic _2 in
        let _1 : (Parsetree.object_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 2684 "parsing/parser.mly"
      ( let (f, c) = _2 in (_1 :: f, c) )
# 16096 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic _2 in
        let _1 : (Parsetree.object_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 2686 "parsing/parser.mly"
      ( let (f, c) = _2 in (_1 :: f, c) )
# 16127 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.object_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 2687 "parsing/parser.mly"
                         ( [_1], Closed )
# 16152 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.object_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 2688 "parsing/parser.mly"
                         ( [_1], Closed )
# 16177 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.object_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 2689 "parsing/parser.mly"
                         ( [_1], Closed )
# 16202 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2690 "parsing/parser.mly"
                         ( [Of.inherit_ ~loc:(make_loc _sloc) _1], Closed )
# 16230 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 2691 "parsing/parser.mly"
                         ( [], Open )
# 16255 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.core_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Asttypes.override_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 16333 "parsing/parser.ml"
          
        in
        
# 1343 "parsing/parser.mly"
      ( if _1 = Override then syntax_error ();
        (_5, Private, Cfk_virtual _7), _2 )
# 16340 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.core_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Asttypes.override_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 16418 "parsing/parser.ml"
          
        in
        
# 1346 "parsing/parser.mly"
      ( if _1 = Override then syntax_error ();
        (_5, _4, Cfk_virtual _7), _2 )
# 16425 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Asttypes.override_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 16491 "parsing/parser.ml"
          
        in
        
# 1349 "parsing/parser.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 16500 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Asttypes.override_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 16584 "parsing/parser.ml"
          
        in
        
# 1355 "parsing/parser.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 16593 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _7;
                  MenhirLib.EngineTypes.startp = _startpos__7_;
                  MenhirLib.EngineTypes.endp = _endpos__7_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _12;
                        MenhirLib.EngineTypes.startp = _startpos__12_;
                        MenhirLib.EngineTypes.endp = _endpos__12_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : (string Asttypes.loc list) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _12 : (Asttypes.label) = Obj.magic _12 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Asttypes.override_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__1_ = _endpos__12_ in
          let _startpos__1_ = _startpos__12_ in
          let _1 = _12 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 16695 "parsing/parser.ml"
          
        in
        let _startpos__4_ = _startpos__12_ in
        let _endpos = _endpos__11_ in
        let _symbolstartpos = if Pervasives.(!=) _startpos__1_ _endpos__1_ then
          _startpos__1_
        else
          if Pervasives.(!=) _startpos__2_ _endpos__2_ then
            _startpos__2_
          else
            if Pervasives.(!=) _startpos__3_ _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1361 "parsing/parser.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 16723 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 625 "parsing/parser.mly"
       (string)
# 16744 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2814 "parsing/parser.mly"
                                                ( Lident _1 )
# 16752 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 625 "parsing/parser.mly"
       (string)
# 16783 "parsing/parser.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 2815 "parsing/parser.mly"
                                                ( Ldot(_1, _3) )
# 16793 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Longident.t) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2817 "parsing/parser.mly"
      ( lapply ~loc:_sloc _1 _3 )
# 16839 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 625 "parsing/parser.mly"
       (string)
# 16860 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2810 "parsing/parser.mly"
                                                ( Lident _1 )
# 16868 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 625 "parsing/parser.mly"
       (string)
# 16899 "parsing/parser.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 2811 "parsing/parser.mly"
                                                ( Ldot(_1, _3) )
# 16909 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.attributes) = Obj.magic _6 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (
# 625 "parsing/parser.mly"
       (string)
# 16958 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.module_declaration * string Asttypes.loc option) = let _5 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 16987 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1150 "parsing/parser.mly"
  ( Mty.alias ~loc:(make_loc _sloc) _1 )
# 16998 "parsing/parser.ml"
          
        in
        let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 17019 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1154 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Md.mk _3 _5 ~attrs:(attrs@_6) ~loc:(make_loc _sloc) ~docs, ext )
# 17030 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.attributes) = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _10 : (
# 625 "parsing/parser.mly"
       (string)
# 17073 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_binding * string Asttypes.loc option) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 17098 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1013 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Mb.mk _3 _4 ~attrs:(attrs@_5) ~loc:(make_loc _sloc) ~docs, ext )
# 17109 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.module_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_expr) = 
# 1003 "parsing/parser.mly"
      ( _2 )
# 17140 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : (Parsetree.module_expr) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.module_type) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1006 "parsing/parser.mly"
        ( Pmod_constraint(_4, _2) )
# 17195 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 757 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 17206 "parsing/parser.ml"
          
        in
        
# 1009 "parsing/parser.mly"
    ( _1 )
# 17212 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.module_expr) = Obj.magic _200 in
        let _100 : (string Asttypes.loc * Parsetree.module_type option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1008 "parsing/parser.mly"
        ( Pmod_functor(fst _1, snd _1, _2) )
# 17251 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 757 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 17262 "parsing/parser.ml"
          
        in
        
# 1009 "parsing/parser.mly"
    ( _1 )
# 17268 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.attributes) = Obj.magic _5 in
        let _4 : (Parsetree.module_type) = Obj.magic _4 in
        let _10 : (
# 625 "parsing/parser.mly"
       (string)
# 17311 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_declaration * string Asttypes.loc option) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 17336 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1145 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Md.mk _3 _4 ~attrs:(attrs@_5) ~loc:(make_loc _sloc) ~docs, ext )
# 17347 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_type) = 
# 1136 "parsing/parser.mly"
      ( _2 )
# 17378 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.module_type) = Obj.magic _200 in
        let _100 : (string Asttypes.loc * Parsetree.module_type option) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1138 "parsing/parser.mly"
      ( let (name,typ) = _1 in
        Pmty_functor(name, typ, _2) )
# 17418 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 759 "parsing/parser.mly"
    ( mkmty ~loc:_sloc _1 )
# 17429 "parsing/parser.ml"
          
        in
        
# 1140 "parsing/parser.mly"
      ( _1 )
# 17435 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.structure) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_expr) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 879 "parsing/parser.mly"
      ( mkmod ~loc:_sloc ~attrs:_2 (Pmod_structure(_3)) )
# 17481 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.structure) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_expr) = let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 881 "parsing/parser.mly"
      ( unclosed "struct" _loc__1_ "end" _loc__4_ )
# 17526 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : ((string Asttypes.loc * Parsetree.module_type option) list) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 883 "parsing/parser.mly"
      ( let modexp =
          List.fold_left
            (fun acc (n, t) -> mkmod ~loc:_sloc (Pmod_functor(n, t, acc)))
            _5 _3
        in wrap_mod_attrs ~loc:_sloc modexp _2 )
# 17582 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.module_expr) = 
# 889 "parsing/parser.mly"
      ( _1 )
# 17607 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.module_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_expr) = 
# 891 "parsing/parser.mly"
      ( Mod.attr _1 _2 )
# 17638 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 17686 "parsing/parser.ml"
              
            in
            
# 897 "parsing/parser.mly"
    ( Pmod_ident _1 )
# 17692 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 757 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 17703 "parsing/parser.ml"
          
        in
        
# 893 "parsing/parser.mly"
      ( _1 )
# 17709 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.module_expr) = Obj.magic _200 in
        let _100 : (Parsetree.module_expr) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 899 "parsing/parser.mly"
    ( Pmod_apply(_1, _2) )
# 17748 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 757 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 17759 "parsing/parser.ml"
          
        in
        
# 893 "parsing/parser.mly"
      ( _1 )
# 17765 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.module_expr) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 901 "parsing/parser.mly"
    ( (* TODO review mkmod location *)
      Pmod_apply(_1, mkmod ~loc:_sloc (Pmod_structure [])) )
# 17818 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 757 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 17829 "parsing/parser.ml"
          
        in
        
# 893 "parsing/parser.mly"
      ( _1 )
# 17835 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 904 "parsing/parser.mly"
    ( Pmod_extension _1 )
# 17866 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 757 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 17877 "parsing/parser.ml"
          
        in
        
# 893 "parsing/parser.mly"
      ( _1 )
# 17883 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.signature) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_type) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1041 "parsing/parser.mly"
      ( mkmty ~loc:_sloc ~attrs:_2 (Pmty_signature (_3)) )
# 17929 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.signature) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.module_type) = let _loc__4_ = (_startpos__4_, _endpos__4_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1043 "parsing/parser.mly"
      ( unclosed "sig" _loc__1_ "end" _loc__4_ )
# 17974 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.module_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : ((string Asttypes.loc * Parsetree.module_type option) list) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_type) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1046 "parsing/parser.mly"
      ( let mty =
          List.fold_left
            (fun acc (n, t) -> mkmty ~loc:_sloc (Pmty_functor(n, t, acc)))
            _5 _3
        in wrap_mty_attrs ~loc:_sloc mty _2 )
# 18030 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_type) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1052 "parsing/parser.mly"
      ( mkmty ~loc:_sloc ~attrs:_4 (Pmty_typeof _5) )
# 18082 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = 
# 1054 "parsing/parser.mly"
      ( _2 )
# 18119 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1056 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 18158 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_type) = 
# 1058 "parsing/parser.mly"
      ( Mty.attr _1 _2 )
# 18189 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 18237 "parsing/parser.ml"
              
            in
            
# 1064 "parsing/parser.mly"
      ( Pmty_ident _1 )
# 18243 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 759 "parsing/parser.mly"
    ( mkmty ~loc:_sloc _1 )
# 18254 "parsing/parser.ml"
          
        in
        
# 1060 "parsing/parser.mly"
      ( _1 )
# 18260 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.module_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.module_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1067 "parsing/parser.mly"
      ( Pmty_functor(mknoloc "_", Some _1, _3) )
# 18307 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 759 "parsing/parser.mly"
    ( mkmty ~loc:_sloc _1 )
# 18318 "parsing/parser.ml"
          
        in
        
# 1060 "parsing/parser.mly"
      ( _1 )
# 18324 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.with_constraint list) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.module_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1069 "parsing/parser.mly"
      ( Pmty_with(_1, List.rev _3) )
# 18371 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 759 "parsing/parser.mly"
    ( mkmty ~loc:_sloc _1 )
# 18382 "parsing/parser.ml"
          
        in
        
# 1060 "parsing/parser.mly"
      ( _1 )
# 18388 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.module_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1073 "parsing/parser.mly"
      ( Pmty_extension _1 )
# 18419 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 759 "parsing/parser.mly"
    ( mkmty ~loc:_sloc _1 )
# 18430 "parsing/parser.ml"
          
        in
        
# 1060 "parsing/parser.mly"
      ( _1 )
# 18436 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.attributes) = Obj.magic _6 in
        let _5 : (Parsetree.module_type option) = Obj.magic _5 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _3 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.module_type_declaration * string Asttypes.loc option) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 18506 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1184 "parsing/parser.mly"
      ( let (ext, attrs) = _3 in
        let docs = symbol_docs _sloc in
        Mtd.mk _4 ?typ:_5 ~attrs:(attrs@_6) ~loc:(make_loc _sloc) ~docs, ext )
# 18517 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_type option) = 
# 1178 "parsing/parser.mly"
                              ( None )
# 18535 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_type option) = 
# 1179 "parsing/parser.mly"
                              ( Some _2 )
# 18566 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2820 "parsing/parser.mly"
                                                ( Lident _1 )
# 18591 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Asttypes.label) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 2821 "parsing/parser.mly"
                                                ( Ldot(_1, _3) )
# 18628 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag) = 
# 2881 "parsing/parser.mly"
                                                ( Immutable )
# 18646 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 2882 "parsing/parser.mly"
                                                ( Mutable )
# 18671 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Asttypes.label) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.label) = 
# 2862 "parsing/parser.mly"
                                                ( _2 )
# 18702 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label list) = 
# 2651 "parsing/parser.mly"
                                                ( [_1] )
# 18727 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Asttypes.label) = Obj.magic _2 in
        let _1 : (Asttypes.label list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.label list) = 
# 2652 "parsing/parser.mly"
                                                ( _2 :: _1 )
# 18758 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.rec_flag) = 
# 2869 "parsing/parser.mly"
                                                ( Recursive )
# 18776 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.rec_flag) = 
# 2870 "parsing/parser.mly"
                                                ( Nonrecursive )
# 18801 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.attributes) = Obj.magic _5 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _3 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _3 in
        let _2 : (Asttypes.override_flag) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.open_description * string Asttypes.loc option) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 18865 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1123 "parsing/parser.mly"
      ( let (ext, attrs) = _3 in
        let docs = symbol_docs _sloc in
        Opn.mk _4 ~override:_2 ~attrs:(attrs@_5) ~loc:(make_loc _sloc) ~docs
        , ext )
# 18877 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 603 "parsing/parser.mly"
       (string)
# 18898 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2749 "parsing/parser.mly"
                                                ( _1 )
# 18906 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 557 "parsing/parser.mly"
       (string)
# 18927 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2750 "parsing/parser.mly"
                                                ( _1 )
# 18935 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 558 "parsing/parser.mly"
       (string)
# 18956 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2751 "parsing/parser.mly"
                                                ( _1 )
# 18964 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 559 "parsing/parser.mly"
       (string)
# 18985 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2752 "parsing/parser.mly"
                                                ( _1 )
# 18993 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 560 "parsing/parser.mly"
       (string)
# 19014 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2753 "parsing/parser.mly"
                                                ( _1 )
# 19022 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 561 "parsing/parser.mly"
       (string)
# 19043 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2754 "parsing/parser.mly"
                                                ( _1 )
# 19051 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 562 "parsing/parser.mly"
       (string)
# 19084 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 2755 "parsing/parser.mly"
                                                ( "."^ _1 ^"()" )
# 19092 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 562 "parsing/parser.mly"
       (string)
# 19131 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 2756 "parsing/parser.mly"
                                                ( "."^ _1 ^ "()<-" )
# 19139 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 562 "parsing/parser.mly"
       (string)
# 19172 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 2757 "parsing/parser.mly"
                                                ( "."^ _1 ^"[]" )
# 19180 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 562 "parsing/parser.mly"
       (string)
# 19219 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 2758 "parsing/parser.mly"
                                                ( "."^ _1 ^ "[]<-" )
# 19227 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 562 "parsing/parser.mly"
       (string)
# 19260 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 2759 "parsing/parser.mly"
                                                ( "."^ _1 ^"{}" )
# 19268 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 562 "parsing/parser.mly"
       (string)
# 19307 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (string) = 
# 2760 "parsing/parser.mly"
                                                ( "."^ _1 ^ "{}<-" )
# 19315 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 614 "parsing/parser.mly"
       (string)
# 19336 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2761 "parsing/parser.mly"
                                                ( _1 )
# 19344 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2762 "parsing/parser.mly"
                                                ( "!" )
# 19369 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2763 "parsing/parser.mly"
                                                ( "+" )
# 19394 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2764 "parsing/parser.mly"
                                                ( "+." )
# 19419 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2765 "parsing/parser.mly"
                                                ( "-" )
# 19444 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2766 "parsing/parser.mly"
                                                ( "-." )
# 19469 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2767 "parsing/parser.mly"
                                                ( "*" )
# 19494 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2768 "parsing/parser.mly"
                                                ( "=" )
# 19519 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2769 "parsing/parser.mly"
                                                ( "<" )
# 19544 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2770 "parsing/parser.mly"
                                                ( ">" )
# 19569 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2771 "parsing/parser.mly"
                                                ( "or" )
# 19594 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2772 "parsing/parser.mly"
                                                ( "||" )
# 19619 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2773 "parsing/parser.mly"
                                                ( "&" )
# 19644 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2774 "parsing/parser.mly"
                                                ( "&&" )
# 19669 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2775 "parsing/parser.mly"
                                                ( ":=" )
# 19694 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2776 "parsing/parser.mly"
                                                ( "+=" )
# 19719 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2777 "parsing/parser.mly"
                                                ( "%" )
# 19744 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (bool) = 
# 2643 "parsing/parser.mly"
                                                ( true )
# 19769 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (bool) = 
# 2644 "parsing/parser.mly"
                                                ( false )
# 19787 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit) = 
# 2900 "parsing/parser.mly"
                                                ( () )
# 19805 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (unit) = 
# 2901 "parsing/parser.mly"
                                                ( () )
# 19830 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 1550 "parsing/parser.mly"
                                        ( None )
# 19848 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression option) = 
# 1551 "parsing/parser.mly"
                                        ( Some _2 )
# 19879 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option) = 
# 2211 "parsing/parser.mly"
                    ( Some _2 )
# 19910 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type option) = 
# 2212 "parsing/parser.mly"
                ( None )
# 19928 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit) = 
# 2904 "parsing/parser.mly"
                                                ( () )
# 19946 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (unit) = 
# 2905 "parsing/parser.mly"
                                                ( () )
# 19971 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 2031 "parsing/parser.mly"
                    ( Some _1 )
# 19996 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 2032 "parsing/parser.mly"
                ( None )
# 20014 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : (Asttypes.variance) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type * Asttypes.variance) = 
# 2304 "parsing/parser.mly"
                                                ( _2, _1 )
# 20045 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type * Asttypes.variance) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2307 "parsing/parser.mly"
                                                         ( [_1] )
# 20070 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type * Asttypes.variance) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2308 "parsing/parser.mly"
                                                                  ( _3 :: _1 )
# 20107 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2299 "parsing/parser.mly"
                                                ( [] )
# 20125 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type * Asttypes.variance) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2300 "parsing/parser.mly"
                                                ( [_1] )
# 20150 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2301 "parsing/parser.mly"
                                                ( List.rev _2 )
# 20187 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Asttypes.label) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2312 "parsing/parser.mly"
                    ( Ptyp_var _2 )
# 20226 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 20237 "parsing/parser.ml"
          
        in
        
# 2314 "parsing/parser.mly"
      ( _1 )
# 20243 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2313 "parsing/parser.mly"
                    ( Ptyp_any )
# 20274 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 20285 "parsing/parser.ml"
          
        in
        
# 2314 "parsing/parser.mly"
      ( _1 )
# 20291 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.override_flag) = 
# 2896 "parsing/parser.mly"
                                                ( Fresh )
# 20309 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.override_flag) = 
# 2897 "parsing/parser.mly"
                                                ( Override )
# 20334 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.module_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2621 "parsing/parser.mly"
      ( Ptyp_package (package_type_of_module_type _1) )
# 20365 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 20376 "parsing/parser.ml"
          
        in
        
# 2622 "parsing/parser.mly"
      ( _1 )
# 20382 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.module_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.module_expr) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.module_expr) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 909 "parsing/parser.mly"
      ( Pmod_constraint(_2, _4) )
# 20445 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 757 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 20456 "parsing/parser.ml"
          
        in
        
# 910 "parsing/parser.mly"
      ( _1 )
# 20462 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 912 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 20513 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = 
# 914 "parsing/parser.mly"
      ( _2 (* TODO consider reloc *) )
# 20550 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 916 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 20589 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 918 "parsing/parser.mly"
      ( mkmod ~loc:_sloc ~attrs:_3 (Pmod_unpack _4))
# 20641 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.module_expr) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 920 "parsing/parser.mly"
      ( let constr_loc = (_startpos__4_, _endpos__6_) in
        mkmod ~loc:_sloc ~attrs:_3
          (Pmod_unpack(
               ghexp ~loc:constr_loc (Pexp_constraint(_4, _6)))) )
# 20708 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : unit = Obj.magic _9 in
        let _8 : (Parsetree.core_type) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.module_expr) = let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 926 "parsing/parser.mly"
      ( let constr_loc = (_startpos__4_, _endpos__8_) in
        mkmod ~loc:_sloc ~attrs:_3
          (Pmod_unpack(
               ghexp ~loc:constr_loc (Pexp_coerce(_4, Some _6, _8)))) )
# 20787 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.module_expr) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 931 "parsing/parser.mly"
      ( let constr_loc = (_startpos__4_, _endpos__6_) in
        mkmod ~loc:_sloc ~attrs:_3
          (Pmod_unpack(
               ghexp ~loc:constr_loc (Pexp_coerce(_4, None, _6)))) )
# 20854 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.module_expr) = let _loc__6_ = (_startpos__6_, _endpos__6_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 936 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__6_ )
# 20911 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.module_expr) = let _loc__6_ = (_startpos__6_, _endpos__6_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 938 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__6_ )
# 20968 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.module_expr) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 940 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 21019 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 21045 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (string Asttypes.loc option) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 21069 "parsing/parser.ml"
          
        in
        
# 1320 "parsing/parser.mly"
          ( Some _2 )
# 21075 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Asttypes.loc option) = 
# 1322 "parsing/parser.mly"
          ( None )
# 21093 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 713 "parsing/parser.mly"
      (Parsetree.core_type)
# 21124 "parsing/parser.ml"
        ) = 
# 845 "parsing/parser.mly"
                  ( _1 )
# 21128 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 715 "parsing/parser.mly"
      (Parsetree.expression)
# 21159 "parsing/parser.ml"
        ) = 
# 849 "parsing/parser.mly"
                 ( _1 )
# 21163 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 717 "parsing/parser.mly"
      (Parsetree.pattern)
# 21194 "parsing/parser.ml"
        ) = 
# 853 "parsing/parser.mly"
                ( _1 )
# 21198 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc__2_ = (_startpos__2_, _endpos__2_) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2039 "parsing/parser.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 21239 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2041 "parsing/parser.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_exception _3) _2)
# 21279 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = 
# 2043 "parsing/parser.mly"
      ( Pat.attr _1 _2 )
# 21310 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2045 "parsing/parser.mly"
      ( _1 )
# 21335 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (string) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let _110 : (Parsetree.pattern) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _2 = _20 in
            let _1 = _11 in
            let _3 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 21400 "parsing/parser.ml"
              
            in
            
# 2051 "parsing/parser.mly"
      ( Ppat_alias(_1, _3) )
# 21406 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 21417 "parsing/parser.ml"
          
        in
        
# 2047 "parsing/parser.mly"
      ( _1 )
# 21423 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2053 "parsing/parser.mly"
      ( expecting _loc__3_ "identifier" )
# 21474 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 21485 "parsing/parser.ml"
          
        in
        
# 2047 "parsing/parser.mly"
      ( _1 )
# 21491 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.pattern list) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2055 "parsing/parser.mly"
      ( Ppat_tuple(List.rev _1) )
# 21522 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 21533 "parsing/parser.ml"
          
        in
        
# 2047 "parsing/parser.mly"
      ( _1 )
# 21539 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2057 "parsing/parser.mly"
      ( expecting _loc__3_ "pattern" )
# 21590 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 21601 "parsing/parser.ml"
          
        in
        
# 2047 "parsing/parser.mly"
      ( _1 )
# 21607 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.pattern) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2059 "parsing/parser.mly"
      ( Ppat_or(_1, _3) )
# 21654 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 21665 "parsing/parser.ml"
          
        in
        
# 2047 "parsing/parser.mly"
      ( _1 )
# 21671 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2061 "parsing/parser.mly"
      ( expecting _loc__3_ "pattern" )
# 21722 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 21733 "parsing/parser.ml"
          
        in
        
# 2047 "parsing/parser.mly"
      ( _1 )
# 21739 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2182 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 21776 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2183 "parsing/parser.mly"
                                                ( [_3; _1] )
# 21813 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 2184 "parsing/parser.mly"
                                                ( expecting _loc__3_ "pattern" )
# 21851 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2091 "parsing/parser.mly"
      ( _1 )
# 21876 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 21933 "parsing/parser.ml"
              
            in
            
# 2094 "parsing/parser.mly"
        ( Ppat_construct(_1, Some _2) )
# 21939 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 21950 "parsing/parser.ml"
          
        in
        
# 2097 "parsing/parser.mly"
      ( _1 )
# 21956 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : (Asttypes.label) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2096 "parsing/parser.mly"
        ( Ppat_variant(_1, Some _2) )
# 21995 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 22006 "parsing/parser.ml"
          
        in
        
# 2097 "parsing/parser.mly"
      ( _1 )
# 22012 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2099 "parsing/parser.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_lazy _3) _2)
# 22052 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc__2_ = (_startpos__2_, _endpos__2_) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2066 "parsing/parser.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 22093 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = 
# 2068 "parsing/parser.mly"
      ( Pat.attr _1 _2 )
# 22124 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2070 "parsing/parser.mly"
      ( _1 )
# 22149 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (string) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let _110 : (Parsetree.pattern) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _2 = _20 in
            let _1 = _11 in
            let _3 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 22214 "parsing/parser.ml"
              
            in
            
# 2076 "parsing/parser.mly"
      ( Ppat_alias(_1, _3) )
# 22220 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 22231 "parsing/parser.ml"
          
        in
        
# 2072 "parsing/parser.mly"
      ( _1 )
# 22237 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2078 "parsing/parser.mly"
      ( expecting _loc__3_ "identifier" )
# 22288 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 22299 "parsing/parser.ml"
          
        in
        
# 2072 "parsing/parser.mly"
      ( _1 )
# 22305 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.pattern list) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2080 "parsing/parser.mly"
      ( Ppat_tuple(List.rev _1) )
# 22336 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 22347 "parsing/parser.ml"
          
        in
        
# 2072 "parsing/parser.mly"
      ( _1 )
# 22353 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2082 "parsing/parser.mly"
      ( expecting _loc__3_ "pattern" )
# 22404 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 22415 "parsing/parser.ml"
          
        in
        
# 2072 "parsing/parser.mly"
      ( _1 )
# 22421 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.pattern) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2084 "parsing/parser.mly"
      ( Ppat_or(_1, _3) )
# 22468 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 22479 "parsing/parser.ml"
          
        in
        
# 2072 "parsing/parser.mly"
      ( _1 )
# 22485 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.pattern) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2086 "parsing/parser.mly"
      ( expecting _loc__3_ "pattern" )
# 22536 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 22547 "parsing/parser.ml"
          
        in
        
# 2072 "parsing/parser.mly"
      ( _1 )
# 22553 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2187 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 22590 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2188 "parsing/parser.mly"
                                                ( [_3; _1] )
# 22627 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 2189 "parsing/parser.mly"
                                                ( expecting _loc__3_ "pattern" )
# 22665 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern list) = 
# 2192 "parsing/parser.mly"
                                                ( [_1] )
# 22690 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2193 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 22727 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.pattern_desc) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 22759 "parsing/parser.ml"
          
        in
        
# 1542 "parsing/parser.mly"
      ( _1 )
# 22765 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 22786 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.pattern_desc) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 22809 "parsing/parser.ml"
          
        in
        
# 1545 "parsing/parser.mly"
                      ( Ppat_var _1 )
# 22815 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern_desc) = 
# 1546 "parsing/parser.mly"
                      ( Ppat_any )
# 22840 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.payload) = 
# 3012 "parsing/parser.mly"
              ( PStr _1 )
# 22865 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.signature) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3013 "parsing/parser.mly"
                    ( PSig _2 )
# 22896 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3014 "parsing/parser.mly"
                    ( PTyp _2 )
# 22927 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 3015 "parsing/parser.mly"
                     ( PPat (_2, None) )
# 22958 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.payload) = 
# 3016 "parsing/parser.mly"
                                   ( PPat (_2, Some _4) )
# 23001 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 2517 "parsing/parser.mly"
          ( _1 )
# 23026 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.core_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Asttypes.label Asttypes.loc list) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2519 "parsing/parser.mly"
          ( Ptyp_poly(List.rev _1, _3) )
# 23073 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 23084 "parsing/parser.ml"
          
        in
        
# 2520 "parsing/parser.mly"
          ( _1 )
# 23090 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 2524 "parsing/parser.mly"
          ( _1 )
# 23115 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.core_type) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Asttypes.label Asttypes.loc list) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2526 "parsing/parser.mly"
          ( Ptyp_poly(List.rev _1, _3) )
# 23162 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 23173 "parsing/parser.ml"
          
        in
        
# 2527 "parsing/parser.mly"
          ( _1 )
# 23179 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.attribute) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2985 "parsing/parser.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 23225 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 2993 "parsing/parser.mly"
                 ( [] )
# 23243 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.attributes) = 
# 2994 "parsing/parser.mly"
                                             ( _1 :: _2 )
# 23274 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.attributes) = Obj.magic _8 in
        let _7 : (string list) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (string) = Obj.magic _10 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Parsetree.value_description * string Asttypes.loc option) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 23356 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2233 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Val.mk _3 _5 ~prim:_7 ~attrs:(attrs@_8) ~loc:(make_loc _sloc) ~docs
        , ext )
# 23368 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 617 "parsing/parser.mly"
       (string * string option)
# 23389 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string list) = 
# 2227 "parsing/parser.mly"
                                                ( [fst _1] )
# 23397 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string list) = Obj.magic _2 in
        let _1 : (
# 617 "parsing/parser.mly"
       (string * string option)
# 23424 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string list) = 
# 2228 "parsing/parser.mly"
                                                ( fst _1 :: _2 )
# 23432 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag) = 
# 2877 "parsing/parser.mly"
                                                ( Public )
# 23450 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 2878 "parsing/parser.mly"
                                                ( Private )
# 23475 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 2889 "parsing/parser.mly"
                 ( Public, Concrete )
# 23493 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 2890 "parsing/parser.mly"
            ( Private, Concrete )
# 23518 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 2891 "parsing/parser.mly"
            ( Public, Virtual )
# 23543 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 2892 "parsing/parser.mly"
                    ( Private, Virtual )
# 23574 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 2893 "parsing/parser.mly"
                    ( Private, Virtual )
# 23605 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.rec_flag) = 
# 2865 "parsing/parser.mly"
                                                ( Nonrecursive )
# 23623 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.rec_flag) = 
# 2866 "parsing/parser.mly"
                                                ( Recursive )
# 23648 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.attributes) = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _10 : (
# 625 "parsing/parser.mly"
       (string)
# 23696 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.module_binding * string Asttypes.loc option) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 23722 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1026 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Mb.mk _4 _5 ~attrs:(attrs@_6) ~loc:(make_loc _sloc) ~docs, ext )
# 23733 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_binding * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.module_binding list * string Asttypes.loc option) = 
# 1019 "parsing/parser.mly"
      ( let (b, ext) = _1 in ([b], ext) )
# 23758 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.module_binding) = Obj.magic _2 in
        let _1 : (Parsetree.module_binding list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_binding list * string Asttypes.loc option) = 
# 1021 "parsing/parser.mly"
      ( let (l, ext) = _1 in (_2 :: l, ext) )
# 23789 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.attributes) = Obj.magic _7 in
        let _6 : (Parsetree.module_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _10 : (
# 625 "parsing/parser.mly"
       (string)
# 23843 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.module_declaration * string Asttypes.loc option) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 23869 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1167 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Md.mk _4 _6 ~attrs:(attrs@_7) ~loc:(make_loc _sloc) ~docs, ext )
# 23880 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.module_declaration list * string Asttypes.loc option) = 
# 1160 "parsing/parser.mly"
      ( let (body, ext) = _1 in ([body], ext) )
# 23905 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.module_declaration) = Obj.magic _2 in
        let _1 : (Parsetree.module_declaration list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_declaration list * string Asttypes.loc option) = 
# 1162 "parsing/parser.mly"
      ( let (l, ext) = _1 in (_2 :: l, ext) )
# 23936 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : ((Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list) = 
# 1993 "parsing/parser.mly"
                                                ( (Some _1, _3) )
# 23974 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : ((Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list) = 
# 1994 "parsing/parser.mly"
                                                ( (None, _1) )
# 24000 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = x0 in
          
# 785 "parsing/parser.mly"
    ( [ x ] )
# 24027 "parsing/parser.ml"
          
        in
        
# 793 "parsing/parser.mly"
    ( xs )
# 24033 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs0;
              MenhirLib.EngineTypes.startp = _startpos_xs0_;
              MenhirLib.EngineTypes.endp = _endpos_xs0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x0 : (Parsetree.core_type) = Obj.magic x0 in
        let _20 : unit = Obj.magic _20 in
        let xs0 : (Parsetree.core_type list) = Obj.magic xs0 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs0_ in
        let _endpos = _endpos_x0_ in
        let _v : (Parsetree.core_type list) = let xs =
          let x = x0 in
          let _2 = _20 in
          let xs = xs0 in
          
# 789 "parsing/parser.mly"
    ( x :: xs )
# 24074 "parsing/parser.ml"
          
        in
        
# 793 "parsing/parser.mly"
    ( xs )
# 24080 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.row_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = 
# 2629 "parsing/parser.mly"
                       ( _1 )
# 24105 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2630 "parsing/parser.mly"
                       ( Rf.inherit_ ~loc:(make_loc _sloc) _1 )
# 24133 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.row_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field list) = 
# 2625 "parsing/parser.mly"
                                                ( [_1] )
# 24158 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.row_field) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.row_field list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.row_field list) = 
# 2626 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 24195 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 1511 "parsing/parser.mly"
                                  ( _1 )
# 24220 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 1512 "parsing/parser.mly"
                                  ( _1 )
# 24251 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.expression) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.expression) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1514 "parsing/parser.mly"
    ( Pexp_sequence(_1, _3) )
# 24298 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 24309 "parsing/parser.ml"
          
        in
        
# 1515 "parsing/parser.mly"
    ( _1 )
# 24315 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : (string Asttypes.loc) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1517 "parsing/parser.mly"
    ( let seq = mkexp ~loc:_sloc (Pexp_sequence (_1, _5)) in
      let payload = PStr [mkstrexp seq []] in
      mkexp ~loc:_sloc (Pexp_extension (_4, payload)) )
# 24369 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.attributes) = Obj.magic _6 in
        let _5 : (Parsetree.attributes) = Obj.magic _5 in
        let _4 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _4 in
        let _10 : (string) = Obj.magic _10 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.type_exception * string Asttypes.loc option) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 24439 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2363 "parsing/parser.mly"
      ( let args, res = _4 in
        let (ext,attrs) = _2 in
        let docs = symbol_docs _sloc in
        Te.mk_exception ~attrs:_6
          (Te.decl _3 ~args ?res
                      ~attrs:(attrs @ _5) ~loc:(make_loc _sloc) ~docs)
        , ext )
# 24454 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = 
# 2442 "parsing/parser.mly"
                                                          ( [_1] )
# 24479 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = 
# 2443 "parsing/parser.mly"
                                                          ( [_1] )
# 24504 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.extension_constructor) = Obj.magic _2 in
        let _1 : (Parsetree.extension_constructor list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.extension_constructor list) = 
# 2445 "parsing/parser.mly"
      ( _2 :: _1 )
# 24535 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.module_type) = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.include_description * string Asttypes.loc option) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1130 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Incl.mk _3 ~attrs:(attrs@_4) ~loc:(make_loc _sloc) ~docs, ext )
# 24583 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.attributes) = Obj.magic _9 in
        let _8 : (Parsetree.extension_constructor list) = Obj.magic _8 in
        let _7 : (Asttypes.private_flag) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _4 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _4 in
        let _3 : (Asttypes.rec_flag) = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.type_extension * string Asttypes.loc option) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 24671 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2425 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        if _3 <> Recursive then not_expecting _loc__3_ "nonrec flag";
        let docs = symbol_docs _sloc in
        Te.mk _5 (List.rev _8) ~params:_4 ~priv:_7 ~attrs:(attrs@_9) ~docs
        , ext )
# 24685 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.signature_item list) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.signature) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 722 "parsing/parser.mly"
                              ( extra_sig _startpos _endpos _1 )
# 24716 "parsing/parser.ml"
          
        in
        
# 1076 "parsing/parser.mly"
                                      ( _1 )
# 24722 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.signature_item_desc * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item) = let _endpos = _endpos__1_ in
        let _startpos = _startpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1084 "parsing/parser.mly"
      ( let item, ext = _1 in
        wrap_sig_ext ~loc:_loc (mksig ~loc:_sloc item) ext )
# 24753 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.signature_item) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1087 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mksig ~loc:_sloc (Psig_extension (_1, (add_docs_attrs docs _2))) )
# 24788 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.attribute) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.signature_item) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1090 "parsing/parser.mly"
      ( Psig_attribute _1 )
# 24819 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 755 "parsing/parser.mly"
    ( mksig ~loc:_sloc _1 )
# 24830 "parsing/parser.ml"
          
        in
        
# 1091 "parsing/parser.mly"
      ( _1 )
# 24836 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1095 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Psig_value body, ext) )
# 24861 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1097 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Psig_value body, ext) )
# 24886 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.rec_flag * Parsetree.type_declaration list *
  string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1099 "parsing/parser.mly"
      ( let (nr, l, ext) = _1 in (Psig_type (nr, List.rev l), ext) )
# 24912 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_extension * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1101 "parsing/parser.mly"
      ( let (l, ext) = _1 in (Psig_typext l, ext) )
# 24937 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1103 "parsing/parser.mly"
      ( let (l, ext) = _1 in (Psig_exception l, ext) )
# 24962 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1105 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Psig_module body, ext) )
# 24987 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1107 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Psig_module body, ext) )
# 25012 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_declaration list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1109 "parsing/parser.mly"
      ( let (l, ext) = _1 in (Psig_recmodule (List.rev l), ext) )
# 25037 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_type_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1111 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Psig_modtype body, ext) )
# 25062 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.open_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1113 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Psig_open body, ext) )
# 25087 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.include_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1115 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Psig_include body, ext) )
# 25112 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_description list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1117 "parsing/parser.mly"
      ( let (l, ext) = _1 in (Psig_class (List.rev l), ext) )
# 25137 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_type_declaration list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.signature_item_desc * string Asttypes.loc option) = 
# 1119 "parsing/parser.mly"
      ( let (l, ext) = _1 in (Psig_class_type (List.rev l), ext) )
# 25162 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.signature_item list) = 
# 1078 "parsing/parser.mly"
                                   ( [] )
# 25180 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.signature_item list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.signature_item list) = 
# 1079 "parsing/parser.mly"
                                   ( text_sig _startpos__1_ @ _2 )
# 25211 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.signature_item list) = Obj.magic _2 in
        let _1 : (Parsetree.signature_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.signature_item list) = 
# 1080 "parsing/parser.mly"
                                   ( text_sig _startpos__1_ @ _1 :: _2 )
# 25242 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 2728 "parsing/parser.mly"
                 ( _1 )
# 25267 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 565 "parsing/parser.mly"
       (string * char option)
# 25293 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 2729 "parsing/parser.mly"
                 ( let (n, m) = _2 in Pconst_integer("-" ^ n, m) )
# 25302 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 546 "parsing/parser.mly"
       (string * char option)
# 25328 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 2730 "parsing/parser.mly"
                 ( let (f, m) = _2 in Pconst_float("-" ^ f, m) )
# 25337 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 565 "parsing/parser.mly"
       (string * char option)
# 25363 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 2731 "parsing/parser.mly"
                 ( let (n, m) = _2 in Pconst_integer (n, m) )
# 25372 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 546 "parsing/parser.mly"
       (string * char option)
# 25398 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 2732 "parsing/parser.mly"
                 ( let (f, m) = _2 in Pconst_float(f, m) )
# 25407 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 2566 "parsing/parser.mly"
      ( _1 )
# 25432 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 2568 "parsing/parser.mly"
      ( _2 )
# 25469 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.core_type) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2572 "parsing/parser.mly"
      ( wrap_typ_attrs ~loc:_sloc (reloc_typ ~loc:_sloc _4) _3 )
# 25521 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.core_type_desc) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 25553 "parsing/parser.ml"
          
        in
        
# 2574 "parsing/parser.mly"
      ( _1 )
# 25559 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Asttypes.label) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type_desc) = 
# 2578 "parsing/parser.mly"
      ( Ptyp_var _2 )
# 25590 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type_desc) = 
# 2580 "parsing/parser.mly"
      ( Ptyp_any )
# 25615 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type_desc) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 25655 "parsing/parser.ml"
          
        in
        
# 2582 "parsing/parser.mly"
      ( Ptyp_constr(_1, []) )
# 25661 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type_desc) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 25707 "parsing/parser.ml"
          
        in
        
# 2584 "parsing/parser.mly"
      ( Ptyp_constr(_2, [_1]) )
# 25713 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = x00;
              MenhirLib.EngineTypes.startp = _startpos_x00_;
              MenhirLib.EngineTypes.endp = _endpos_x00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let x00 : (Parsetree.core_type) = Obj.magic x00 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type_desc) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 25771 "parsing/parser.ml"
          
        in
        let _2 =
          let x0 = x00 in
          let tys =
            let x = x0 in
            
# 785 "parsing/parser.mly"
    ( [ x ] )
# 25781 "parsing/parser.ml"
            
          in
          
# 2676 "parsing/parser.mly"
    ( tys )
# 25787 "parsing/parser.ml"
          
        in
        
# 2586 "parsing/parser.mly"
      ( Ptyp_constr(_4, List.rev _2) )
# 25793 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = x00;
              MenhirLib.EngineTypes.startp = _startpos_x00_;
              MenhirLib.EngineTypes.endp = _endpos_x00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = xs00;
                  MenhirLib.EngineTypes.startp = _startpos_xs00_;
                  MenhirLib.EngineTypes.endp = _endpos_xs00_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _3 : unit = Obj.magic _3 in
        let x00 : (Parsetree.core_type) = Obj.magic x00 in
        let _200 : unit = Obj.magic _200 in
        let xs00 : (Parsetree.core_type list) = Obj.magic xs00 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type_desc) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 25863 "parsing/parser.ml"
          
        in
        let _2 =
          let x0 = x00 in
          let _20 = _200 in
          let xs0 = xs00 in
          let tys =
            let x = x0 in
            let _2 = _20 in
            let xs = xs0 in
            
# 789 "parsing/parser.mly"
    ( x :: xs )
# 25877 "parsing/parser.ml"
            
          in
          
# 2676 "parsing/parser.mly"
    ( tys )
# 25883 "parsing/parser.ml"
          
        in
        
# 2586 "parsing/parser.mly"
      ( Ptyp_constr(_4, List.rev _2) )
# 25889 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type_desc) = 
# 2588 "parsing/parser.mly"
      ( let (f, c) = _2 in Ptyp_object (f, c) )
# 25926 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type_desc) = 
# 2590 "parsing/parser.mly"
      ( Ptyp_object ([], Closed) )
# 25957 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type_desc) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 26003 "parsing/parser.ml"
          
        in
        
# 2592 "parsing/parser.mly"
      ( Ptyp_class(_2, []) )
# 26009 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type_desc) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 26061 "parsing/parser.ml"
          
        in
        
# 2594 "parsing/parser.mly"
      ( Ptyp_class(_3, [_1]) )
# 26067 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = x00;
                MenhirLib.EngineTypes.startp = _startpos_x00_;
                MenhirLib.EngineTypes.endp = _endpos_x00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let x00 : (Parsetree.core_type) = Obj.magic x00 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type_desc) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 26131 "parsing/parser.ml"
          
        in
        let _2 =
          let x0 = x00 in
          let tys =
            let x = x0 in
            
# 785 "parsing/parser.mly"
    ( [ x ] )
# 26141 "parsing/parser.ml"
            
          in
          
# 2676 "parsing/parser.mly"
    ( tys )
# 26147 "parsing/parser.ml"
          
        in
        
# 2596 "parsing/parser.mly"
      ( Ptyp_class(_5, List.rev _2) )
# 26153 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = x00;
                MenhirLib.EngineTypes.startp = _startpos_x00_;
                MenhirLib.EngineTypes.endp = _endpos_x00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _200;
                  MenhirLib.EngineTypes.startp = _startpos__200_;
                  MenhirLib.EngineTypes.endp = _endpos__200_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = xs00;
                    MenhirLib.EngineTypes.startp = _startpos_xs00_;
                    MenhirLib.EngineTypes.endp = _endpos_xs00_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let x00 : (Parsetree.core_type) = Obj.magic x00 in
        let _200 : unit = Obj.magic _200 in
        let xs00 : (Parsetree.core_type list) = Obj.magic xs00 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.core_type_desc) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 26229 "parsing/parser.ml"
          
        in
        let _2 =
          let x0 = x00 in
          let _20 = _200 in
          let xs0 = xs00 in
          let tys =
            let x = x0 in
            let _2 = _20 in
            let xs = xs0 in
            
# 789 "parsing/parser.mly"
    ( x :: xs )
# 26243 "parsing/parser.ml"
            
          in
          
# 2676 "parsing/parser.mly"
    ( tys )
# 26249 "parsing/parser.ml"
          
        in
        
# 2596 "parsing/parser.mly"
      ( Ptyp_class(_5, List.rev _2) )
# 26255 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.row_field) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type_desc) = 
# 2598 "parsing/parser.mly"
      ( Ptyp_variant([_2], Closed, None) )
# 26292 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.row_field list) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type_desc) = 
# 2604 "parsing/parser.mly"
      ( Ptyp_variant(List.rev _3, Closed, None) )
# 26335 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.row_field list) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.row_field) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.core_type_desc) = 
# 2606 "parsing/parser.mly"
      ( Ptyp_variant(_2 :: List.rev _4, Closed, None) )
# 26384 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.row_field list) = Obj.magic _3 in
        let _2 : (unit) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type_desc) = 
# 2608 "parsing/parser.mly"
      ( Ptyp_variant(List.rev _3, Open, None) )
# 26427 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type_desc) = 
# 2610 "parsing/parser.mly"
      ( Ptyp_variant([], Open, None) )
# 26458 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.row_field list) = Obj.magic _3 in
        let _2 : (unit) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type_desc) = 
# 2612 "parsing/parser.mly"
      ( Ptyp_variant(List.rev _3, Closed, Some []) )
# 26501 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Asttypes.label list) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.row_field list) = Obj.magic _3 in
        let _2 : (unit) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.core_type_desc) = 
# 2614 "parsing/parser.mly"
      ( Ptyp_variant(List.rev _3, Closed, Some (List.rev _5)) )
# 26556 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type_desc) = 
# 2616 "parsing/parser.mly"
      ( Ptyp_extension _1 )
# 26581 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 2655 "parsing/parser.mly"
                     ( _1 )
# 26606 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.core_type list) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.core_type) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2657 "parsing/parser.mly"
      ( Ptyp_tuple(_1 :: List.rev _3) )
# 26653 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 26664 "parsing/parser.ml"
          
        in
        
# 2658 "parsing/parser.mly"
      ( _1 )
# 26670 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : ((Longident.t Asttypes.loc * Parsetree.pattern) list * Asttypes.closed_flag) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2165 "parsing/parser.mly"
      ( let (fields, closed) = _2 in
        Ppat_record(fields, closed) )
# 26718 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 26729 "parsing/parser.ml"
          
        in
        
# 2179 "parsing/parser.mly"
    ( _1 )
# 26735 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : ((Longident.t Asttypes.loc * Parsetree.pattern) list * Asttypes.closed_flag) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2168 "parsing/parser.mly"
      ( unclosed "{" _loc__1_ "}" _loc__3_ )
# 26790 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 26801 "parsing/parser.ml"
          
        in
        
# 2179 "parsing/parser.mly"
    ( _1 )
# 26807 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : (unit) = Obj.magic _300 in
        let _200 : (Parsetree.pattern list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            
# 2170 "parsing/parser.mly"
      ( fst (mktailpat _loc__4_ (List.rev _2)) )
# 26866 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 26877 "parsing/parser.ml"
          
        in
        
# 2179 "parsing/parser.mly"
    ( _1 )
# 26883 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : (unit) = Obj.magic _300 in
        let _200 : (Parsetree.pattern list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2172 "parsing/parser.mly"
      ( unclosed "[" _loc__1_ "]" _loc__4_ )
# 26946 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 26957 "parsing/parser.ml"
          
        in
        
# 2179 "parsing/parser.mly"
    ( _1 )
# 26963 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : (unit) = Obj.magic _300 in
        let _200 : (Parsetree.pattern list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2174 "parsing/parser.mly"
      ( Ppat_array(List.rev _2) )
# 27018 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 27029 "parsing/parser.ml"
          
        in
        
# 2179 "parsing/parser.mly"
    ( _1 )
# 27035 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2176 "parsing/parser.mly"
      ( Ppat_array [] )
# 27074 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 27085 "parsing/parser.ml"
          
        in
        
# 2179 "parsing/parser.mly"
    ( _1 )
# 27091 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : (unit) = Obj.magic _300 in
        let _200 : (Parsetree.pattern list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2178 "parsing/parser.mly"
      ( unclosed "[|" _loc__1_ "|]" _loc__4_ )
# 27154 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 27165 "parsing/parser.ml"
          
        in
        
# 2179 "parsing/parser.mly"
    ( _1 )
# 27171 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1709 "parsing/parser.mly"
      ( reloc_exp ~loc:_sloc _2 )
# 27211 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.expression) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 1711 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 27250 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1713 "parsing/parser.mly"
      ( mkexp_constraint ~loc:_sloc _2 _3 )
# 27296 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1715 "parsing/parser.mly"
      ( array_get ~loc:_sloc _1 _4 )
# 27348 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1717 "parsing/parser.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_ )
# 27399 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1719 "parsing/parser.mly"
      ( string_get ~loc:_sloc _1 _4 )
# 27451 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1721 "parsing/parser.mly"
      ( unclosed "[" _loc__3_ "]" _loc__5_ )
# 27502 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 562 "parsing/parser.mly"
       (string)
# 27546 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1723 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc (Lident ("." ^ _2 ^ "[]")) _1 _4 )
# 27558 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 562 "parsing/parser.mly"
       (string)
# 27602 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1725 "parsing/parser.mly"
      ( unclosed "[" _loc__3_ "]" _loc__5_ )
# 27613 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 562 "parsing/parser.mly"
       (string)
# 27657 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1727 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc (Lident ("." ^ _2 ^ "()")) _1 _4  )
# 27669 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 562 "parsing/parser.mly"
       (string)
# 27713 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1729 "parsing/parser.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_ )
# 27724 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 562 "parsing/parser.mly"
       (string)
# 27768 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1731 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc (Lident ("." ^ _2 ^ "{}")) _1 _4 )
# 27780 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 562 "parsing/parser.mly"
       (string)
# 27824 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1733 "parsing/parser.mly"
      ( unclosed "{" _loc__3_ "}" _loc__5_ )
# 27835 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 562 "parsing/parser.mly"
       (string)
# 27889 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1735 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "[]")) _1 _6  )
# 27903 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 562 "parsing/parser.mly"
       (string)
# 27957 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _loc__7_ = (_startpos__7_, _endpos__7_) in
        let _loc__5_ = (_startpos__5_, _endpos__5_) in
        
# 1738 "parsing/parser.mly"
      ( unclosed "[" _loc__5_ "]" _loc__7_ )
# 27970 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 562 "parsing/parser.mly"
       (string)
# 28024 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1740 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "()")) _1 _6 )
# 28038 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 562 "parsing/parser.mly"
       (string)
# 28092 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _loc__7_ = (_startpos__7_, _endpos__7_) in
        let _loc__5_ = (_startpos__5_, _endpos__5_) in
        
# 1743 "parsing/parser.mly"
      ( unclosed "(" _loc__5_ ")" _loc__7_ )
# 28105 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 562 "parsing/parser.mly"
       (string)
# 28159 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1745 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc (Ldot(_3, "." ^ _4 ^ "{}")) _1 _6  )
# 28173 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 562 "parsing/parser.mly"
       (string)
# 28227 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.expression) = let _loc__7_ = (_startpos__7_, _endpos__7_) in
        let _loc__5_ = (_startpos__5_, _endpos__5_) in
        
# 1748 "parsing/parser.mly"
      ( unclosed "{" _loc__5_ "}" _loc__7_ )
# 28240 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1750 "parsing/parser.mly"
      ( bigarray_get ~loc:_sloc _1 _4 )
# 28292 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression list) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _loc__5_ = (_startpos__5_, _endpos__5_) in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 1752 "parsing/parser.mly"
      ( unclosed "{" _loc__3_ "}" _loc__5_ )
# 28343 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30;
            MenhirLib.EngineTypes.startp = _startpos__30_;
            MenhirLib.EngineTypes.endp = _endpos__30_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1761 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        _3.pexp_desc, (ext, attrs @ _3.pexp_attributes) )
# 28392 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1754 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 28404 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _30;
          MenhirLib.EngineTypes.startp = _startpos__30_;
          MenhirLib.EngineTypes.endp = _endpos__30_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _30 : unit = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__30_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__3_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1764 "parsing/parser.mly"
      ( Pexp_construct (mkloc (Lident "()") (make_loc _sloc), None), _2 )
# 28450 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__30_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1754 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 28462 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _40;
          MenhirLib.EngineTypes.startp = _startpos__40_;
          MenhirLib.EngineTypes.endp = _endpos__40_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _30;
            MenhirLib.EngineTypes.startp = _startpos__30_;
            MenhirLib.EngineTypes.endp = _endpos__30_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _20;
              MenhirLib.EngineTypes.startp = _startpos__20_;
              MenhirLib.EngineTypes.endp = _endpos__20_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _40 : unit = Obj.magic _40 in
        let _30 : (Parsetree.expression) = Obj.magic _30 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__40_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__4_ = _endpos__40_ in
          let _startpos__4_ = _startpos__40_ in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          
# 1766 "parsing/parser.mly"
      ( unclosed "begin" _loc__1_ "end" _loc__4_ )
# 28516 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__40_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1754 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 28528 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _20;
            MenhirLib.EngineTypes.startp = _startpos__20_;
            MenhirLib.EngineTypes.endp = _endpos__20_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _20 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _20 in
        let _11 : unit = Obj.magic _11 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__11_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _2 = _20 in
          let _1 = _11 in
          let _3 =
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _1 = _10 in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 28586 "parsing/parser.ml"
            
          in
          
# 1768 "parsing/parser.mly"
      ( Pexp_new(_3), _2 )
# 28592 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__100_ in
        let _startpos__1_ = _startpos__11_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1754 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 28604 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _50;
          MenhirLib.EngineTypes.startp = _startpos__50_;
          MenhirLib.EngineTypes.endp = _endpos__50_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _40;
            MenhirLib.EngineTypes.startp = _startpos__40_;
            MenhirLib.EngineTypes.endp = _endpos__40_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _30;
              MenhirLib.EngineTypes.startp = _startpos__30_;
              MenhirLib.EngineTypes.endp = _endpos__30_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _20;
                MenhirLib.EngineTypes.startp = _startpos__20_;
                MenhirLib.EngineTypes.endp = _endpos__20_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _50 : unit = Obj.magic _50 in
        let _40 : (Parsetree.module_expr) = Obj.magic _40 in
        let _30 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _30 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__50_ in
        let _v : (Parsetree.expression) = let _1 =
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          
# 1770 "parsing/parser.mly"
      ( Pexp_pack _4, _3 )
# 28659 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__50_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1754 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 28671 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _70;
          MenhirLib.EngineTypes.startp = _startpos__70_;
          MenhirLib.EngineTypes.endp = _endpos__70_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _60;
            MenhirLib.EngineTypes.startp = _startpos__60_;
            MenhirLib.EngineTypes.endp = _endpos__60_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _50;
              MenhirLib.EngineTypes.startp = _startpos__50_;
              MenhirLib.EngineTypes.endp = _endpos__50_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _40;
                MenhirLib.EngineTypes.startp = _startpos__40_;
                MenhirLib.EngineTypes.endp = _endpos__40_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _30;
                  MenhirLib.EngineTypes.startp = _startpos__30_;
                  MenhirLib.EngineTypes.endp = _endpos__30_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _20;
                    MenhirLib.EngineTypes.startp = _startpos__20_;
                    MenhirLib.EngineTypes.endp = _endpos__20_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _10;
                      MenhirLib.EngineTypes.startp = _startpos__10_;
                      MenhirLib.EngineTypes.endp = _endpos__10_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _70 : unit = Obj.magic _70 in
        let _60 : (Parsetree.core_type) = Obj.magic _60 in
        let _50 : unit = Obj.magic _50 in
        let _40 : (Parsetree.module_expr) = Obj.magic _40 in
        let _30 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _30 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__70_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__7_ = _endpos__70_ in
          let _startpos__1_ = _startpos__10_ in
          let _7 = _70 in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 1772 "parsing/parser.mly"
      ( Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _4), _6), _3 )
# 28745 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__70_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1754 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 28757 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _60;
          MenhirLib.EngineTypes.startp = _startpos__60_;
          MenhirLib.EngineTypes.endp = _endpos__60_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _50;
            MenhirLib.EngineTypes.startp = _startpos__50_;
            MenhirLib.EngineTypes.endp = _endpos__50_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _40;
              MenhirLib.EngineTypes.startp = _startpos__40_;
              MenhirLib.EngineTypes.endp = _endpos__40_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _30;
                MenhirLib.EngineTypes.startp = _startpos__30_;
                MenhirLib.EngineTypes.endp = _endpos__30_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _20;
                  MenhirLib.EngineTypes.startp = _startpos__20_;
                  MenhirLib.EngineTypes.endp = _endpos__20_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _10;
                    MenhirLib.EngineTypes.startp = _startpos__10_;
                    MenhirLib.EngineTypes.endp = _endpos__10_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _60 : unit = Obj.magic _60 in
        let _50 : unit = Obj.magic _50 in
        let _40 : (Parsetree.module_expr) = Obj.magic _40 in
        let _30 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _30 in
        let _20 : unit = Obj.magic _20 in
        let _10 : unit = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__60_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__6_ = _endpos__60_ in
          let _startpos__6_ = _startpos__60_ in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _6 = _60 in
          let _5 = _50 in
          let _4 = _40 in
          let _3 = _30 in
          let _2 = _20 in
          let _1 = _10 in
          let _loc__6_ = (_startpos__6_, _endpos__6_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          
# 1774 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__6_ )
# 28825 "parsing/parser.ml"
          
        in
        let _endpos__1_ = _endpos__60_ in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1754 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 28837 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 28885 "parsing/parser.ml"
              
            in
            
# 1778 "parsing/parser.mly"
      ( Pexp_ident (_1) )
# 28891 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 28902 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 28908 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.constant) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1780 "parsing/parser.mly"
      ( Pexp_constant _1 )
# 28939 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 28950 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 28956 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 29004 "parsing/parser.ml"
              
            in
            
# 1782 "parsing/parser.mly"
      ( Pexp_construct(_1, None) )
# 29010 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29021 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29027 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Asttypes.label) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1784 "parsing/parser.mly"
      ( Pexp_variant(_1, None) )
# 29058 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29069 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29075 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _1000 : (
# 603 "parsing/parser.mly"
       (string)
# 29102 "parsing/parser.ml"
        ) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 29130 "parsing/parser.ml"
              
            in
            
# 1786 "parsing/parser.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 29136 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29147 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29153 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Parsetree.expression) = Obj.magic _200 in
        let _10000 : unit = Obj.magic _10000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10000_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _endpos__1000_ = _endpos__10000_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _20 = _200 in
          let _1000 = _10000 in
          let _1 =
            let _endpos__100_ = _endpos__1000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _2 = _20 in
            let _100 = _1000 in
            let _1 =
              let _endpos__10_ = _endpos__100_ in
              let _startpos__10_ = _startpos__100_ in
              let _10 = _100 in
              let _1 =
                let _1 = _10 in
                
# 1787 "parsing/parser.mly"
            ("!")
# 29201 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 29214 "parsing/parser.ml"
              
            in
            
# 1788 "parsing/parser.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 29220 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__1000_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29231 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29237 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1790 "parsing/parser.mly"
      ( Pexp_override _2 )
# 29284 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29295 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29301 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 1792 "parsing/parser.mly"
      ( unclosed "{<" _loc__1_ ">}" _loc__3_ )
# 29356 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29367 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29373 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1794 "parsing/parser.mly"
      ( Pexp_override [] )
# 29412 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29423 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29429 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let _110 : (Parsetree.expression) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _2 = _20 in
            let _1 = _11 in
            let _3 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 29494 "parsing/parser.ml"
              
            in
            
# 1796 "parsing/parser.mly"
      ( Pexp_field(_1, _3) )
# 29500 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29511 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29517 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.expression) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 29598 "parsing/parser.ml"
              
            in
            
# 1798 "parsing/parser.mly"
      ( Pexp_open(Fresh, _1, _4) )
# 29604 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29615 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29621 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 29703 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1800 "parsing/parser.mly"
      ( (* TODO: review the location of Pexp_override *)
        Pexp_open(Fresh, _1, mkexp ~loc:_sloc (Pexp_override _4)) )
# 29714 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29725 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29731 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 1803 "parsing/parser.mly"
      ( unclosed "{<" _loc__3_ ">}" _loc__5_ )
# 29803 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29814 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29820 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1000 : (Asttypes.label) = Obj.magic _1000 in
        let _200 : unit = Obj.magic _200 in
        let _110 : (Parsetree.expression) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _20 = _200 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _2 = _20 in
            let _1 = _11 in
            let _3 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 29885 "parsing/parser.ml"
              
            in
            
# 1805 "parsing/parser.mly"
      ( Pexp_send(_1, _3) )
# 29891 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29902 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29908 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _1000;
            MenhirLib.EngineTypes.startp = _startpos__1000_;
            MenhirLib.EngineTypes.endp = _endpos__1000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _110;
              MenhirLib.EngineTypes.startp = _startpos__110_;
              MenhirLib.EngineTypes.endp = _endpos__110_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.expression) = Obj.magic _300 in
        let _1000 : (
# 614 "parsing/parser.mly"
       (string)
# 29940 "parsing/parser.ml"
        ) = Obj.magic _1000 in
        let _110 : (Parsetree.expression) = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _30 = _300 in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _3 = _30 in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 741 "parsing/parser.mly"
   ( (* see the mkrhs comment above
        for the choice of $startpos over $symbolstartpos *)
     mkoperator ~loc:_loc _1 )
# 29972 "parsing/parser.ml"
              
            in
            
# 1807 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 29978 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 29989 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 29995 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 1809 "parsing/parser.mly"
      ( Pexp_extension _1 )
# 30026 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30037 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30043 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1010;
                MenhirLib.EngineTypes.startp = _startpos__1010_;
                MenhirLib.EngineTypes.endp = _endpos__1010_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10000 : unit = Obj.magic _10000 in
        let _200 : unit = Obj.magic _200 in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1010_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1000 = _10000 in
          let _20 = _200 in
          let _101 = _1010 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _200 = _2000 in
            let _100 = _1000 in
            let _2 = _20 in
            let _10 = _101 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__100_ in
              let _20 = _200 in
              let _10 = _100 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 1810 "parsing/parser.mly"
                                                 (Lident "()")
# 30112 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 30131 "parsing/parser.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 30153 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1811 "parsing/parser.mly"
      ( (* TODO: review the location of Pexp_construct *)
        Pexp_open(Fresh, _1, mkexp ~loc:_sloc (Pexp_construct(_3, None))) )
# 30164 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__101_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30175 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30181 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.expression) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 1814 "parsing/parser.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_ )
# 30253 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30264 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30270 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1816 "parsing/parser.mly"
      ( let (exten, fields) = _2 in
        Pexp_record(fields, exten) )
# 30319 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30330 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30336 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 1819 "parsing/parser.mly"
      ( unclosed "{" _loc__1_ "}" _loc__3_ )
# 30392 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30403 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30409 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 30492 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__5_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1821 "parsing/parser.mly"
      ( let (exten, fields) = _4 in
        (* TODO: review the location of Pexp_construct *)
        Pexp_open(Fresh, _1, mkexp ~loc:_sloc (Pexp_record(fields, exten))) )
# 30504 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30515 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30521 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 1825 "parsing/parser.mly"
      ( unclosed "{" _loc__3_ "}" _loc__5_ )
# 30594 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30605 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30611 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : (unit) = Obj.magic _300 in
        let _200 : (Parsetree.expression list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 1827 "parsing/parser.mly"
      ( Pexp_array(List.rev _2) )
# 30666 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30677 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30683 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : (unit) = Obj.magic _300 in
        let _200 : (Parsetree.expression list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 1829 "parsing/parser.mly"
      ( unclosed "[|" _loc__1_ "|]" _loc__4_ )
# 30746 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30757 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30763 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 1831 "parsing/parser.mly"
      ( Pexp_array [] )
# 30802 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30813 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30819 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _600;
          MenhirLib.EngineTypes.startp = _startpos__600_;
          MenhirLib.EngineTypes.endp = _endpos__600_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _500;
            MenhirLib.EngineTypes.startp = _startpos__500_;
            MenhirLib.EngineTypes.endp = _endpos__500_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _400;
              MenhirLib.EngineTypes.startp = _startpos__400_;
              MenhirLib.EngineTypes.endp = _endpos__400_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _300;
                MenhirLib.EngineTypes.startp = _startpos__300_;
                MenhirLib.EngineTypes.endp = _endpos__300_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _200;
                  MenhirLib.EngineTypes.startp = _startpos__200_;
                  MenhirLib.EngineTypes.endp = _endpos__200_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1000;
                    MenhirLib.EngineTypes.startp = _startpos__1000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _600 : unit = Obj.magic _600 in
        let _500 : (unit) = Obj.magic _500 in
        let _400 : (Parsetree.expression list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__600_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__60_ = _endpos__600_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _60 = _600 in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__6_ = _endpos__60_ in
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _6 = _60 in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 30909 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__6_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1833 "parsing/parser.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(Fresh, _1, mkexp ~loc:_sloc (Pexp_array(List.rev _4))) )
# 30920 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__60_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 30931 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 30937 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1000;
                MenhirLib.EngineTypes.startp = _startpos__1000_;
                MenhirLib.EngineTypes.endp = _endpos__1000_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 31011 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__4_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1836 "parsing/parser.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(Fresh, _1, mkexp ~loc:_sloc (Pexp_array [])) )
# 31022 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 31033 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 31039 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _600;
          MenhirLib.EngineTypes.startp = _startpos__600_;
          MenhirLib.EngineTypes.endp = _endpos__600_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _500;
            MenhirLib.EngineTypes.startp = _startpos__500_;
            MenhirLib.EngineTypes.endp = _endpos__500_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _400;
              MenhirLib.EngineTypes.startp = _startpos__400_;
              MenhirLib.EngineTypes.endp = _endpos__400_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _300;
                MenhirLib.EngineTypes.startp = _startpos__300_;
                MenhirLib.EngineTypes.endp = _endpos__300_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _200;
                  MenhirLib.EngineTypes.startp = _startpos__200_;
                  MenhirLib.EngineTypes.endp = _endpos__200_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _600 : unit = Obj.magic _600 in
        let _500 : (unit) = Obj.magic _500 in
        let _400 : (Parsetree.expression list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__600_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__60_ = _endpos__600_ in
          let _startpos__60_ = _startpos__600_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _60 = _600 in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__6_ = _endpos__60_ in
            let _startpos__6_ = _startpos__60_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _6 = _60 in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__6_ = (_startpos__6_, _endpos__6_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 1840 "parsing/parser.mly"
      ( unclosed "[|" _loc__3_ "|]" _loc__6_ )
# 31119 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__60_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 31130 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 31136 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : (unit) = Obj.magic _300 in
        let _200 : (Parsetree.expression list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            
# 1842 "parsing/parser.mly"
      ( fst (mktailexp _loc__4_ (List.rev _2)) )
# 31195 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 31206 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 31212 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : (unit) = Obj.magic _300 in
        let _200 : (Parsetree.expression list) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 1844 "parsing/parser.mly"
      ( unclosed "[" _loc__1_ "]" _loc__4_ )
# 31275 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 31286 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 31292 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _600;
          MenhirLib.EngineTypes.startp = _startpos__600_;
          MenhirLib.EngineTypes.endp = _endpos__600_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _500;
            MenhirLib.EngineTypes.startp = _startpos__500_;
            MenhirLib.EngineTypes.endp = _endpos__500_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _400;
              MenhirLib.EngineTypes.startp = _startpos__400_;
              MenhirLib.EngineTypes.endp = _endpos__400_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _300;
                MenhirLib.EngineTypes.startp = _startpos__300_;
                MenhirLib.EngineTypes.endp = _endpos__300_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _200;
                  MenhirLib.EngineTypes.startp = _startpos__200_;
                  MenhirLib.EngineTypes.endp = _endpos__200_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1000;
                    MenhirLib.EngineTypes.startp = _startpos__1000_;
                    MenhirLib.EngineTypes.endp = _endpos__1000_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _600 : unit = Obj.magic _600 in
        let _500 : (unit) = Obj.magic _500 in
        let _400 : (Parsetree.expression list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__600_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__60_ = _endpos__600_ in
          let _startpos__60_ = _startpos__600_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _60 = _600 in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__6_ = _endpos__60_ in
            let _startpos__6_ = _startpos__60_ in
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _6 = _60 in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 31384 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__6_ in
            let _symbolstartpos = _startpos__1_ in
            let _loc__6_ = (_startpos__6_, _endpos__6_) in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1846 "parsing/parser.mly"
      ( let list_exp =
          (* TODO: review the location of list_exp *)
          let tail_exp, _tail_loc = mktailexp _loc__6_ (List.rev _4) in
          mkexp ~loc:_sloc tail_exp in
        Pexp_open(Fresh, _1, list_exp) )
# 31399 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__60_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 31410 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 31416 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1010;
                MenhirLib.EngineTypes.startp = _startpos__1010_;
                MenhirLib.EngineTypes.endp = _endpos__1010_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10000 : unit = Obj.magic _10000 in
        let _200 : unit = Obj.magic _200 in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1010_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1000 = _10000 in
          let _20 = _200 in
          let _101 = _1010 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _200 = _2000 in
            let _100 = _1000 in
            let _2 = _20 in
            let _10 = _101 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__100_ in
              let _20 = _200 in
              let _10 = _100 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 1851 "parsing/parser.mly"
                                                     (Lident "[]")
# 31485 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 31504 "parsing/parser.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 31526 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1852 "parsing/parser.mly"
      ( (* TODO: review the location of Pexp_construct *)
        Pexp_open(Fresh, _1, mkexp ~loc:_sloc (Pexp_construct(_3, None))) )
# 31537 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__101_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 31548 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 31554 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _600;
          MenhirLib.EngineTypes.startp = _startpos__600_;
          MenhirLib.EngineTypes.endp = _endpos__600_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _500;
            MenhirLib.EngineTypes.startp = _startpos__500_;
            MenhirLib.EngineTypes.endp = _endpos__500_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _400;
              MenhirLib.EngineTypes.startp = _startpos__400_;
              MenhirLib.EngineTypes.endp = _endpos__400_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _300;
                MenhirLib.EngineTypes.startp = _startpos__300_;
                MenhirLib.EngineTypes.endp = _endpos__300_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _200;
                  MenhirLib.EngineTypes.startp = _startpos__200_;
                  MenhirLib.EngineTypes.endp = _endpos__200_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _100;
                    MenhirLib.EngineTypes.startp = _startpos__100_;
                    MenhirLib.EngineTypes.endp = _endpos__100_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _600 : unit = Obj.magic _600 in
        let _500 : (unit) = Obj.magic _500 in
        let _400 : (Parsetree.expression list) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__600_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__60_ = _endpos__600_ in
          let _startpos__60_ = _startpos__600_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _60 = _600 in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__6_ = _endpos__60_ in
            let _startpos__6_ = _startpos__60_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _6 = _60 in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__6_ = (_startpos__6_, _endpos__6_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 1856 "parsing/parser.mly"
      ( unclosed "[" _loc__3_ "]" _loc__6_ )
# 31634 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__60_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 31645 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 31651 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _900;
          MenhirLib.EngineTypes.startp = _startpos__900_;
          MenhirLib.EngineTypes.endp = _endpos__900_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _800;
            MenhirLib.EngineTypes.startp = _startpos__800_;
            MenhirLib.EngineTypes.endp = _endpos__800_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _700;
              MenhirLib.EngineTypes.startp = _startpos__700_;
              MenhirLib.EngineTypes.endp = _endpos__700_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _600;
                MenhirLib.EngineTypes.startp = _startpos__600_;
                MenhirLib.EngineTypes.endp = _endpos__600_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _500;
                  MenhirLib.EngineTypes.startp = _startpos__500_;
                  MenhirLib.EngineTypes.endp = _endpos__500_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _400;
                    MenhirLib.EngineTypes.startp = _startpos__400_;
                    MenhirLib.EngineTypes.endp = _endpos__400_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _300;
                      MenhirLib.EngineTypes.startp = _startpos__300_;
                      MenhirLib.EngineTypes.endp = _endpos__300_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _200;
                        MenhirLib.EngineTypes.startp = _startpos__200_;
                        MenhirLib.EngineTypes.endp = _endpos__200_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1000;
                          MenhirLib.EngineTypes.startp = _startpos__1000_;
                          MenhirLib.EngineTypes.endp = _endpos__1000_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _900 : unit = Obj.magic _900 in
        let _800 : (Parsetree.core_type) = Obj.magic _800 in
        let _700 : unit = Obj.magic _700 in
        let _600 : (Parsetree.module_expr) = Obj.magic _600 in
        let _500 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _500 in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__900_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__90_ = _endpos__900_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _90 = _900 in
          let _80 = _800 in
          let _70 = _700 in
          let _60 = _600 in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__9_ = _endpos__90_ in
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _9 = _90 in
            let _8 = _80 in
            let _7 = _70 in
            let _6 = _60 in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 31765 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__9_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1859 "parsing/parser.mly"
      ( (* TODO: review the location of Pexp_constraint *)
        let modexp =
          mkexp_attrs ~loc:_sloc
            (Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _6), _8)) _5 in
        Pexp_open(Fresh, _1, modexp) )
# 31779 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__90_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 31790 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 31796 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _800;
          MenhirLib.EngineTypes.startp = _startpos__800_;
          MenhirLib.EngineTypes.endp = _endpos__800_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _700;
            MenhirLib.EngineTypes.startp = _startpos__700_;
            MenhirLib.EngineTypes.endp = _endpos__700_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _600;
              MenhirLib.EngineTypes.startp = _startpos__600_;
              MenhirLib.EngineTypes.endp = _endpos__600_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _500;
                MenhirLib.EngineTypes.startp = _startpos__500_;
                MenhirLib.EngineTypes.endp = _endpos__500_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _400;
                  MenhirLib.EngineTypes.startp = _startpos__400_;
                  MenhirLib.EngineTypes.endp = _endpos__400_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _300;
                    MenhirLib.EngineTypes.startp = _startpos__300_;
                    MenhirLib.EngineTypes.endp = _endpos__300_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _200;
                      MenhirLib.EngineTypes.startp = _startpos__200_;
                      MenhirLib.EngineTypes.endp = _endpos__200_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _100;
                        MenhirLib.EngineTypes.startp = _startpos__100_;
                        MenhirLib.EngineTypes.endp = _endpos__100_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _800 : unit = Obj.magic _800 in
        let _700 : unit = Obj.magic _700 in
        let _600 : (Parsetree.module_expr) = Obj.magic _600 in
        let _500 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _500 in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__800_ in
        let _v : (Parsetree.expression) = let _1 =
          let _endpos__80_ = _endpos__800_ in
          let _startpos__80_ = _startpos__800_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _80 = _800 in
          let _70 = _700 in
          let _60 = _600 in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__8_ = _endpos__80_ in
            let _startpos__8_ = _startpos__80_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _8 = _80 in
            let _7 = _70 in
            let _6 = _60 in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__8_ = (_startpos__8_, _endpos__8_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 1866 "parsing/parser.mly"
      ( unclosed "(" _loc__3_ ")" _loc__8_ )
# 31892 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__80_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 749 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 31903 "parsing/parser.ml"
          
        in
        
# 1757 "parsing/parser.mly"
      ( _1 )
# 31909 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.arg_label * Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 1871 "parsing/parser.mly"
      ( [_1] )
# 31934 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Asttypes.arg_label * Parsetree.expression) = Obj.magic _2 in
        let _1 : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 1873 "parsing/parser.mly"
      ( _2 :: _1 )
# 31965 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (string) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 32013 "parsing/parser.ml"
              
            in
            
# 2103 "parsing/parser.mly"
      ( Ppat_var (_1) )
# 32019 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32030 "parsing/parser.ml"
          
        in
        
# 2104 "parsing/parser.mly"
      ( _1 )
# 32036 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2105 "parsing/parser.mly"
                             ( _1 )
# 32061 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern) = let _endpos = _endpos__3_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2110 "parsing/parser.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 32101 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2112 "parsing/parser.mly"
      ( _1 )
# 32126 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _10 : (
# 625 "parsing/parser.mly"
       (string)
# 32168 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _3 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 32194 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2114 "parsing/parser.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_unpack _4) _3 )
# 32203 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _10 : (
# 625 "parsing/parser.mly"
       (string)
# 32257 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _3 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.pattern) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 32283 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2116 "parsing/parser.mly"
      ( mkpat_attrs ~loc:_sloc
          (Ppat_constraint(mkpat ~loc:_sloc (Ppat_unpack _4), _6))
          _3 )
# 32294 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2124 "parsing/parser.mly"
      ( Ppat_any )
# 32325 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32336 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 32342 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.constant) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2126 "parsing/parser.mly"
      ( Ppat_constant _1 )
# 32373 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32384 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 32390 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.constant) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Parsetree.constant) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2128 "parsing/parser.mly"
      ( Ppat_interval (_1, _3) )
# 32437 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32448 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 32454 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 32502 "parsing/parser.ml"
              
            in
            
# 2130 "parsing/parser.mly"
      ( Ppat_construct(_1, None) )
# 32508 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32519 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 32525 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Asttypes.label) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2132 "parsing/parser.mly"
      ( Ppat_variant(_1, None) )
# 32556 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32567 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 32573 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _1000;
          MenhirLib.EngineTypes.startp = _startpos__1000_;
          MenhirLib.EngineTypes.endp = _endpos__1000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _110;
            MenhirLib.EngineTypes.startp = _startpos__110_;
            MenhirLib.EngineTypes.endp = _endpos__110_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _110 : unit = Obj.magic _110 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__110_ in
        let _endpos = _endpos__1000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _startpos__11_ = _startpos__110_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _100 = _1000 in
          let _11 = _110 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _10 = _100 in
            let _1 = _11 in
            let _2 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 32630 "parsing/parser.ml"
              
            in
            
# 2134 "parsing/parser.mly"
      ( Ppat_type (_2) )
# 32636 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__100_ in
          let _startpos__1_ = _startpos__11_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32647 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 32653 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1000;
              MenhirLib.EngineTypes.startp = _startpos__1000_;
              MenhirLib.EngineTypes.endp = _endpos__1000_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : (Parsetree.pattern) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 32718 "parsing/parser.ml"
              
            in
            
# 2136 "parsing/parser.mly"
      ( Ppat_open(_1, _3) )
# 32724 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32735 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 32741 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1010;
                MenhirLib.EngineTypes.startp = _startpos__1010_;
                MenhirLib.EngineTypes.endp = _endpos__1010_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10000 : unit = Obj.magic _10000 in
        let _200 : unit = Obj.magic _200 in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1010_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1000 = _10000 in
          let _20 = _200 in
          let _101 = _1010 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _200 = _2000 in
            let _100 = _1000 in
            let _2 = _20 in
            let _10 = _101 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__100_ in
              let _20 = _200 in
              let _10 = _100 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 2137 "parsing/parser.mly"
                                                     (Lident "[]")
# 32810 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 32829 "parsing/parser.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 32851 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2138 "parsing/parser.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 32861 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__101_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32872 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 32878 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _20000;
          MenhirLib.EngineTypes.startp = _startpos__20000_;
          MenhirLib.EngineTypes.endp = _endpos__20000_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10000;
            MenhirLib.EngineTypes.startp = _startpos__10000_;
            MenhirLib.EngineTypes.endp = _endpos__10000_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1010;
                MenhirLib.EngineTypes.startp = _startpos__1010_;
                MenhirLib.EngineTypes.endp = _endpos__1010_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _20000 : unit = Obj.magic _20000 in
        let _10000 : unit = Obj.magic _10000 in
        let _200 : unit = Obj.magic _200 in
        let _1010 : (Longident.t) = Obj.magic _1010 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1010_ in
        let _endpos = _endpos__20000_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__2000_ = _endpos__20000_ in
          let _endpos__101_ = _endpos__1010_ in
          let _startpos__101_ = _startpos__1010_ in
          let _startpos__1000_ = _startpos__10000_ in
          let _2000 = _20000 in
          let _1000 = _10000 in
          let _20 = _200 in
          let _101 = _1010 in
          let _1 =
            let _endpos__200_ = _endpos__2000_ in
            let _startpos__100_ = _startpos__1000_ in
            let _endpos__10_ = _endpos__101_ in
            let _startpos__10_ = _startpos__101_ in
            let _200 = _2000 in
            let _100 = _1000 in
            let _2 = _20 in
            let _10 = _101 in
            let _3 =
              let _endpos__20_ = _endpos__200_ in
              let _startpos__10_ = _startpos__100_ in
              let _20 = _200 in
              let _10 = _100 in
              let _1 =
                let _2 = _20 in
                let _1 = _10 in
                
# 2139 "parsing/parser.mly"
                                                 (Lident "()")
# 32947 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__20_ in
              let _startpos__1_ = _startpos__10_ in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 32966 "parsing/parser.ml"
              
            in
            let _endpos__3_ = _endpos__200_ in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 32988 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__10_ in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2140 "parsing/parser.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 32998 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__2000_ in
          let _startpos__1_ = _startpos__101_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 33009 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 33015 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1000;
                  MenhirLib.EngineTypes.startp = _startpos__1000_;
                  MenhirLib.EngineTypes.endp = _endpos__1000_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.pattern) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _1000 : (Longident.t) = Obj.magic _1000 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1000_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _endpos__100_ = _endpos__1000_ in
          let _startpos__100_ = _startpos__1000_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _100 = _1000 in
          let _1 =
            let _endpos__10_ = _endpos__100_ in
            let _startpos__10_ = _startpos__100_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _10 = _100 in
            let _1 =
              let _endpos__1_ = _endpos__10_ in
              let _startpos__1_ = _startpos__10_ in
              let _1 = _10 in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 33096 "parsing/parser.ml"
              
            in
            
# 2142 "parsing/parser.mly"
      ( Ppat_open (_1, _4) )
# 33102 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__100_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 33113 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 33119 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.pattern) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            
# 2144 "parsing/parser.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_  )
# 33191 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 33202 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 33208 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : (Longident.t) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            
# 2146 "parsing/parser.mly"
      ( expecting _loc__4_ "pattern" )
# 33267 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 33278 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 33284 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _300;
          MenhirLib.EngineTypes.startp = _startpos__300_;
          MenhirLib.EngineTypes.endp = _endpos__300_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _200;
            MenhirLib.EngineTypes.startp = _startpos__200_;
            MenhirLib.EngineTypes.endp = _endpos__200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _100;
              MenhirLib.EngineTypes.startp = _startpos__100_;
              MenhirLib.EngineTypes.endp = _endpos__100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__300_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__30_ = _endpos__300_ in
          let _startpos__30_ = _startpos__300_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__3_ = _endpos__30_ in
            let _startpos__3_ = _startpos__30_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__3_ = (_startpos__3_, _endpos__3_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2148 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 33339 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__30_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 33350 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 33356 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.core_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            
# 2150 "parsing/parser.mly"
      ( Ppat_constraint(_2, _4) )
# 33419 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 33430 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 33436 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _500;
          MenhirLib.EngineTypes.startp = _startpos__500_;
          MenhirLib.EngineTypes.endp = _endpos__500_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _400;
            MenhirLib.EngineTypes.startp = _startpos__400_;
            MenhirLib.EngineTypes.endp = _endpos__400_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _300;
              MenhirLib.EngineTypes.startp = _startpos__300_;
              MenhirLib.EngineTypes.endp = _endpos__300_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _200;
                MenhirLib.EngineTypes.startp = _startpos__200_;
                MenhirLib.EngineTypes.endp = _endpos__200_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _100;
                  MenhirLib.EngineTypes.startp = _startpos__100_;
                  MenhirLib.EngineTypes.endp = _endpos__100_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _500 : unit = Obj.magic _500 in
        let _400 : (Parsetree.core_type) = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__500_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__50_ = _endpos__500_ in
          let _startpos__50_ = _startpos__500_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__5_ = _endpos__50_ in
            let _startpos__5_ = _startpos__50_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__5_ = (_startpos__5_, _endpos__5_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2152 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 33507 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__50_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 33518 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 33524 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _400;
          MenhirLib.EngineTypes.startp = _startpos__400_;
          MenhirLib.EngineTypes.endp = _endpos__400_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _300;
            MenhirLib.EngineTypes.startp = _startpos__300_;
            MenhirLib.EngineTypes.endp = _endpos__300_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _200;
              MenhirLib.EngineTypes.startp = _startpos__200_;
              MenhirLib.EngineTypes.endp = _endpos__200_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _100;
                MenhirLib.EngineTypes.startp = _startpos__100_;
                MenhirLib.EngineTypes.endp = _endpos__100_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _400 : unit = Obj.magic _400 in
        let _300 : unit = Obj.magic _300 in
        let _200 : (Parsetree.pattern) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__400_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__40_ = _endpos__400_ in
          let _startpos__40_ = _startpos__400_ in
          let _startpos__10_ = _startpos__100_ in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__4_ = _endpos__40_ in
            let _startpos__4_ = _startpos__40_ in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            
# 2154 "parsing/parser.mly"
      ( expecting _loc__4_ "type" )
# 33583 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__40_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 33594 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 33600 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _700;
          MenhirLib.EngineTypes.startp = _startpos__700_;
          MenhirLib.EngineTypes.endp = _endpos__700_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _600;
            MenhirLib.EngineTypes.startp = _startpos__600_;
            MenhirLib.EngineTypes.endp = _endpos__600_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _500;
              MenhirLib.EngineTypes.startp = _startpos__500_;
              MenhirLib.EngineTypes.endp = _endpos__500_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _400;
                MenhirLib.EngineTypes.startp = _startpos__400_;
                MenhirLib.EngineTypes.endp = _endpos__400_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _300;
                  MenhirLib.EngineTypes.startp = _startpos__300_;
                  MenhirLib.EngineTypes.endp = _endpos__300_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _200;
                    MenhirLib.EngineTypes.startp = _startpos__200_;
                    MenhirLib.EngineTypes.endp = _endpos__200_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _100;
                      MenhirLib.EngineTypes.startp = _startpos__100_;
                      MenhirLib.EngineTypes.endp = _endpos__100_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _700 : unit = Obj.magic _700 in
        let _600 : (Parsetree.core_type) = Obj.magic _600 in
        let _500 : unit = Obj.magic _500 in
        let _400 : (
# 625 "parsing/parser.mly"
       (string)
# 33654 "parsing/parser.ml"
        ) = Obj.magic _400 in
        let _300 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _300 in
        let _200 : unit = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__700_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__70_ = _endpos__700_ in
          let _startpos__70_ = _startpos__700_ in
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _70 = _700 in
          let _60 = _600 in
          let _50 = _500 in
          let _40 = _400 in
          let _30 = _300 in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _endpos__7_ = _endpos__70_ in
            let _startpos__7_ = _startpos__70_ in
            let _endpos__1_ = _endpos__10_ in
            let _startpos__1_ = _startpos__10_ in
            let _7 = _70 in
            let _6 = _60 in
            let _5 = _50 in
            let _4 = _40 in
            let _3 = _30 in
            let _2 = _20 in
            let _1 = _10 in
            let _loc__7_ = (_startpos__7_, _endpos__7_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2157 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__7_ )
# 33691 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__70_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 33702 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 33708 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _100;
          MenhirLib.EngineTypes.startp = _startpos__100_;
          MenhirLib.EngineTypes.endp = _endpos__100_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _100 : (Parsetree.extension) = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__100_ in
        let _v : (Parsetree.pattern) = let _1 =
          let _endpos__10_ = _endpos__100_ in
          let _startpos__10_ = _startpos__100_ in
          let _10 = _100 in
          let _1 =
            let _1 = _10 in
            
# 2159 "parsing/parser.mly"
      ( Ppat_extension _1 )
# 33739 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 751 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 33750 "parsing/parser.ml"
          
        in
        
# 2120 "parsing/parser.mly"
      ( _1 )
# 33756 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 579 "parsing/parser.mly"
       (string)
# 33777 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2919 "parsing/parser.mly"
           ( _1 )
# 33785 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 625 "parsing/parser.mly"
       (string)
# 33806 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2920 "parsing/parser.mly"
           ( _1 )
# 33814 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2921 "parsing/parser.mly"
        ( "and" )
# 33839 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2922 "parsing/parser.mly"
       ( "as" )
# 33864 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2923 "parsing/parser.mly"
           ( "assert" )
# 33889 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2924 "parsing/parser.mly"
          ( "begin" )
# 33914 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2925 "parsing/parser.mly"
          ( "class" )
# 33939 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2926 "parsing/parser.mly"
               ( "constraint" )
# 33964 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2927 "parsing/parser.mly"
       ( "do" )
# 33989 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2928 "parsing/parser.mly"
         ( "done" )
# 34014 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2929 "parsing/parser.mly"
           ( "downto" )
# 34039 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2930 "parsing/parser.mly"
         ( "else" )
# 34064 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2931 "parsing/parser.mly"
        ( "end" )
# 34089 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2932 "parsing/parser.mly"
              ( "exception" )
# 34114 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2933 "parsing/parser.mly"
             ( "external" )
# 34139 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2934 "parsing/parser.mly"
          ( "false" )
# 34164 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2935 "parsing/parser.mly"
        ( "for" )
# 34189 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2936 "parsing/parser.mly"
        ( "fun" )
# 34214 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2937 "parsing/parser.mly"
             ( "function" )
# 34239 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2938 "parsing/parser.mly"
            ( "functor" )
# 34264 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2939 "parsing/parser.mly"
       ( "if" )
# 34289 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2940 "parsing/parser.mly"
       ( "in" )
# 34314 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2941 "parsing/parser.mly"
            ( "include" )
# 34339 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2942 "parsing/parser.mly"
            ( "inherit" )
# 34364 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2943 "parsing/parser.mly"
                ( "initializer" )
# 34389 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2944 "parsing/parser.mly"
         ( "lazy" )
# 34414 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2945 "parsing/parser.mly"
        ( "let" )
# 34439 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2946 "parsing/parser.mly"
          ( "match" )
# 34464 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2947 "parsing/parser.mly"
           ( "method" )
# 34489 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2948 "parsing/parser.mly"
           ( "module" )
# 34514 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2949 "parsing/parser.mly"
            ( "mutable" )
# 34539 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2950 "parsing/parser.mly"
        ( "new" )
# 34564 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2951 "parsing/parser.mly"
           ( "nonrec" )
# 34589 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2952 "parsing/parser.mly"
           ( "object" )
# 34614 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2953 "parsing/parser.mly"
       ( "of" )
# 34639 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2954 "parsing/parser.mly"
         ( "open" )
# 34664 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2955 "parsing/parser.mly"
       ( "or" )
# 34689 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2956 "parsing/parser.mly"
            ( "private" )
# 34714 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2957 "parsing/parser.mly"
        ( "rec" )
# 34739 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2958 "parsing/parser.mly"
        ( "sig" )
# 34764 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2959 "parsing/parser.mly"
           ( "struct" )
# 34789 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2960 "parsing/parser.mly"
         ( "then" )
# 34814 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2961 "parsing/parser.mly"
       ( "to" )
# 34839 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2962 "parsing/parser.mly"
         ( "true" )
# 34864 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2963 "parsing/parser.mly"
        ( "try" )
# 34889 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2964 "parsing/parser.mly"
         ( "type" )
# 34914 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2965 "parsing/parser.mly"
        ( "val" )
# 34939 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2966 "parsing/parser.mly"
            ( "virtual" )
# 34964 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2967 "parsing/parser.mly"
         ( "when" )
# 34989 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2968 "parsing/parser.mly"
          ( "while" )
# 35014 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2969 "parsing/parser.mly"
         ( "with" )
# 35039 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.type_exception * string Asttypes.loc option) = 
# 2351 "parsing/parser.mly"
                                                 ( _1 )
# 35064 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _11;
              MenhirLib.EngineTypes.startp = _startpos__11_;
              MenhirLib.EngineTypes.endp = _endpos__11_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.attributes) = Obj.magic _7 in
        let _6 : (Parsetree.attributes) = Obj.magic _6 in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (string) = Obj.magic _10 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.type_exception * string Asttypes.loc option) = let _5 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 35140 "parsing/parser.ml"
          
        in
        let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 35161 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2354 "parsing/parser.mly"
    ( let (ext,attrs) = _2 in
      let docs = symbol_docs _sloc in
      Te.mk_exception ~attrs:_7
        (Te.rebind _3 _5 ~attrs:(attrs @ _6) ~loc:(make_loc _sloc) ~docs)
      , ext )
# 35174 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = 
# 2432 "parsing/parser.mly"
                                                          ( [_1] )
# 35199 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = 
# 2433 "parsing/parser.mly"
                                                          ( [_1] )
# 35224 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = 
# 2434 "parsing/parser.mly"
                                                          ( [_1] )
# 35249 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.extension_constructor list) = 
# 2435 "parsing/parser.mly"
                                                          ( [_1] )
# 35274 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.extension_constructor) = Obj.magic _2 in
        let _1 : (Parsetree.extension_constructor list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.extension_constructor list) = 
# 2437 "parsing/parser.mly"
      ( _2 :: _1 )
# 35305 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.extension_constructor) = Obj.magic _2 in
        let _1 : (Parsetree.extension_constructor list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.extension_constructor list) = 
# 2439 "parsing/parser.mly"
      ( _2 :: _1 )
# 35336 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.attributes) = Obj.magic _4 in
        let _3 : (Parsetree.module_expr) = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.include_declaration * string Asttypes.loc option) = let _endpos = _endpos__4_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 997 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Incl.mk _3 ~attrs:(attrs@_4) ~loc:(make_loc _sloc) ~docs, ext )
# 35384 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.attributes) = Obj.magic _9 in
        let _8 : (Parsetree.extension_constructor list) = Obj.magic _8 in
        let _7 : (Asttypes.private_flag) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _4 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _4 in
        let _3 : (Asttypes.rec_flag) = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : (Parsetree.type_extension * string Asttypes.loc option) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 35472 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__9_ in
        let _symbolstartpos = _startpos__1_ in
        let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2415 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        if _3 <> Recursive then not_expecting _loc__3_ "nonrec flag";
        let docs = symbol_docs _sloc in
        Te.mk _5 (List.rev _8) ~params:_4 ~priv:_7 ~attrs:(attrs@_9) ~docs
        , ext )
# 35486 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 1955 "parsing/parser.mly"
      ( _2 )
# 35517 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1957 "parsing/parser.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 35551 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string Asttypes.loc list) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.expression) = let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1959 "parsing/parser.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 35603 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.structure_item list) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.structure) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 721 "parsing/parser.mly"
                              ( extra_str _startpos _endpos _1 )
# 35634 "parsing/parser.ml"
          
        in
        
# 943 "parsing/parser.mly"
                                      ( _1 )
# 35640 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 958 "parsing/parser.mly"
      ( val_of_let_bindings ~loc:_sloc _1 )
# 35668 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.structure_item_desc * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _startpos = _startpos__1_ in
        let _loc = (_startpos, _endpos) in
        
# 960 "parsing/parser.mly"
      ( let item, ext = _1 in
        wrap_str_ext ~loc:_loc (mkstr ~loc:_loc item) ext )
# 35697 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 963 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkstr ~loc:_sloc (Pstr_extension (_1, (add_docs_attrs docs _2))) )
# 35732 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 966 "parsing/parser.mly"
      ( mkstr ~loc:_sloc (Pstr_attribute _1) )
# 35760 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 970 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Pstr_primitive body, ext) )
# 35785 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 972 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Pstr_primitive body, ext) )
# 35810 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.rec_flag * Parsetree.type_declaration list *
  string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 974 "parsing/parser.mly"
      ( let (nr, l, ext ) = _1 in (Pstr_type (nr, List.rev l), ext) )
# 35836 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_extension * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 976 "parsing/parser.mly"
      ( let (l, ext) = _1 in (Pstr_typext l, ext) )
# 35861 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 978 "parsing/parser.mly"
      ( let (l, ext) = _1 in (Pstr_exception l, ext) )
# 35886 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_binding * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 980 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Pstr_module body, ext) )
# 35911 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_binding list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 982 "parsing/parser.mly"
      ( let (l, ext) = _1 in (Pstr_recmodule (List.rev l), ext) )
# 35936 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_type_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 984 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Pstr_modtype body, ext) )
# 35961 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.open_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 986 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Pstr_open body, ext) )
# 35986 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_declaration list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 988 "parsing/parser.mly"
      ( let (l, ext) = _1 in (Pstr_class (List.rev l), ext) )
# 36011 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_type_declaration list * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 990 "parsing/parser.mly"
      ( let (l, ext) = _1 in (Pstr_class_type (List.rev l), ext) )
# 36036 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.include_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item_desc * string Asttypes.loc option) = 
# 992 "parsing/parser.mly"
      ( let (body, ext) = _1 in (Pstr_include body, ext) )
# 36061 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.structure_item list) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.structure_item list) = 
# 946 "parsing/parser.mly"
      ( mark_rhs_docs _startpos__1_ _endpos__2_;
        text_str _startpos__1_ @ mkstrexp _1 _2 :: _3 )
# 36099 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.structure_item list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item list) = 
# 948 "parsing/parser.mly"
                         ( _1 )
# 36124 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list) = 
# 951 "parsing/parser.mly"
                                        ( [] )
# 36142 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.structure_item list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.structure_item list) = 
# 952 "parsing/parser.mly"
                                        ( text_str _startpos__1_ @ _2 )
# 36173 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.structure_item list) = Obj.magic _2 in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.structure_item list) = 
# 953 "parsing/parser.mly"
                                        ( text_str _startpos__1_ @ _1 :: _2 )
# 36204 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2908 "parsing/parser.mly"
                                                ( "-" )
# 36229 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2909 "parsing/parser.mly"
                                                ( "-." )
# 36254 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _10;
                  MenhirLib.EngineTypes.startp = _startpos__10_;
                  MenhirLib.EngineTypes.endp = _endpos__10_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.attributes) = Obj.magic _5 in
        let _4 : (Parsetree.core_type list) = Obj.magic _4 in
        let _3 : (bool) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.row_field) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 36318 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2634 "parsing/parser.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _5 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 _3 (List.rev _4) )
# 36330 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.row_field) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 36376 "parsing/parser.ml"
          
        in
        let _startpos__1_ = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2638 "parsing/parser.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _2 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 true [] )
# 36388 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _10 : (Parsetree.structure_item list) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__10_ in
        let _v : (Parsetree.structure) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 721 "parsing/parser.mly"
                              ( extra_str _startpos _endpos _1 )
# 36419 "parsing/parser.ml"
          
        in
        
# 810 "parsing/parser.mly"
                                              ( _1 )
# 36425 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.structure_item list) = 
# 813 "parsing/parser.mly"
      ( text_str _startpos__1_ @ [mkstrexp _1 _2] )
# 36456 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.structure_item list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.structure_item list) = 
# 815 "parsing/parser.mly"
      ( _1 )
# 36481 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list) = 
# 819 "parsing/parser.mly"
      ( [] )
# 36499 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.structure_item list) = Obj.magic _2 in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.structure_item list) = 
# 821 "parsing/parser.mly"
      ( text_str _startpos__1_ @ _1 :: _2 )
# 36530 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label Asttypes.loc * Parsetree.directive_argument option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.toplevel_phrase) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2836 "parsing/parser.mly"
    ( let (dir, arg) = _1 in
      mk_directive ~loc:_sloc dir arg )
# 36559 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Asttypes.label Asttypes.loc * Parsetree.directive_argument option) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 36605 "parsing/parser.ml"
          
        in
        
# 2841 "parsing/parser.mly"
    ( _2, None )
# 36611 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.directive_argument) = Obj.magic _3 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Asttypes.label Asttypes.loc * Parsetree.directive_argument option) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 36663 "parsing/parser.ml"
          
        in
        
# 2843 "parsing/parser.mly"
    ( _2, Some _3 )
# 36669 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.directive_argument_desc) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.directive_argument) = let _endpos = _endpos__1_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2848 "parsing/parser.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 36697 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 617 "parsing/parser.mly"
       (string * string option)
# 36718 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.directive_argument_desc) = 
# 2851 "parsing/parser.mly"
                  ( let (s, _) = _1 in Pdir_string s )
# 36726 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 565 "parsing/parser.mly"
       (string * char option)
# 36747 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.directive_argument_desc) = 
# 2852 "parsing/parser.mly"
                  ( let (n, m) = _1 in Pdir_int (n ,m) )
# 36755 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.directive_argument_desc) = 
# 2853 "parsing/parser.mly"
                  ( Pdir_ident _1 )
# 36780 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.directive_argument_desc) = 
# 2854 "parsing/parser.mly"
                  ( Pdir_ident _1 )
# 36805 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.directive_argument_desc) = 
# 2855 "parsing/parser.mly"
                  ( Pdir_bool false )
# 36830 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.directive_argument_desc) = 
# 2856 "parsing/parser.mly"
                  ( Pdir_bool true )
# 36855 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 709 "parsing/parser.mly"
      (Parsetree.toplevel_phrase)
# 36886 "parsing/parser.ml"
        ) = 
# 806 "parsing/parser.mly"
                                         ( Ptop_def (_1) )
# 36890 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 709 "parsing/parser.mly"
      (Parsetree.toplevel_phrase)
# 36921 "parsing/parser.ml"
        ) = 
# 807 "parsing/parser.mly"
                                         ( _1 )
# 36925 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (
# 709 "parsing/parser.mly"
      (Parsetree.toplevel_phrase)
# 36950 "parsing/parser.ml"
        ) = 
# 808 "parsing/parser.mly"
                                         ( raise End_of_file )
# 36954 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2024 "parsing/parser.mly"
                                                ( (Some _2, None) )
# 36985 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2025 "parsing/parser.mly"
                                                ( (Some _2, Some _4) )
# 37028 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2026 "parsing/parser.mly"
                                                ( (None, Some _2) )
# 37059 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2027 "parsing/parser.mly"
                                                ( syntax_error() )
# 37090 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2028 "parsing/parser.mly"
                                                ( syntax_error() )
# 37121 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.attributes) = Obj.magic _8 in
        let _7 : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic _7 in
        let _6 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _6 in
        let _10 : (
# 579 "parsing/parser.mly"
       (string)
# 37180 "parsing/parser.ml"
        ) = Obj.magic _10 in
        let _4 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _4 in
        let _3 : (Asttypes.rec_flag) = Obj.magic _3 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Asttypes.rec_flag * Parsetree.type_declaration * string Asttypes.loc option) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 37207 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__8_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2251 "parsing/parser.mly"
      ( let (kind, priv, manifest) = _6 in
        let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        let ty =
          Type.mk _5 ~params:_4 ~cstrs:(List.rev _7) ~kind
            ~priv ?manifest ~attrs:(attrs@_8) ~loc:(make_loc _sloc) ~docs
        in
        (_3, ty, ext) )
# 37223 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.rec_flag * Parsetree.type_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.rec_flag * Parsetree.type_declaration list *
  string Asttypes.loc option) = 
# 2243 "parsing/parser.mly"
      ( let (nonrec_flag, ty, ext) = _1 in (nonrec_flag, [ty], ext) )
# 37249 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.type_declaration) = Obj.magic _2 in
        let _1 : (Asttypes.rec_flag * Parsetree.type_declaration list *
  string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.rec_flag * Parsetree.type_declaration list *
  string Asttypes.loc option) = 
# 2245 "parsing/parser.mly"
      ( let (nonrec_flag, tys, ext) = _1 in (nonrec_flag, _2 :: tys, ext) )
# 37282 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2276 "parsing/parser.mly"
      ( (Ptype_abstract, Public, None) )
# 37300 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2278 "parsing/parser.mly"
      ( (Ptype_abstract, Public, Some _2) )
# 37331 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2280 "parsing/parser.mly"
      ( (Ptype_abstract, Private, Some _3) )
# 37368 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.constructor_declaration list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2282 "parsing/parser.mly"
      ( (Ptype_variant(List.rev _2), Public, None) )
# 37399 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.constructor_declaration list) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2284 "parsing/parser.mly"
      ( (Ptype_variant(List.rev _3), Private, None) )
# 37436 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2286 "parsing/parser.mly"
      ( (Ptype_open, Public, None) )
# 37467 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2288 "parsing/parser.mly"
      ( (Ptype_open, Private, None) )
# 37504 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.label_declaration list) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Asttypes.private_flag) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2290 "parsing/parser.mly"
      ( (Ptype_record _4, _2, None) )
# 37553 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.constructor_declaration list) = Obj.magic _5 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2292 "parsing/parser.mly"
      ( (Ptype_variant(List.rev _5), _4, Some _2) )
# 37602 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2294 "parsing/parser.mly"
      ( (Ptype_open, _4, Some _2) )
# 37651 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.label_declaration list) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 2296 "parsing/parser.mly"
      ( (Ptype_record _6, _4, Some _2) )
# 37712 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 579 "parsing/parser.mly"
       (string)
# 37733 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2806 "parsing/parser.mly"
                                                ( Lident _1 )
# 37741 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 579 "parsing/parser.mly"
       (string)
# 37772 "parsing/parser.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 2807 "parsing/parser.mly"
                                                ( Ldot(_1, _3) )
# 37782 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : (Asttypes.variance) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type * Asttypes.variance) = 
# 2318 "parsing/parser.mly"
                                                  ( _2, _1 )
# 37813 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type * Asttypes.variance) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2329 "parsing/parser.mly"
                                                ( [_1] )
# 37838 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type * Asttypes.variance) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : ((Parsetree.core_type * Asttypes.variance) list) = 
# 2330 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 37875 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _200;
          MenhirLib.EngineTypes.startp = _startpos__200_;
          MenhirLib.EngineTypes.endp = _endpos__200_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _100;
            MenhirLib.EngineTypes.startp = _startpos__100_;
            MenhirLib.EngineTypes.endp = _endpos__100_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _200 : (Asttypes.label) = Obj.magic _200 in
        let _100 : unit = Obj.magic _100 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__100_ in
        let _endpos = _endpos__200_ in
        let _v : (Parsetree.core_type) = let _1 =
          let _endpos__20_ = _endpos__200_ in
          let _startpos__10_ = _startpos__100_ in
          let _20 = _200 in
          let _10 = _100 in
          let _1 =
            let _2 = _20 in
            let _1 = _10 in
            
# 2326 "parsing/parser.mly"
                      ( Ptyp_var _2 )
# 37914 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__20_ in
          let _startpos__1_ = _startpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          
# 753 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 37925 "parsing/parser.ml"
          
        in
        
# 2326 "parsing/parser.mly"
                                       ( _1 )
# 37931 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.variance) = 
# 2321 "parsing/parser.mly"
                                                ( Invariant )
# 37949 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance) = 
# 2322 "parsing/parser.mly"
                                                ( Covariant )
# 37974 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance) = 
# 2323 "parsing/parser.mly"
                                                ( Contravariant )
# 37999 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Asttypes.label Asttypes.loc list) = let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 38045 "parsing/parser.ml"
          
        in
        
# 2512 "parsing/parser.mly"
                                                ( [_2] )
# 38051 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Asttypes.label Asttypes.loc list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : (Asttypes.label Asttypes.loc list) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 38103 "parsing/parser.ml"
          
        in
        
# 2513 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 38109 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _10 : (Parsetree.toplevel_phrase list) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 711 "parsing/parser.mly"
      (Parsetree.toplevel_phrase list)
# 38140 "parsing/parser.ml"
        ) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          
# 725 "parsing/parser.mly"
                              ( extra_def _startpos _endpos _1 )
# 38150 "parsing/parser.ml"
          
        in
        
# 825 "parsing/parser.mly"
                                         ( _1 )
# 38156 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.toplevel_phrase list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.toplevel_phrase list) = 
# 828 "parsing/parser.mly"
                                         ( _1 )
# 38181 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.toplevel_phrase list) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.toplevel_phrase list) = 
# 830 "parsing/parser.mly"
      ( text_def _startpos__1_ @ Ptop_def[mkstrexp _1 _2] :: _3 )
# 38218 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.toplevel_phrase list) = 
# 834 "parsing/parser.mly"
      ( [] )
# 38236 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.toplevel_phrase list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase list) = 
# 836 "parsing/parser.mly"
      ( _2 )
# 38267 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.toplevel_phrase list) = Obj.magic _2 in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase list) = 
# 838 "parsing/parser.mly"
      ( text_def _startpos__1_ @ Ptop_def[_1] :: _2 )
# 38298 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.toplevel_phrase list) = Obj.magic _2 in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase list) = 
# 840 "parsing/parser.mly"
      ( mark_rhs_docs _startpos__1_ _endpos__1_;
        text_def _startpos__1_ @ _1 :: _2 )
# 38330 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 579 "parsing/parser.mly"
       (string)
# 38351 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 2742 "parsing/parser.mly"
                              ( _1 )
# 38359 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 2743 "parsing/parser.mly"
                              ( _2 )
# 38396 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (string) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        let _loc__1_ = (_startpos__1_, _endpos__1_) in
        
# 2744 "parsing/parser.mly"
                              ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 38435 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = let _loc__2_ = (_startpos__2_, _endpos__2_) in
        
# 2745 "parsing/parser.mly"
                              ( expecting _loc__2_ "operator" )
# 38467 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = let _loc__3_ = (_startpos__3_, _endpos__3_) in
        
# 2746 "parsing/parser.mly"
                              ( expecting _loc__3_ "module-expr" )
# 38505 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 2789 "parsing/parser.mly"
                                                ( Lident _1 )
# 38530 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 2790 "parsing/parser.mly"
                                                ( Ldot(_1, _3) )
# 38567 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.core_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Asttypes.override_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 38645 "parsing/parser.ml"
          
        in
        
# 1327 "parsing/parser.mly"
      ( if _1 = Override then syntax_error ();
        (_5, Mutable, Cfk_virtual _7), _2 )
# 38652 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.core_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _4 : (Asttypes.mutable_flag) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Asttypes.override_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = let _5 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 38730 "parsing/parser.ml"
          
        in
        
# 1330 "parsing/parser.mly"
      ( if _1 = Override then syntax_error ();
        (_5, _4, Cfk_virtual _7), _2 )
# 38737 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Asttypes.override_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 38809 "parsing/parser.ml"
          
        in
        
# 1333 "parsing/parser.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 38815 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _2 : (Parsetree.attributes) = Obj.magic _2 in
        let _1 : (Asttypes.override_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = let _4 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 38893 "parsing/parser.ml"
          
        in
        let _startpos__4_ = _startpos__10_ in
        let _endpos = _endpos__7_ in
        let _symbolstartpos = if Pervasives.(!=) _startpos__1_ _endpos__1_ then
          _startpos__1_
        else
          if Pervasives.(!=) _startpos__2_ _endpos__2_ then
            _startpos__2_
          else
            if Pervasives.(!=) _startpos__3_ _endpos__3_ then
              _startpos__3_
            else
              _startpos__4_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 1336 "parsing/parser.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 38914 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.attributes) = Obj.magic _6 in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (string) = Obj.magic _10 in
        let _2 : (string Asttypes.loc option * Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.value_description * string Asttypes.loc option) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 38984 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2219 "parsing/parser.mly"
      ( let (ext, attrs) = _2 in
        let docs = symbol_docs _sloc in
        Val.mk _3 _5 ~attrs:(attrs@_6) ~loc:(make_loc _sloc) ~docs, ext )
# 38995 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _2 : (Asttypes.mutable_flag) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
  Asttypes.virtual_flag * Parsetree.core_type) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 39060 "parsing/parser.ml"
          
        in
        
# 1447 "parsing/parser.mly"
      ( _3, _2, Virtual, _5 )
# 39066 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _2 : (Asttypes.virtual_flag) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
  Asttypes.virtual_flag * Parsetree.core_type) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 39131 "parsing/parser.ml"
          
        in
        
# 1449 "parsing/parser.mly"
      ( _3, Mutable, _2, _5 )
# 39137 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _10 : (Asttypes.label) = Obj.magic _10 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__10_ in
        let _endpos = _endpos__3_ in
        let _v : (Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
  Asttypes.virtual_flag * Parsetree.core_type) = let _1 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 39190 "parsing/parser.ml"
          
        in
        
# 1451 "parsing/parser.mly"
      ( _1, Immutable, Concrete, _3 )
# 39196 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.virtual_flag) = 
# 2885 "parsing/parser.mly"
                                                ( Concrete )
# 39214 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.virtual_flag) = 
# 2886 "parsing/parser.mly"
                                                ( Virtual )
# 39239 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _10;
                MenhirLib.EngineTypes.startp = _startpos__10_;
                MenhirLib.EngineTypes.endp = _endpos__10_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic _6 in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Parsetree.with_constraint) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 39309 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__6_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2479 "parsing/parser.mly"
      ( let lident = Location.{ _3 with txt = Longident.last _3.txt } in
        Pwith_type
          (_3,
           (Type.mk lident
              ~params:_2
              ~cstrs:(List.rev _6)
              ~manifest:_5
              ~priv:_4
              ~loc:(make_loc _sloc))) )
# 39326 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.core_type) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _2 : ((Parsetree.core_type * Asttypes.variance) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.with_constraint) = let _3 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 39390 "parsing/parser.ml"
          
        in
        let _endpos = _endpos__5_ in
        let _symbolstartpos = _startpos__1_ in
        let _sloc = (_symbolstartpos, _endpos) in
        
# 2492 "parsing/parser.mly"
      ( let lident = Location.{ _3 with txt = Longident.last _3.txt } in
        Pwith_typesubst
         (_3,
           (Type.mk lident
              ~params:_2
              ~manifest:_5
              ~loc:(make_loc _sloc))) )
# 39405 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.with_constraint) = let _4 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 39463 "parsing/parser.ml"
          
        in
        let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 39484 "parsing/parser.ml"
          
        in
        
# 2500 "parsing/parser.mly"
      ( Pwith_module (_2, _4) )
# 39490 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Longident.t) = Obj.magic _11 in
        let _3 : unit = Obj.magic _3 in
        let _10 : (Longident.t) = Obj.magic _10 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v : (Parsetree.with_constraint) = let _4 =
          let _endpos__1_ = _endpos__11_ in
          let _startpos__1_ = _startpos__11_ in
          let _1 = _11 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 39548 "parsing/parser.ml"
          
        in
        let _2 =
          let _endpos__1_ = _endpos__10_ in
          let _startpos__1_ = _startpos__10_ in
          let _1 = _10 in
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          
# 729 "parsing/parser.mly"
    (
      (* Semantically we could use $symbolstartpos instead of $startpos
         here, but the code comes from calls to (Parsing.rhs_loc p) for
         some position p, which rather corresponds to
         $startpos, so we kept it for compatibility.

         I do not know if mkrhs is ever used in a situation where $startpos
         and $symbolpos do not coincide.  *)
      mkrhs _1 _loc )
# 39569 "parsing/parser.ml"
          
        in
        
# 2502 "parsing/parser.mly"
      ( Pwith_modsubst (_2, _4) )
# 39575 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.with_constraint) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.with_constraint list) = 
# 2473 "parsing/parser.mly"
                                                ( [_1] )
# 39600 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.with_constraint) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.with_constraint list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.with_constraint list) = 
# 2474 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 39637 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 2505 "parsing/parser.mly"
                   ( Public )
# 39662 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 2506 "parsing/parser.mly"
                   ( Private )
# 39693 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let use_file =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1662 lexer lexbuf) : (
# 711 "parsing/parser.mly"
      (Parsetree.toplevel_phrase list)
# 39724 "parsing/parser.ml"
    ))

and toplevel_phrase =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1637 lexer lexbuf) : (
# 709 "parsing/parser.mly"
      (Parsetree.toplevel_phrase)
# 39732 "parsing/parser.ml"
    ))

and parse_pattern =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1633 lexer lexbuf) : (
# 717 "parsing/parser.mly"
      (Parsetree.pattern)
# 39740 "parsing/parser.ml"
    ))

and parse_expression =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1629 lexer lexbuf) : (
# 715 "parsing/parser.mly"
      (Parsetree.expression)
# 39748 "parsing/parser.ml"
    ))

and parse_core_type =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1625 lexer lexbuf) : (
# 713 "parsing/parser.mly"
      (Parsetree.core_type)
# 39756 "parsing/parser.ml"
    ))

and interface =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1621 lexer lexbuf) : (
# 707 "parsing/parser.mly"
      (Parsetree.signature)
# 39764 "parsing/parser.ml"
    ))

and implementation =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 0 lexer lexbuf) : (
# 705 "parsing/parser.mly"
      (Parsetree.structure)
# 39772 "parsing/parser.ml"
    ))

module Incremental = struct
  
  let use_file =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1662 initial_position) : (
# 711 "parsing/parser.mly"
      (Parsetree.toplevel_phrase list)
# 39782 "parsing/parser.ml"
      ) MenhirInterpreter.checkpoint)
  
  and toplevel_phrase =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1637 initial_position) : (
# 709 "parsing/parser.mly"
      (Parsetree.toplevel_phrase)
# 39790 "parsing/parser.ml"
      ) MenhirInterpreter.checkpoint)
  
  and parse_pattern =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1633 initial_position) : (
# 717 "parsing/parser.mly"
      (Parsetree.pattern)
# 39798 "parsing/parser.ml"
      ) MenhirInterpreter.checkpoint)
  
  and parse_expression =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1629 initial_position) : (
# 715 "parsing/parser.mly"
      (Parsetree.expression)
# 39806 "parsing/parser.ml"
      ) MenhirInterpreter.checkpoint)
  
  and parse_core_type =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1625 initial_position) : (
# 713 "parsing/parser.mly"
      (Parsetree.core_type)
# 39814 "parsing/parser.ml"
      ) MenhirInterpreter.checkpoint)
  
  and interface =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 1621 initial_position) : (
# 707 "parsing/parser.mly"
      (Parsetree.signature)
# 39822 "parsing/parser.ml"
      ) MenhirInterpreter.checkpoint)
  
  and implementation =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (
# 705 "parsing/parser.mly"
      (Parsetree.structure)
# 39830 "parsing/parser.ml"
      ) MenhirInterpreter.checkpoint)
  
end

# 3018 "parsing/parser.mly"
  

# 39838 "parsing/parser.ml"

# 233 "menhir/standard.mly"
  

# 39843 "parsing/parser.ml"
