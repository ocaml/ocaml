#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*            Xavier Leroy, projet Cristal, INRIA Rocquencourt            *
#*                                                                        *
#*   Copyright 1999 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************
MAKEFLAGS := -r -R
include ../global.mk
CAMLRUN ?= ../boot/ocamlrun
CAMLYACC ?= ../boot/ocamlyacc
DESTDIR ?=
VPATH = ..
# Setup GNU make variables storing per-target source and target,
# a list of installed tools, and a function to quote a filename for
# the shell.
override shellquote=''""'$(subst ','\'',$1)'#'#')'#
override installed_tools := ocamldep ocamlprof ocamlcp ocamloptp \
                   ocamlmktop ocamlmklib ocamlobjinfo

install_files :=
define byte2native
$(patsubst %.cmo,%.cmx,$(patsubst %.cma,%.cmxa,$1))
endef

# $1 = target, $2 = OCaml object dependencies, $3 = other dependencies
# There is a lot of subtle code here.  The multiple layers of expansion
# are due to `make`'s eval() function, which evaluates the string
# passed to it as a makefile fragment.  So it is crucial that variables
# not get expanded too many times.
define byte_and_opt_
# This check is defensive programming
$(and $(filter-out 1,$(words $1)),$(error \
   cannot build file with whitespace in name))
$1: $3 $2
	$$(CAMLC) $2 $$(LINKFLAGS) -I .. -o $$@

$1.opt: $3 $$(call byte2native,$2)
	$$(CAMLOPT) $$(LINKFLAGS) -I .. -o $$@ $$(call byte2native,$2)

all: $1

opt.opt: $1.opt

ifeq '$(filter $(installed_tools),$1)' '$1'
install_files += $1
endif
clean::
	rm -f -- $1 $1.opt

endef

# Escape any $ characters in the arguments and eval the result.
define byte_and_opt
$(eval $(call \
 byte_and_opt_,$(subst $$,$$$$,$1),$(subst $$,$$$$,$2),$(subst $$,$$$$,$3)))
endef

ROOTDIR=..

ifeq "$(wildcard $(ROOTDIR)/flexdll/Makefile)" ""
export OCAML_FLEXLINK:=
else
export OCAML_FLEXLINK:=$(ROOTDIR)/boot/ocamlrun $(ROOTDIR)/flexdll/flexlink.exe
endif

CAMLC=$(CAMLRUN) ../boot/ocamlc -nostdlib -I ../boot -use-prims \
  ../byterun/primitives -I ..
CAMLOPT := $(CAMLRUN) ../ocamlopt -nostdlib -I ../stdlib
CAMLLEX=$(CAMLRUN) ../boot/ocamllex
INCLUDES=-I ../utils -I ../parsing -I ../typing -I ../bytecomp -I ../asmcomp \
         -I ../middle_end -I ../middle_end/base_types -I ../driver \
         -I ../toplevel
COMPFLAGS= -absname -w +a-4-9-41-42-44-45-48 -strict-sequence -warn-error A \
 -safe-string -strict-formats $(INCLUDES)
LINKFLAGS=$(INCLUDES)
#VPATH := $(filter-out -I,$(INCLUDES))

# scrapelabels addlabels

.PHONY: all opt.opt

# The dependency generator

CAMLDEP_OBJ=ocamldep.cmo
CAMLDEP_IMPORTS=utils/timings.cmo utils/misc.cmo utils/config.cmo		\
  utils/identifiable.cmo utils/numbers.cmo utils/arg_helper.cmo			\
  utils/clflags.cmo utils/terminfo.cmo utils/warnings.cmo parsing/location.cmo	\
  parsing/longident.cmo parsing/docstrings.cmo parsing/syntaxerr.cmo		\
  parsing/ast_helper.cmo parsing/parser.cmo parsing/lexer.cmo parsing/parse.cmo	\
  utils/ccomp.cmo parsing/ast_mapper.cmo parsing/ast_iterator.cmo		\
  parsing/builtin_attributes.cmo parsing/ast_invariants.cmo driver/pparse.cmo	\
  driver/compenv.cmo parsing/depend.cmo

ocamldep: LINKFLAGS += -compat-32
$(call byte_and_opt,ocamldep,$(CAMLDEP_IMPORTS) $(CAMLDEP_OBJ),)
ocamldep: parsing/depend.cmi
ocamldep.opt: parsing/depend.cmi

# ocamldep is precious: sometimes we are stuck in the middle of a
# bootstrap and we need to remake the dependencies
clean::
	if test -f ocamldep; then mv -f ocamldep ocamldep.bak; else :; fi
	rm -f ocamldep.opt


# The profiler

CSLPROF=ocamlprof.cmo
CSLPROF_IMPORTS=utils/misc.cmo utils/config.cmo utils/identifiable.cmo		\
  utils/numbers.cmo utils/arg_helper.cmo utils/clflags.cmo utils/terminfo.cmo	\
  utils/warnings.cmo parsing/location.cmo parsing/longident.cmo			\
  parsing/docstrings.cmo parsing/syntaxerr.cmo parsing/ast_helper.cmo		\
  parsing/parser.cmo parsing/lexer.cmo parsing/parse.cmo

$(call byte_and_opt,ocamlprof,$(CSLPROF_IMPORTS) profiling.cmo $(CSLPROF),)

ocamlcp_cmos = utils/misc.cmo utils/warnings.cmo utils/config.cmo		\
            utils/identifiable.cmo utils/numbers.cmo utils/arg_helper.cmo	\
            utils/clflags.cmo driver/main_args.cmo

$(call byte_and_opt,ocamlcp,$(ocamlcp_cmos) ocamlcp.cmo,)
$(call byte_and_opt,ocamloptp,$(ocamlcp_cmos) ocamloptp.cmo,)

opt:: profiling.cmx

install::
	cp -- profiling.cmi profiling.cmo $(INSTALL_LIBDIR)

installopt::
	cp -- profiling.cmx profiling.$(O) $(INSTALL_LIBDIR)

# To help building mixed-mode libraries (OCaml + C)

$(call byte_and_opt,ocamlmklib,ocamlmklibconfig.cmo utils/config.cmo \
	         ocamlmklib.cmo,)


ocamlmklibconfig.ml: ../config/Makefile Makefile
	(echo 'let bindir = "$(BINDIR)"'; \
         echo 'let supports_shared_libraries = $(SUPPORTS_SHARED_LIBRARIES)';\
         echo 'let byteccrpath = "$(BYTECCRPATH)"'; \
         echo 'let nativeccrpath = "$(NATIVECCRPATH)"'; \
         echo 'let mksharedlibrpath = "$(MKSHAREDLIBRPATH)"'; \
         echo 'let toolpref = "$(TOOLPREF)"'; \
         sed -n -e 's/^#ml //p' ../config/Makefile) \
        > ocamlmklibconfig.ml

beforedepend:: ocamlmklibconfig.ml

clean::
	rm -f ocamlmklibconfig.ml

# To make custom toplevels

OCAMLMKTOP=ocamlmktop.cmo
OCAMLMKTOP_IMPORTS=utils/misc.cmo utils/identifiable.cmo utils/numbers.cmo	\
             utils/config.cmo utils/arg_helper.cmo utils/clflags.cmo		\
             utils/ccomp.cmo

$(call byte_and_opt,ocamlmktop,$(OCAMLMKTOP_IMPORTS) $(OCAMLMKTOP),)

# Converter olabl/ocaml 2.99 to ocaml 3

OCAML299TO3= lexer299.cmo ocaml299to3.cmo
LIBRARY3= utils/misc.cmo utils/warnings.cmo location.cmo

ocaml299to3: $(OCAML299TO3)
	$(CAMLC) $(LINKFLAGS) -o ocaml299to3 $(LIBRARY3) $(OCAML299TO3)

lexer299.ml: lexer299.mll
	$(CAMLLEX) lexer299.mll

#install::
#	cp ocaml299to3 $(INSTALL_BINDIR)/ocaml299to3$(EXE)

clean::
	rm -f ocaml299to3 lexer299.ml

# Label remover for interface files (upgrade 3.02 to 3.03)

SCRAPELABELS= lexer301.cmo scrapelabels.cmo

scrapelabels: $(SCRAPELABELS)
	$(CAMLC) $(LINKFLAGS) -o scrapelabels $(LIBRARY3) $(SCRAPELABELS)

lexer301.ml: lexer301.mll
	$(CAMLLEX) lexer301.mll

#install::
#	cp scrapelabels $(INSTALL_LIBDIR)

clean::
	rm -f scrapelabels lexer301.ml

# Insert labels following an interface file (upgrade 3.02 to 3.03)

ADDLABELS_IMPORTS= utils/misc.cmo utils/config.cmo utils/arg_helper.cmo		\
utils/clflags.cmo utils/identifiable.cmo utils/numbers.cmo utils/terminfo.cmo	\
utils/warnings.cmo parsing/location.cmo parsing/longident.cmo			\
parsing/docstrings.cmo parsing/syntaxerr.cmo parsing/ast_helper.cmo		\
parsing/parser.cmo parsing/lexer.cmo parsing/parse.cmo

addlabels: addlabels.cmo
	$(CAMLC) $(LINKFLAGS) -w sl -o addlabels $(ADDLABELS_IMPORTS)	\
		addlabels.cmo

#install::
#	cp addlabels $(INSTALL_LIBDIR)

ifeq ($(EXE),)
LN := ln -sf --
else ifeq ($(EXE),.exe) # Windows kernel.  Cygwin cannot create true symlinks.
LN := cp -f --
else
$(error $(EXE) must be the empty string or '.exe')
endif

install::
	for i in $(install_files); \
	do \
	  cp -- "$$i" $(INSTALL_BINDIR)"/$$i.byte$(EXE)"; \
	  if test -f "$$i".opt; then \
	    cp -- "$$i.opt" $(INSTALL_BINDIR)"/$$i.opt$(EXE)"; \
	    $(LN) "$$i.opt$(EXE)" $(INSTALL_BINDIR)"/$$i$(EXE)"; \
	  else \
	    $(LN) "$$i.byte$(EXE)" $(INSTALL_BINDIR)"/$$i$(EXE)"; \
	  fi; \
	done

clean::
	rm -f addlabels

# The preprocessor for asm generators

CVT_EMIT=cvt_emit.cmo

cvt_emit: $(CVT_EMIT)
	$(CAMLC) $(LINKFLAGS) -o cvt_emit $(CVT_EMIT)

# cvt_emit is precious: sometimes we are stuck in the middle of a
# bootstrap and we need to remake the dependencies
.PRECIOUS: cvt_emit
clean::
	if test -f cvt_emit; then mv -f cvt_emit cvt_emit.bak; else :; fi

cvt_emit.ml: cvt_emit.mll
	$(CAMLLEX) cvt_emit.mll

clean::
	rm -f cvt_emit.ml

beforedepend:: cvt_emit.ml


READ_CMT=../compilerlibs/ocamlcommon.cma	\
         ../compilerlibs/ocamlbytecomp.cma	\
         cmt2annot.cmo read_cmt.cmo

# Reading cmt files
$(call byte_and_opt,read_cmt,$(READ_CMT),)


# The bytecode disassembler

DUMPOBJ=opnames.cmo dumpobj.cmo

$(call byte_and_opt,dumpobj,utils/misc.cmo utils/identifiable.cmo	\
                 utils/numbers.cmo utils/tbl.cmo utils/config.cmo	\
                 typing/ident.cmo bytecomp/opcodes.cmo			\
                 bytecomp/bytesections.cmo $(DUMPOBJ),)

opnames.ml: ../byterun/caml/instruct.h
	unset LC_ALL || : ; \
	unset LC_CTYPE || : ; \
	unset LC_COLLATE LANG || : ; \
	sed -e '/[/][*]/d' \
	    -e '/^#/d' \
	    -e 's/enum \(.*\) {/let names_of_\1 = [|/' \
	    -e 's/.*};$$/ |]/' \
	    -e 's/\([A-Z][A-Z_0-9a-z]*\)/"\1"/g' \
	    -e 's/,/;/g' \
	../byterun/caml/instruct.h > opnames.ml

clean::
	rm -f opnames.ml

beforedepend:: opnames.ml

# Display info on compiled files

ifeq "$(SYSTEM)" "macosx"
DEF_SYMBOL_PREFIX = '-Dsymbol_prefix="_"'
else
DEF_SYMBOL_PREFIX = '-Dsymbol_prefix=""'
endif

ifeq "$(CCOMPTYPE)" "msvc"
CCOUT = -Fe
else
EMPTY =
CCOUT = -o $(EMPTY)
endif

objinfo_helper$(EXE): objinfo_helper.c ../config/s.h
	$(BYTECC) $(CCOUT)objinfo_helper$(EXE) $(BYTECCCOMPOPTS) \
          $(DEF_SYMBOL_PREFIX) $(LIBBFD_INCLUDE) objinfo_helper.c $(LIBBFD_LINK)

OBJINFO=../compilerlibs/ocamlcommon.cma \
        ../compilerlibs/ocamlbytecomp.cma \
        ../compilerlibs/ocamlmiddleend.cma \
        ../asmcomp/printclambda.cmo \
        ../asmcomp/export_info.cmo \
        objinfo.cmo

$(call byte_and_opt,ocamlobjinfo,$(OBJINFO),objinfo_helper$(EXE))

# Scan object files for required primitives
$(call byte_and_opt,primreq,utils/config.cmo primreq.cmo,)

clean::
	rm -f "objinfo_helper$(EXE)"


# Copy a bytecode executable, stripping debug info

stripdebug=../compilerlibs/ocamlcommon.cma \
           ../compilerlibs/ocamlbytecomp.cma \
           stripdebug.cmo

$(call byte_and_opt,stripdebug,$(stripdebug),)

# Compare two bytecode executables

cmpbyt=../compilerlibs/ocamlcommon.cma \
       ../compilerlibs/ocamlbytecomp.cma \
       cmpbyt.cmo

$(call byte_and_opt,cmpbyt,$(cmpbyt),)

ifeq "$(RUNTIMEI)" "true"
install::
	cp ocaml-instr-graph ocaml-instr-report $(INSTALL_BINDIR)/
endif

# Common stuff

.SUFFIXES:

%.cmo: %.ml
	$(CAMLC) -c $(COMPFLAGS) - $<

%.cmi: %.mli
	$(CAMLC) -c $(COMPFLAGS) - $<

%.cmx: %.ml
	$(CAMLOPT) $(COMPFLAGS) -c - $<

clean::
	rm -f *.cmo *.cmi *.cma *.dll *.so *.lib *.a

depend: beforedepend
	$(CAMLRUN) ./ocamldep -slash $(INCLUDES) *.mli *.ml > .depend

.PHONY: clean install beforedepend depend

include .depend
