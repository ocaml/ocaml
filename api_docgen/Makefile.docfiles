#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*             Florian Angeletti, projet Cambium, Inria Paris             *
#*                                                                        *
#*   Copyright 2020 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

# Capitalize first letter of argument
define up
$(shell echo $(1) | cut -c1 | tr '[:lower:]' '[:upper:]')
endef

define capitalize_one
$(call up,$(1))$(shell echo $(1) | cut -c2-)
endef

define capitalize
$(foreach m,$(1),$(call capitalize_one,$m))
endef

define sort
$(shell $(BEST_OCAMLDEP) -sort $(1))
endef


str_MLIS := str.mli
unix_MLIS := unix.mli unixLabels.mli
dynlink_MLIS := dynlink.mli
thread_MLIS := \
  thread.mli event.mli

STDLIB=$(STDLIB_MODULES)

stdlib_UNPREFIXED=$(STDLIB_MODULE_BASENAMES)

otherlibref := $(dynlink_MLIS:%.mli=%)

ifneq "$(filter str,$(OTHERLIBRARIES))" ""
otherlibref += $(str_MLIS:%.mli=%)
endif

ifneq "$(filter %unix,$(OTHERLIBRARIES))" ""
otherlibref += $(unix_MLIS:%.mli=%)
endif

ifneq "$(filter systhreads,$(OTHERLIBRARIES))" ""
otherlibref += $(thread_MLIS:%.mli=%)
endif

libref_TEXT=Ocaml_operators Format_tutorial
libref_C=$(call capitalize,$(libref))

PARSING_MLIS := $(call sort, \
  $(notdir $(wildcard $(ROOTDIR)/parsing/*.mli))\
)
UTILS_MLIS := $(call sort,$(notdir $(wildcard $(ROOTDIR)/utils/*.mli)))
DRIVER_MLIS := pparse.mli

compilerlibref_MLIS= \
  $(PARSING_MLIS) \
  $(UTILS_MLIS) \
  $(DRIVER_MLIS)
compilerlibref=$(compilerlibref_MLIS:%.mli=%)
compilerlibref_TEXT=Compiler_libs
compilerlibref_C=$(call capitalize,$(compilerlibref))

ALL_LIBREF= $(libref_TEXT:%=libref/%) $(libref:%=libref/%)
ALL_COMPILERLIBREF= \
  $(compilerlibref_TEXT:%=compilerlibref/%) \
  $(compilerlibref:%=compilerlibref/%)
ALL_DOC= $(ALL_LIBREF) $(ALL_COMPILERLIBREF)
