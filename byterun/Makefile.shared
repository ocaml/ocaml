#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*            Xavier Leroy, projet Cristal, INRIA Rocquencourt            *
#*                                                                        *
#*   Copyright 1999 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

include ../config/Makefile
CAMLRUN ?= ../boot/ocamlrun
CAMLYACC ?= ../boot/ocamlyacc

CC=$(BYTECC)

COMMONOBJS=\
  interp.o misc.o stacks.o fix_code.o startup_aux.o startup.o \
  freelist.o major_gc.o minor_gc.o memory.o alloc.o roots.o globroots.o \
  fail.o signals.o signals_byt.o printexc.o backtrace_prim.o backtrace.o \
  compare.o ints.o floats.o str.o array.o io.o extern.o intern.o \
  hash.o sys.o meta.o parsing.o gc_ctrl.o terminfo.o md5.o obj.o \
  lexing.o callback.o debugger.o weak.o compact.o finalise.o custom.o \
  dynlink.o spacetime.o

PRIMS=\
  alloc.c array.c compare.c extern.c floats.c gc_ctrl.c hash.c \
  intern.c interp.c ints.c io.c lexing.c md5.c meta.c obj.c parsing.c \
  signals.c str.c sys.c terminfo.c callback.c weak.c finalise.c stacks.c \
  dynlink.c backtrace_prim.c backtrace.c spacetime.c

all:: ocamlrun$(EXE) ld.conf libcamlrun.$(A) all-$(RUNTIMED) primitives
.PHONY: all

all-noruntimed:
.PHONY: all-noruntimed

all-runtimed: ocamlrund$(EXE) libcamlrund.$(A)
.PHONY: all-runtimed

ifeq "$(RUNTIMEI)" "true"
all:: ocamlruni$(EXE) libcamlruni.$(A)
endif

ld.conf: ../config/Makefile
	echo "$(STUBLIBDIR)" > ld.conf
	echo "$(LIBDIR)" >> ld.conf

# Installation

INSTALL_BINDIR=$(DESTDIR)$(BINDIR)
INSTALL_LIBDIR=$(DESTDIR)$(LIBDIR)


install::
	cp $(CAMLRUN)$(EXE) "$(INSTALL_BINDIR)/ocamlrun$(EXE)"
	cp libcamlrun.$(A) "$(INSTALL_LIBDIR)/libcamlrun.$(A)"
	cd "$(INSTALL_LIBDIR)"; $(RANLIB) libcamlrun.$(A)
	if test -d "$(INSTALL_LIBDIR)/caml"; then : ; \
	  else mkdir "$(INSTALL_LIBDIR)/caml"; fi
	for i in caml/*.h; do \
	  sed -f ../tools/cleanup-header $$i \
	      > "$(INSTALL_LIBDIR)/$$i"; \
	done
	cp ld.conf "$(INSTALL_LIBDIR)/ld.conf"
.PHONY: install

install:: install-$(RUNTIMED)

install-noruntimed:
.PHONY: install-noruntimed

# TODO: when cross-compiling, do not install ocamlrund
# it doesn't hurt to install it, but it's useless and might be confusing
# because it's an executable for the target machine, while we're installing
# binaries for the host.
install-runtimed:
	cp ocamlrund$(EXE) "$(INSTALL_BINDIR)/ocamlrund$(EXE)"
	cp libcamlrund.$(A) "$(INSTALL_LIBDIR)/libcamlrund.$(A)"
.PHONY: install-runtimed

ifeq "$(RUNTIMEI)" "true"
install::
	cp ocamlruni$(EXE) $(INSTALL_BINDIR)/ocamlruni$(EXE)
	cp libcamlruni.$(A) $(INSTALL_LIBDIR)/libcamlruni.$(A)
endif

# If primitives contain duplicated lines (e.g. because the code is defined
# like
# #ifdef X
# CAMLprim value caml_foo() ...
# #else
# CAMLprim value caml_foo() ...
# end), horrible things will happen (duplicated entries in Runtimedef ->
# double registration in Symtable -> empty entry in the PRIM table ->
# the bytecode interpreter is confused).
# We sort the primitive file and remove duplicates to avoid this problem.

# Warning: we use "sort | uniq" instead of "sort -u" because in the MSVC
# port, the "sort" program in the path is Microsoft's and not cygwin's

# Warning: POSIX sort is locale dependent, that's why we set LC_ALL explicitly.
# Sort is unstable for "is_directory" and "isatty"
# see http://pubs.opengroup.org/onlinepubs/9699919799/utilities/sort.html:
# "using sort to process pathnames, it is recommended that LC_ALL .. set to C"


primitives : $(PRIMS)
	sed -n -e "s/CAMLprim value \([a-z0-9_][a-z0-9_]*\).*/\1/p" $(PRIMS) \
	  | LC_ALL=C sort | uniq > primitives

prims.c : primitives
	(echo '#define CAML_INTERNALS'; \
         echo '#include "caml/mlvalues.h"'; \
	 echo '#include "caml/prims.h"'; \
	 sed -e 's/.*/extern value &();/' primitives; \
	 echo 'c_primitive caml_builtin_cprim[] = {'; \
	 sed -e 's/.*/	&,/' primitives; \
	 echo '	 0 };'; \
	 echo 'char * caml_names_of_builtin_cprim[] = {'; \
	 sed -e 's/.*/	"&",/' primitives; \
	 echo '	 0 };') > prims.c

caml/opnames.h : caml/instruct.h
	sed -e '/\/\*/d' \
	    -e '/^#/d' \
	    -e 's/enum /char * names_of_/' \
	    -e 's/{$$/[] = {/' \
	    -e 's/\([[:upper:]][[:upper:]_0-9]*\)/"\1"/g' caml/instruct.h \
	    > caml/opnames.h

# caml/jumptbl.h is required only if you have GCC 2.0 or later
caml/jumptbl.h : caml/instruct.h
	sed -n -e '/^  /s/ \([A-Z]\)/ \&\&lbl_\1/gp' \
	       -e '/^}/q' caml/instruct.h > caml/jumptbl.h

caml/version.h : ../VERSION ../tools/make-version-header.sh
	../tools/make-version-header.sh ../VERSION > caml/version.h

clean ::
	rm -f ocamlrun$(EXE) ocamlrund$(EXE) *.$(O) *.$(A) *.$(SO)
	rm -f primitives prims.c caml/opnames.h caml/jumptbl.h ld.conf
	rm -f caml/version.h
.PHONY: clean
